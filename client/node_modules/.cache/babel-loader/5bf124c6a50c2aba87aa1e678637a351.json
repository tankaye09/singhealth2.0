{"ast":null,"code":"module.exports = function (event) {\n  return new Promise((resolve, reject) => {\n    let reader = new FileReader();\n    let files = event.target.files;\n    let len = files.length;\n\n    if (len > 1) {\n      reject(new DOMException(\"Only one file can be uploaded at a time\"));\n    } else {\n      reader.onerror = () => {\n        reader.abort();\n        reject(new DOMException(\"Problem parsing input file.\"));\n      };\n\n      let file = files[0];\n\n      reader.onload = evt => {\n        const uint = new Uint8Array(evt.target.result);\n        let bytes = [];\n        uint.map(byte => {\n          bytes.push(byte.toString(16));\n        });\n        const hex = bytes.join('').toUpperCase();\n        let base64 = reader.result.split(',')[1];\n        file.base64 = base64;\n        file.binaryFileType = getMimetype(hex);\n        resolve(file);\n      };\n\n      reader.readAsDataURL(file);\n    }\n  });\n};\n\nconst getMimetype = signature => {\n  switch (signature) {\n    case '89504E47':\n      return 'image/png';\n\n    case '47494638':\n      return 'image/gif';\n\n    case '25504446':\n      return 'application/pdf';\n\n    case 'FFD8FFDB':\n    case 'FFD8FFE0':\n      return 'image/jpeg';\n\n    case '504B0304':\n      return 'application/zip';\n\n    default:\n      return 'Unknown filetype';\n  }\n};","map":{"version":3,"sources":["C:/Users/tanka/Desktop/ESC/Project/SingHealthApp/singhealth2.0/node_modules/fuctbase64/index.js"],"names":["module","exports","event","Promise","resolve","reject","reader","FileReader","files","target","len","length","DOMException","onerror","abort","file","onload","evt","uint","Uint8Array","result","bytes","map","byte","push","toString","hex","join","toUpperCase","base64","split","binaryFileType","getMimetype","readAsDataURL","signature"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiB,UAAUC,KAAV,EAAiB;AAChC,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,QAAIC,MAAM,GAAG,IAAIC,UAAJ,EAAb;AACA,QAAIC,KAAK,GAAGN,KAAK,CAACO,MAAN,CAAaD,KAAzB;AACA,QAAIE,GAAG,GAAGF,KAAK,CAACG,MAAhB;;AACA,QAAID,GAAG,GAAG,CAAV,EAAa;AACXL,MAAAA,MAAM,CAAC,IAAIO,YAAJ,CAAiB,yCAAjB,CAAD,CAAN;AACD,KAFD,MAEO;AACLN,MAAAA,MAAM,CAACO,OAAP,GAAiB,MAAM;AACrBP,QAAAA,MAAM,CAACQ,KAAP;AACAT,QAAAA,MAAM,CAAC,IAAIO,YAAJ,CAAiB,6BAAjB,CAAD,CAAN;AACD,OAHD;;AAIA,UAAIG,IAAI,GAAGP,KAAK,CAAC,CAAD,CAAhB;;AACAF,MAAAA,MAAM,CAACU,MAAP,GAAiBC,GAAD,IAAS;AACvB,cAAMC,IAAI,GAAG,IAAIC,UAAJ,CAAeF,GAAG,CAACR,MAAJ,CAAWW,MAA1B,CAAb;AACA,YAAIC,KAAK,GAAG,EAAZ;AACAH,QAAAA,IAAI,CAACI,GAAL,CAASC,IAAI,IAAI;AACfF,UAAAA,KAAK,CAACG,IAAN,CAAWD,IAAI,CAACE,QAAL,CAAc,EAAd,CAAX;AACD,SAFD;AAGA,cAAMC,GAAG,GAAGL,KAAK,CAACM,IAAN,CAAW,EAAX,EAAeC,WAAf,EAAZ;AACA,YAAIC,MAAM,GAAGvB,MAAM,CAACc,MAAP,CAAcU,KAAd,CAAoB,GAApB,EAAyB,CAAzB,CAAb;AACAf,QAAAA,IAAI,CAACc,MAAL,GAAcA,MAAd;AACAd,QAAAA,IAAI,CAACgB,cAAL,GAAsBC,WAAW,CAACN,GAAD,CAAjC;AACAtB,QAAAA,OAAO,CAACW,IAAD,CAAP;AACD,OAXD;;AAYAT,MAAAA,MAAM,CAAC2B,aAAP,CAAqBlB,IAArB;AACD;AACF,GA1BM,CAAP;AA2BD,CA5BD;;AA+BA,MAAMiB,WAAW,GAAIE,SAAD,IAAe;AACjC,UAAQA,SAAR;AACI,SAAK,UAAL;AACI,aAAO,WAAP;;AACJ,SAAK,UAAL;AACI,aAAO,WAAP;;AACJ,SAAK,UAAL;AACI,aAAO,iBAAP;;AACJ,SAAK,UAAL;AACA,SAAK,UAAL;AACI,aAAO,YAAP;;AACJ,SAAK,UAAL;AACI,aAAO,iBAAP;;AACJ;AACI,aAAO,kBAAP;AAbR;AAeD,CAhBD","sourcesContent":["module.exports = function (event) {\r\n  return new Promise((resolve, reject) => {\r\n    let reader = new FileReader();\r\n    let files = event.target.files;\r\n    let len = files.length;\r\n    if (len > 1) {\r\n      reject(new DOMException(\"Only one file can be uploaded at a time\"));\r\n    } else {\r\n      reader.onerror = () => {\r\n        reader.abort();\r\n        reject(new DOMException(\"Problem parsing input file.\"));\r\n      };\r\n      let file = files[0]\r\n      reader.onload = (evt) => {\r\n        const uint = new Uint8Array(evt.target.result);\r\n        let bytes = [];\r\n        uint.map(byte => {\r\n          bytes.push(byte.toString(16));\r\n        });\r\n        const hex = bytes.join('').toUpperCase();\r\n        let base64 = reader.result.split(',')[1];\r\n        file.base64 = base64;\r\n        file.binaryFileType = getMimetype(hex);\r\n        resolve(file);\r\n      };\r\n      reader.readAsDataURL(file);\r\n    }\r\n  });\r\n}\r\n\r\n\r\nconst getMimetype = (signature) => {\r\n  switch (signature) {\r\n      case '89504E47':\r\n          return 'image/png'\r\n      case '47494638':\r\n          return 'image/gif'\r\n      case '25504446':\r\n          return 'application/pdf'\r\n      case 'FFD8FFDB':\r\n      case 'FFD8FFE0':\r\n          return 'image/jpeg'\r\n      case '504B0304':\r\n          return 'application/zip'\r\n      default:\r\n          return 'Unknown filetype'\r\n  }\r\n}"]},"metadata":{},"sourceType":"script"}