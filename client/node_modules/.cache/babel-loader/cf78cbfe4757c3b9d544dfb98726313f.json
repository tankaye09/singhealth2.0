{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tanka\\\\Desktop\\\\ESC\\\\Project\\\\SingHealthApp\\\\singhealth2.0\\\\client\\\\src\\\\components\\\\auth\\\\Register.js\";\nimport React, { Component } from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { registerUser } from \"../../actions/authActions\";\nimport classnames from \"classnames\";\nimport { getStaffKey } from \"../../actions/authActions\";\nimport { Form, Input, Button, Checkbox, Select } from \"antd\";\nimport { MailOutlined, UserOutlined, LockOutlined, SketchOutlined } from \"@ant-design/icons\";\nimport institutionsData from \"../../data/institutions.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst institutions = institutionsData;\n\nclass Register extends Component {\n  constructor() {\n    super();\n\n    this.onChange = e => {\n      this.setState({\n        [e.target.id]: e.target.value\n      });\n    };\n\n    this.onDropdownChange = (e, {\n      value\n    }) => this.setState({\n      value\n    });\n\n    this.onFinish = values => {\n      getStaffKey(data => {\n        // console.log(\"data is: \", data);\n        this.setState({ ...this.state,\n          dbstaffkey: data\n        }); // console.log(\"dbstaffkey is: \", this.state.dbstaffkey);\n\n        if (this.state.staffkey === this.state.dbstaffkey) {\n          const newUser = {\n            name: values.name,\n            email: values.email,\n            password: values.password,\n            password2: values.password2,\n            institution: values.institution,\n            usertype: \"staff\"\n          };\n          this.props.registerUser(newUser, this.props.history);\n        } else {\n          alert(\"Staff Key is incorrect!\");\n        }\n      });\n    };\n\n    this.state = {\n      name: \"\",\n      email: \"\",\n      password: \"\",\n      password2: \"\",\n      institution: \"\",\n      staffkey: \"\",\n      dbstaffkey: \"\",\n      errors: {}\n    };\n  }\n\n  componentDidMount() {\n    // If loggied in and user navigates to Register page, should redirect them to dashboad\n    if (this.props.auth.isAuthenticaed) {\n      this.props.history.push(\"/dashboard\"); // Push new entry into history stack, ie redirecting the user to another route\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.errors) {\n      this.setState({\n        errors: nextProps.errors\n      });\n    }\n  }\n\n  render() {\n    const {\n      errors\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Form, {\n      name: \"normal_login\",\n      className: \"login-register-form\",\n      onFinish: this.onFinish,\n      children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n        name: \"name\",\n        rules: [{\n          required: true,\n          message: \"Please input your Name!\"\n        }],\n        children: /*#__PURE__*/_jsxDEV(Input, {\n          prefix: /*#__PURE__*/_jsxDEV(UserOutlined, {\n            className: \"site-form-item-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 21\n          }, this),\n          placeholder: \"Name\",\n          onChange: this.onChange,\n          value: this.state.name,\n          error: errors.name,\n          id: \"name\",\n          type: \"text\" // className={classnames(\"\", {\n          // invalid: errors.name,\n          // })}\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        name: \"email\",\n        rules: [{\n          required: true,\n          type: \"email\",\n          message: \"Please input a valid Email!\"\n        }],\n        children: /*#__PURE__*/_jsxDEV(Input, {\n          prefix: /*#__PURE__*/_jsxDEV(MailOutlined, {\n            className: \"site-form-item-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 21\n          }, this),\n          placeholder: \"Email\",\n          onChange: this.onChange,\n          value: this.state.email,\n          error: errors.email,\n          id: \"email\",\n          type: \"email\" // className={classnames(\"\", {\n          //   invalid: errors.email,\n          // })}\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        name: \"password\",\n        rules: [{\n          required: true,\n          message: \"Please input your Password!\"\n        }],\n        children: /*#__PURE__*/_jsxDEV(Input, {\n          prefix: /*#__PURE__*/_jsxDEV(LockOutlined, {\n            className: \"site-form-item-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 21\n          }, this),\n          placeholder: \"Password\",\n          onChange: this.onChange,\n          value: this.state.password,\n          error: errors.password,\n          id: \"password\",\n          type: \"password\" // className={classnames(\"\", {\n          //   invalid: errors.password,\n          // })}\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        name: \"password2\",\n        dependencies: [\"password\"],\n        hasFeedback: true,\n        rules: [{\n          required: true,\n          message: \"Passwords do not match!\"\n        }, ({\n          getFieldValue\n        }) => ({\n          validator(_, value) {\n            if (!value || getFieldValue(\"password\") === value) {\n              return Promise.resolve();\n            }\n\n            return Promise.reject(new Error(\"The two passwords that you entered do not match!\"));\n          }\n\n        })],\n        children: /*#__PURE__*/_jsxDEV(Input, {\n          prefix: /*#__PURE__*/_jsxDEV(LockOutlined, {\n            className: \"site-form-item-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 21\n          }, this),\n          placeholder: \"Confirm Password\",\n          onChange: this.onChange,\n          value: this.state.password2,\n          error: errors.password2,\n          id: \"password2\",\n          type: \"password\" // className={classnames(\"\", {\n          // invalid: errors.password2,\n          // })}\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        name: \"staffkey\",\n        rules: [{\n          required: true,\n          message: \"Please input your staff key!\"\n        }],\n        children: /*#__PURE__*/_jsxDEV(Input, {\n          prefix: /*#__PURE__*/_jsxDEV(SketchOutlined, {\n            className: \"site-form-item-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 21\n          }, this),\n          placeholder: \"Staff Key\",\n          onChange: this.onChange,\n          value: this.state.staffkey,\n          error: errors.staffkey,\n          id: \"staffkey\",\n          type: \"staffkey\",\n          className: classnames(\"\", {\n            invalid: errors.key || errors.keyincorrect\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        name: \"institution\",\n        rules: [{\n          required: true,\n          message: \"Please select an institution!\"\n        }],\n        children: /*#__PURE__*/_jsxDEV(Select, {\n          className: \"dropdown\",\n          icon: MailOutlined,\n          placeholder: \"Institution\",\n          options: institutions,\n          onChange: this.onDropdownChange,\n          id: \"institution\",\n          type: \"institution\",\n          value: this.state.institution,\n          error: errors.institution\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          type: \"primary\",\n          htmlType: \"submit\",\n          className: \"login-register-form-button\",\n          children: \"Register\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 11\n        }, this), \"Or \", /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/Login\",\n          children: \"Login here\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 14\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this);\n  }\n\n} // Props stands for properties and is being used for passing data from one component to another\n\n\nRegister.propTypes = {\n  registerUser: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired,\n  errors: PropTypes.object.isRequired\n}; // Get state from Redux and map it to props\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  // allows us to call this.props.auth\n  errors: state.errors // allows us to call this.props.errors\n\n});\n\nexport default connect(mapStateToProps, {\n  registerUser\n})(withRouter(Register));","map":{"version":3,"sources":["C:/Users/tanka/Desktop/ESC/Project/SingHealthApp/singhealth2.0/client/src/components/auth/Register.js"],"names":["React","Component","Link","withRouter","PropTypes","connect","registerUser","classnames","getStaffKey","Form","Input","Button","Checkbox","Select","MailOutlined","UserOutlined","LockOutlined","SketchOutlined","institutionsData","institutions","Register","constructor","onChange","e","setState","target","id","value","onDropdownChange","onFinish","values","data","state","dbstaffkey","staffkey","newUser","name","email","password","password2","institution","usertype","props","history","alert","errors","componentDidMount","auth","isAuthenticaed","push","componentWillReceiveProps","nextProps","render","required","message","type","getFieldValue","validator","_","Promise","resolve","reject","Error","invalid","key","keyincorrect","propTypes","func","isRequired","object","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { registerUser } from \"../../actions/authActions\";\r\nimport classnames from \"classnames\";\r\nimport { getStaffKey } from \"../../actions/authActions\";\r\nimport { Form, Input, Button, Checkbox, Select } from \"antd\";\r\nimport {\r\n  MailOutlined,\r\n  UserOutlined,\r\n  LockOutlined,\r\n  SketchOutlined,\r\n} from \"@ant-design/icons\";\r\nimport institutionsData from \"../../data/institutions.json\";\r\n\r\nconst institutions = institutionsData;\r\n\r\nclass Register extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      name: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n      password2: \"\",\r\n      institution: \"\",\r\n      staffkey: \"\",\r\n      dbstaffkey: \"\",\r\n      errors: {},\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // If loggied in and user navigates to Register page, should redirect them to dashboad\r\n    if (this.props.auth.isAuthenticaed) {\r\n      this.props.history.push(\"/dashboard\"); // Push new entry into history stack, ie redirecting the user to another route\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.errors) {\r\n      this.setState({\r\n        errors: nextProps.errors,\r\n      });\r\n    }\r\n  }\r\n\r\n  onChange = (e) => {\r\n    this.setState({ [e.target.id]: e.target.value });\r\n  };\r\n\r\n  onDropdownChange = (e, { value }) => this.setState({ value });\r\n\r\n  onFinish = (values) => {\r\n    getStaffKey((data) => {\r\n      // console.log(\"data is: \", data);\r\n      this.setState({ ...this.state, dbstaffkey: data });\r\n      // console.log(\"dbstaffkey is: \", this.state.dbstaffkey);\r\n      if (this.state.staffkey === this.state.dbstaffkey) {\r\n        const newUser = {\r\n          name: values.name,\r\n          email: values.email,\r\n          password: values.password,\r\n          password2: values.password2,\r\n          institution: values.institution,\r\n          usertype: \"staff\",\r\n        };\r\n        this.props.registerUser(newUser, this.props.history);\r\n      } else {\r\n        alert(\"Staff Key is incorrect!\");\r\n      }\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { errors } = this.state;\r\n    return (\r\n      <Form\r\n        name=\"normal_login\"\r\n        className=\"login-register-form\"\r\n        onFinish={this.onFinish}\r\n      >\r\n        <Form.Item\r\n          name=\"name\"\r\n          rules={[{ required: true, message: \"Please input your Name!\" }]}\r\n        >\r\n          <Input\r\n            prefix={<UserOutlined className=\"site-form-item-icon\" />}\r\n            placeholder=\"Name\"\r\n            onChange={this.onChange}\r\n            value={this.state.name}\r\n            error={errors.name}\r\n            id=\"name\"\r\n            type=\"text\"\r\n            // className={classnames(\"\", {\r\n            // invalid: errors.name,\r\n            // })}\r\n          />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          name=\"email\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              type: \"email\",\r\n              message: \"Please input a valid Email!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input\r\n            prefix={<MailOutlined className=\"site-form-item-icon\" />}\r\n            placeholder=\"Email\"\r\n            onChange={this.onChange}\r\n            value={this.state.email}\r\n            error={errors.email}\r\n            id=\"email\"\r\n            type=\"email\"\r\n            // className={classnames(\"\", {\r\n            //   invalid: errors.email,\r\n            // })}\r\n          />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          name=\"password\"\r\n          rules={[{ required: true, message: \"Please input your Password!\" }]}\r\n        >\r\n          <Input\r\n            prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n            placeholder=\"Password\"\r\n            onChange={this.onChange}\r\n            value={this.state.password}\r\n            error={errors.password}\r\n            id=\"password\"\r\n            type=\"password\"\r\n            // className={classnames(\"\", {\r\n            //   invalid: errors.password,\r\n            // })}\r\n          />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          name=\"password2\"\r\n          dependencies={[\"password\"]}\r\n          hasFeedback\r\n          rules={[\r\n            { required: true, message: \"Passwords do not match!\" },\r\n            ({ getFieldValue }) => ({\r\n              validator(_, value) {\r\n                if (!value || getFieldValue(\"password\") === value) {\r\n                  return Promise.resolve();\r\n                }\r\n\r\n                return Promise.reject(\r\n                  new Error(\"The two passwords that you entered do not match!\")\r\n                );\r\n              },\r\n            }),\r\n          ]}\r\n        >\r\n          <Input\r\n            prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n            placeholder=\"Confirm Password\"\r\n            onChange={this.onChange}\r\n            value={this.state.password2}\r\n            error={errors.password2}\r\n            id=\"password2\"\r\n            type=\"password\"\r\n            // className={classnames(\"\", {\r\n            // invalid: errors.password2,\r\n            // })}\r\n          />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          name=\"staffkey\"\r\n          rules={[{ required: true, message: \"Please input your staff key!\" }]}\r\n        >\r\n          <Input\r\n            prefix={<SketchOutlined className=\"site-form-item-icon\" />}\r\n            placeholder=\"Staff Key\"\r\n            onChange={this.onChange}\r\n            value={this.state.staffkey}\r\n            error={errors.staffkey}\r\n            id=\"staffkey\"\r\n            type=\"staffkey\"\r\n            className={classnames(\"\", {\r\n              invalid: errors.key || errors.keyincorrect,\r\n            })}\r\n          />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          name=\"institution\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please select an institution!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Select\r\n            className=\"dropdown\"\r\n            icon={MailOutlined}\r\n            placeholder=\"Institution\"\r\n            options={institutions}\r\n            onChange={this.onDropdownChange}\r\n            id=\"institution\"\r\n            type=\"institution\"\r\n            value={this.state.institution}\r\n            error={errors.institution}\r\n          />\r\n        </Form.Item>\r\n\r\n        <Form.Item>\r\n          <Button\r\n            type=\"primary\"\r\n            htmlType=\"submit\"\r\n            className=\"login-register-form-button\"\r\n          >\r\n            Register\r\n          </Button>\r\n          Or <Link to=\"/Login\">Login here</Link>\r\n        </Form.Item>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n// Props stands for properties and is being used for passing data from one component to another\r\nRegister.propTypes = {\r\n  registerUser: PropTypes.func.isRequired,\r\n  auth: PropTypes.object.isRequired,\r\n  errors: PropTypes.object.isRequired,\r\n};\r\n\r\n// Get state from Redux and map it to props\r\nconst mapStateToProps = (state) => ({\r\n  auth: state.auth, // allows us to call this.props.auth\r\n  errors: state.errors, // allows us to call this.props.errors\r\n});\r\n\r\nexport default connect(mapStateToProps, { registerUser })(withRouter(Register));\r\n"]},"metadata":{},"sourceType":"module"}