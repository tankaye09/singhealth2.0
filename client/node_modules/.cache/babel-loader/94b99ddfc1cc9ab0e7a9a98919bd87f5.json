{"ast":null,"code":"'use strict';\n\nconst Transform = require('stream').Transform;\n\nclass LastNewline extends Transform {\n  constructor() {\n    super();\n    this.lastByte = false;\n  }\n\n  _transform(chunk, encoding, done) {\n    if (chunk.length) {\n      this.lastByte = chunk[chunk.length - 1];\n    }\n\n    this.push(chunk);\n    done();\n  }\n\n  _flush(done) {\n    if (this.lastByte === 0x0a) {\n      return done();\n    }\n\n    if (this.lastByte === 0x0d) {\n      this.push(Buffer.from('\\n'));\n      return done();\n    }\n\n    this.push(Buffer.from('\\r\\n'));\n    return done();\n  }\n\n}\n\nmodule.exports = LastNewline;","map":{"version":3,"sources":["C:/Users/tanka/Desktop/ESC/Project/SingHealthApp/singhealth2.0/node_modules/nodemailer/lib/mime-node/last-newline.js"],"names":["Transform","require","LastNewline","constructor","lastByte","_transform","chunk","encoding","done","length","push","_flush","Buffer","from","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,QAAD,CAAP,CAAkBD,SAApC;;AAEA,MAAME,WAAN,SAA0BF,SAA1B,CAAoC;AAChCG,EAAAA,WAAW,GAAG;AACV;AACA,SAAKC,QAAL,GAAgB,KAAhB;AACH;;AAEDC,EAAAA,UAAU,CAACC,KAAD,EAAQC,QAAR,EAAkBC,IAAlB,EAAwB;AAC9B,QAAIF,KAAK,CAACG,MAAV,EAAkB;AACd,WAAKL,QAAL,GAAgBE,KAAK,CAACA,KAAK,CAACG,MAAN,GAAe,CAAhB,CAArB;AACH;;AAED,SAAKC,IAAL,CAAUJ,KAAV;AACAE,IAAAA,IAAI;AACP;;AAEDG,EAAAA,MAAM,CAACH,IAAD,EAAO;AACT,QAAI,KAAKJ,QAAL,KAAkB,IAAtB,EAA4B;AACxB,aAAOI,IAAI,EAAX;AACH;;AACD,QAAI,KAAKJ,QAAL,KAAkB,IAAtB,EAA4B;AACxB,WAAKM,IAAL,CAAUE,MAAM,CAACC,IAAP,CAAY,IAAZ,CAAV;AACA,aAAOL,IAAI,EAAX;AACH;;AACD,SAAKE,IAAL,CAAUE,MAAM,CAACC,IAAP,CAAY,MAAZ,CAAV;AACA,WAAOL,IAAI,EAAX;AACH;;AAzB+B;;AA4BpCM,MAAM,CAACC,OAAP,GAAiBb,WAAjB","sourcesContent":["'use strict';\n\nconst Transform = require('stream').Transform;\n\nclass LastNewline extends Transform {\n    constructor() {\n        super();\n        this.lastByte = false;\n    }\n\n    _transform(chunk, encoding, done) {\n        if (chunk.length) {\n            this.lastByte = chunk[chunk.length - 1];\n        }\n\n        this.push(chunk);\n        done();\n    }\n\n    _flush(done) {\n        if (this.lastByte === 0x0a) {\n            return done();\n        }\n        if (this.lastByte === 0x0d) {\n            this.push(Buffer.from('\\n'));\n            return done();\n        }\n        this.push(Buffer.from('\\r\\n'));\n        return done();\n    }\n}\n\nmodule.exports = LastNewline;\n"]},"metadata":{},"sourceType":"script"}