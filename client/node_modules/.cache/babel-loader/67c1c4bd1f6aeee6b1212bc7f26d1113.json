{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tanka\\\\Desktop\\\\ESC\\\\Project\\\\SingHealthApp\\\\singhealth2.0\\\\client\\\\src\\\\components\\\\auth\\\\RegisterTenant.js\";\nimport React, { Component } from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { registerUser } from \"../../actions/authActions\";\nimport classnames from \"classnames\";\nimport { Form, Input, Button, Checkbox, Select } from \"antd\";\nimport { MailOutlined, UserOutlined, LockOutlined } from \"@ant-design/icons\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst institutions = [{\n  label: \"CGH\",\n  value: \"CGH\"\n}, {\n  label: \"SGH\",\n  value: \"SGH\"\n}, {\n  label: \"KKH\",\n  value: \"KKH\"\n}];\n\nclass Register extends Component {\n  constructor() {\n    super();\n\n    this.onChange = e => {\n      this.setState({\n        [e.target.id]: e.target.value\n      });\n    };\n\n    this.onFinish = values => {\n      const newUser = {\n        name: values.name,\n        email: values.email,\n        password: values.password,\n        password2: values.password2\n      };\n      console.log(newUser);\n      this.props.registerUser(newUser, this.props.history);\n    };\n\n    this.state = {\n      email: \"\",\n      address: \"\",\n      password: \"\",\n      password2: \"\",\n      errors: {}\n    };\n  }\n\n  componentDidMount() {\n    // If loggied in and user navigates to Register page, should redirect them to dashboad\n    if (this.props.auth.isAuthenticaed) {\n      this.props.history.push(\"/dashboard\"); // Push new entry into history stack, ie redirecting the user to another route\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.errors) {\n      this.setState({\n        errors: nextProps.errors\n      });\n    }\n  }\n\n  render() {\n    const {\n      errors\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Form, {\n      name: \"normal_login\",\n      className: \"login-register-form\",\n      onFinish: this.onFinish,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Create Tenant Account\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        name: \"email\",\n        rules: [{\n          required: true,\n          type: \"email\",\n          message: \"Please input a valid Email!\"\n        }],\n        children: /*#__PURE__*/_jsxDEV(Input, {\n          prefix: /*#__PURE__*/_jsxDEV(MailOutlined, {\n            className: \"site-form-item-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 21\n          }, this),\n          placeholder: \"Email\",\n          onChange: this.onChange,\n          value: this.state.email,\n          error: errors.email,\n          id: \"email\",\n          type: \"email\" // className={classnames(\"\", {\n          //   invalid: errors.email,\n          // })}\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        name: \"address\",\n        rules: [{\n          required: true,\n          type: \"string\",\n          message: \"Please input a valid Address!\"\n        }],\n        children: /*#__PURE__*/_jsxDEV(Input, {\n          prefix: /*#__PURE__*/_jsxDEV(MailOutlined, {\n            className: \"site-form-item-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 21\n          }, this),\n          placeholder: \"Address\",\n          onChange: this.onChange,\n          value: this.state.address,\n          error: errors.address,\n          id: \"address\",\n          type: \"address\" // className={classnames(\"\", {\n          //   invalid: errors.email,\n          // })}\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        name: \"institution\",\n        rules: [{\n          required: true,\n          message: \"Please select an institution!\"\n        }],\n        children: [/*#__PURE__*/_jsxDEV(Select, {\n          options: institutions,\n          onChange: this.onChange,\n          id: \"address\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          prefix: /*#__PURE__*/_jsxDEV(MailOutlined, {\n            className: \"site-form-item-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 21\n          }, this),\n          placeholder: \"Address\",\n          onChange: this.onChange,\n          value: this.state.address,\n          error: errors.address,\n          id: \"address\" // className={classnames(\"\", {\n          //   invalid: errors.email,\n          // })}\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        name: \"password\",\n        rules: [{\n          required: true,\n          message: \"Please input your Password!\"\n        }],\n        children: /*#__PURE__*/_jsxDEV(Input, {\n          prefix: /*#__PURE__*/_jsxDEV(LockOutlined, {\n            className: \"site-form-item-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 21\n          }, this),\n          placeholder: \"Password\",\n          onChange: this.onChange,\n          value: this.state.password,\n          error: errors.password,\n          id: \"password\",\n          type: \"password\" // className={classnames(\"\", {\n          //   invalid: errors.password,\n          // })}\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        name: \"password2\",\n        dependencies: [\"password\"],\n        hasFeedback: true,\n        rules: [{\n          required: true,\n          message: \"Passwords do not match!\"\n        }, ({\n          getFieldValue\n        }) => ({\n          validator(_, value) {\n            if (!value || getFieldValue(\"password\") === value) {\n              return Promise.resolve();\n            }\n\n            return Promise.reject(new Error(\"The two passwords that you entered do not match!\"));\n          }\n\n        })],\n        children: /*#__PURE__*/_jsxDEV(Input, {\n          prefix: /*#__PURE__*/_jsxDEV(LockOutlined, {\n            className: \"site-form-item-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 21\n          }, this),\n          placeholder: \"Confirm Password\",\n          onChange: this.onChange,\n          value: this.state.password2,\n          error: errors.password2,\n          id: \"password2\",\n          type: \"password\" // className={classnames(\"\", {\n          // invalid: errors.password2,\n          // })}\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          type: \"primary\",\n          htmlType: \"submit\",\n          className: \"login-register-form-button\",\n          children: \"Register\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }, this), \"Or \", /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/Login\",\n          children: \"Login here\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 14\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this);\n  }\n\n} // Props stands for properties and is being used for passing data from one component to another\n\n\nRegister.propTypes = {\n  registerUser: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired,\n  errors: PropTypes.object.isRequired\n}; // Get state from Redux and map it to props\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  // allows us to call this.props.auth\n  errors: state.errors // allows us to call this.props.errors\n\n});\n\nexport default connect(mapStateToProps, {\n  registerUser\n})(withRouter(Register));","map":{"version":3,"sources":["C:/Users/tanka/Desktop/ESC/Project/SingHealthApp/singhealth2.0/client/src/components/auth/RegisterTenant.js"],"names":["React","Component","Link","withRouter","PropTypes","connect","registerUser","classnames","Form","Input","Button","Checkbox","Select","MailOutlined","UserOutlined","LockOutlined","institutions","label","value","Register","constructor","onChange","e","setState","target","id","onFinish","values","newUser","name","email","password","password2","console","log","props","history","state","address","errors","componentDidMount","auth","isAuthenticaed","push","componentWillReceiveProps","nextProps","render","required","type","message","getFieldValue","validator","_","Promise","resolve","reject","Error","propTypes","func","isRequired","object","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { registerUser } from \"../../actions/authActions\";\r\nimport classnames from \"classnames\";\r\nimport { Form, Input, Button, Checkbox, Select } from \"antd\";\r\nimport { MailOutlined, UserOutlined, LockOutlined } from \"@ant-design/icons\";\r\n\r\nconst institutions = [\r\n  { label: \"CGH\", value: \"CGH\" },\r\n  { label: \"SGH\", value: \"SGH\" },\r\n  { label: \"KKH\", value: \"KKH\" },\r\n];\r\n\r\nclass Register extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      email: \"\",\r\n      address: \"\",\r\n      password: \"\",\r\n      password2: \"\",\r\n      errors: {},\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // If loggied in and user navigates to Register page, should redirect them to dashboad\r\n    if (this.props.auth.isAuthenticaed) {\r\n      this.props.history.push(\"/dashboard\"); // Push new entry into history stack, ie redirecting the user to another route\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.errors) {\r\n      this.setState({\r\n        errors: nextProps.errors,\r\n      });\r\n    }\r\n  }\r\n\r\n  onChange = (e) => {\r\n    this.setState({ [e.target.id]: e.target.value });\r\n  };\r\n  onFinish = (values) => {\r\n    const newUser = {\r\n      name: values.name,\r\n      email: values.email,\r\n      password: values.password,\r\n      password2: values.password2,\r\n    };\r\n    console.log(newUser);\r\n    this.props.registerUser(newUser, this.props.history);\r\n  };\r\n\r\n  render() {\r\n    const { errors } = this.state;\r\n    return (\r\n      <Form\r\n        name=\"normal_login\"\r\n        className=\"login-register-form\"\r\n        onFinish={this.onFinish}\r\n      >\r\n        <h1>Create Tenant Account</h1>\r\n\r\n        {/* No name, replace with id for annonymity */}\r\n\r\n        <Form.Item\r\n          name=\"email\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              type: \"email\",\r\n              message: \"Please input a valid Email!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input\r\n            prefix={<MailOutlined className=\"site-form-item-icon\" />}\r\n            placeholder=\"Email\"\r\n            onChange={this.onChange}\r\n            value={this.state.email}\r\n            error={errors.email}\r\n            id=\"email\"\r\n            type=\"email\"\r\n            // className={classnames(\"\", {\r\n            //   invalid: errors.email,\r\n            // })}\r\n          />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          name=\"address\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              type: \"string\",\r\n              message: \"Please input a valid Address!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input\r\n            prefix={<MailOutlined className=\"site-form-item-icon\" />}\r\n            placeholder=\"Address\"\r\n            onChange={this.onChange}\r\n            value={this.state.address}\r\n            error={errors.address}\r\n            id=\"address\"\r\n            type=\"address\"\r\n            // className={classnames(\"\", {\r\n            //   invalid: errors.email,\r\n            // })}\r\n          />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          name=\"institution\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please select an institution!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Select\r\n            options={institutions}\r\n            onChange={this.onChange}\r\n            id=\"address\"\r\n          />\r\n          <Input\r\n            prefix={<MailOutlined className=\"site-form-item-icon\" />}\r\n            placeholder=\"Address\"\r\n            onChange={this.onChange}\r\n            value={this.state.address}\r\n            error={errors.address}\r\n            id=\"address\"\r\n            // className={classnames(\"\", {\r\n            //   invalid: errors.email,\r\n            // })}\r\n          />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          name=\"password\"\r\n          rules={[{ required: true, message: \"Please input your Password!\" }]}\r\n        >\r\n          <Input\r\n            prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n            placeholder=\"Password\"\r\n            onChange={this.onChange}\r\n            value={this.state.password}\r\n            error={errors.password}\r\n            id=\"password\"\r\n            type=\"password\"\r\n            // className={classnames(\"\", {\r\n            //   invalid: errors.password,\r\n            // })}\r\n          />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          name=\"password2\"\r\n          dependencies={[\"password\"]}\r\n          hasFeedback\r\n          rules={[\r\n            { required: true, message: \"Passwords do not match!\" },\r\n            ({ getFieldValue }) => ({\r\n              validator(_, value) {\r\n                if (!value || getFieldValue(\"password\") === value) {\r\n                  return Promise.resolve();\r\n                }\r\n\r\n                return Promise.reject(\r\n                  new Error(\"The two passwords that you entered do not match!\")\r\n                );\r\n              },\r\n            }),\r\n          ]}\r\n        >\r\n          <Input\r\n            prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n            placeholder=\"Confirm Password\"\r\n            onChange={this.onChange}\r\n            value={this.state.password2}\r\n            error={errors.password2}\r\n            id=\"password2\"\r\n            type=\"password\"\r\n            // className={classnames(\"\", {\r\n            // invalid: errors.password2,\r\n            // })}\r\n          />\r\n        </Form.Item>\r\n\r\n        <Form.Item>\r\n          <Button\r\n            type=\"primary\"\r\n            htmlType=\"submit\"\r\n            className=\"login-register-form-button\"\r\n          >\r\n            Register\r\n          </Button>\r\n          Or <Link to=\"/Login\">Login here</Link>\r\n        </Form.Item>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n// Props stands for properties and is being used for passing data from one component to another\r\nRegister.propTypes = {\r\n  registerUser: PropTypes.func.isRequired,\r\n  auth: PropTypes.object.isRequired,\r\n  errors: PropTypes.object.isRequired,\r\n};\r\n\r\n// Get state from Redux and map it to props\r\nconst mapStateToProps = (state) => ({\r\n  auth: state.auth, // allows us to call this.props.auth\r\n  errors: state.errors, // allows us to call this.props.errors\r\n});\r\n\r\nexport default connect(mapStateToProps, { registerUser })(withRouter(Register));\r\n"]},"metadata":{},"sourceType":"module"}