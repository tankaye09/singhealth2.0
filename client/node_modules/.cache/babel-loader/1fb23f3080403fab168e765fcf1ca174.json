{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tanka\\\\Desktop\\\\ESC\\\\Project\\\\SingHealthApp\\\\singhealth2.0\\\\client\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport \"./App.css\";\nimport jwt_decode from \"jwt-decode\";\nimport setAuthToken from \"./utils/setAuthToken\";\nimport { setCurrentUser, logoutUser } from \"./actions/authActions\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport Login from \"./components/auth/Login\";\nimport Navbar from \"./components/layout/Navbar\";\nimport Register from \"./components/auth/Register\";\nimport PrivateRoute from \"./components/private-route/PrivateRoute\";\nimport Dashboard from \"./components/dashboard/Dashboard\";\nimport AuditList from \"./components/Audit-list\";\nimport ChecklistNonFB from \"./components/ChecklistNonFB\";\nimport Directory from \"./components/Directory\";\nimport testChecklist from \"./components/Checklist\"; // Check fo token to keep user logged in\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nif (localStorage.jwtToken) {\n  // Set auth token header auth\n  const token = localStorage.jwtToken;\n  setAuthToken(token); // Decode token and get user info and exp\n\n  const decoded = jwt_decode(token); // Set user and isAuthenticated\n\n  store.dispatch(setCurrentUser(decoded)); // Check for expired token\n\n  const currentTime = Date.now() / 1000; // to get in milliseconds\n\n  if (decoded.exp < currentTime) {\n    // Logout user\n    store.dispatch(logoutUser()); // Redirect to login\n\n    window.location.href = \"./login\";\n  }\n}\n\nclass App extends Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(Provider, {\n      store: store,\n      children: /*#__PURE__*/_jsxDEV(Router, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"App\",\n          children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"/\",\n            component: Login\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"/register\",\n            component: Register\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"/login\",\n            component: Login\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Switch, {\n            children: [/*#__PURE__*/_jsxDEV(PrivateRoute, {\n              exact: true,\n              path: \"/dashboard\",\n              component: Dashboard\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(PrivateRoute, {\n              exact: true,\n              path: \"/auditlist\",\n              component: AuditList\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(PrivateRoute, {\n              exact: true,\n              path: \"/checklist\",\n              component: ChecklistNonFB\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(PrivateRoute, {\n              exact: true,\n              path: \"/directory\",\n              component: Directory\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(PrivateRoute, {\n              exact: true,\n              path: \"/test\",\n              component: testChecklist\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/tanka/Desktop/ESC/Project/SingHealthApp/singhealth2.0/client/src/App.js"],"names":["React","Component","BrowserRouter","Router","Route","Switch","jwt_decode","setAuthToken","setCurrentUser","logoutUser","Provider","store","Login","Navbar","Register","PrivateRoute","Dashboard","AuditList","ChecklistNonFB","Directory","testChecklist","localStorage","jwtToken","token","decoded","dispatch","currentTime","Date","now","exp","window","location","href","App","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport \"./App.css\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport setAuthToken from \"./utils/setAuthToken\";\r\nimport { setCurrentUser, logoutUser } from \"./actions/authActions\";\r\n\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store\";\r\n\r\nimport Login from \"./components/auth/Login\";\r\nimport Navbar from \"./components/layout/Navbar\";\r\nimport Register from \"./components/auth/Register\";\r\nimport PrivateRoute from \"./components/private-route/PrivateRoute\";\r\nimport Dashboard from \"./components/dashboard/Dashboard\";\r\nimport AuditList from \"./components/Audit-list\";\r\nimport ChecklistNonFB from \"./components/ChecklistNonFB\";\r\nimport Directory from \"./components/Directory\";\r\nimport testChecklist from \"./components/Checklist\";\r\n\r\n// Check fo token to keep user logged in\r\nif (localStorage.jwtToken) {\r\n  // Set auth token header auth\r\n  const token = localStorage.jwtToken;\r\n  setAuthToken(token);\r\n  // Decode token and get user info and exp\r\n  const decoded = jwt_decode(token);\r\n  // Set user and isAuthenticated\r\n  store.dispatch(setCurrentUser(decoded));\r\n\r\n  // Check for expired token\r\n  const currentTime = Date.now() / 1000; // to get in milliseconds\r\n  if (decoded.exp < currentTime) {\r\n    // Logout user\r\n    store.dispatch(logoutUser());\r\n\r\n    // Redirect to login\r\n    window.location.href = \"./login\";\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Provider store={store}>\r\n        <Router>\r\n          <div className=\"App\">\r\n            <Navbar />\r\n            <Route exact path=\"/\" component={Login} />\r\n            <Route exact path=\"/register\" component={Register} />\r\n            <Route exact path=\"/login\" component={Login} />\r\n            <Switch>\r\n              <PrivateRoute exact path=\"/dashboard\" component={Dashboard} />\r\n              <PrivateRoute exact path=\"/auditlist\" component={AuditList} />\r\n              <PrivateRoute\r\n                exact\r\n                path=\"/checklist\"\r\n                component={ChecklistNonFB}\r\n              />\r\n              <PrivateRoute exact path=\"/directory\" component={Directory} />\r\n              <PrivateRoute exact path=\"/test\" component={testChecklist} />\r\n            </Switch>\r\n          </div>\r\n        </Router>\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}