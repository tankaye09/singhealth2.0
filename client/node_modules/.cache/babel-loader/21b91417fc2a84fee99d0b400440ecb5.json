{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tanka\\\\Desktop\\\\ESC\\\\Project\\\\SingHealthApp\\\\singhealth2.0\\\\client\\\\src\\\\components\\\\auth\\\\Login.js\";\nimport React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { loginUser } from \"../../actions/authActions\";\nimport classnames from \"classnames\";\nimport { Form, Input, Button, Checkbox, Radio } from \"antd\";\nimport { UserOutlined, LockOutlined } from \"@ant-design/icons\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Login extends Component {\n  constructor() {\n    super();\n\n    this.onChange = e => {\n      let {\n        enableCheckBox\n      } = this.state;\n      let data;\n\n      if (enableCheckBox) {\n        data = {};\n      }\n\n      this.setState(data);\n    };\n\n    this.handlefoodCheckCount = e => {\n      const {\n        checked,\n        type\n      } = e.target;\n\n      if (type === \"checkbox\" && checked === true) {\n        this.setState(state => state.food_count++);\n      } else {\n        this.setState(state => state.food_count--);\n      }\n    };\n\n    this.onFinish = values => {\n      console.log(values);\n      const userData = {\n        email: values.email,\n        password: values.password,\n        usertype: values.usertype\n      };\n      this.props.loginUser(userData); // since we handle the redirect within our component, we don't need to pass in this.props.history as a parameter\n    };\n\n    this.state = {\n      email: \"\",\n      password: \"\",\n      usertype: \"\",\n      errors: {}\n    };\n  }\n\n  componentDidMount() {\n    // If logged in and user navigates to Login page, should redirect them to dashboard\n    if (this.props.auth.isAuthenticated) {\n      this.props.history.push(\"/auditlist\");\n    }\n  } // might be deprecated\n\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.auth.isAuthenticated) {\n      this.props.history.push(\"/auditlist\"); // push user to dashboard when they login\n    }\n\n    if (nextProps.errors) {\n      this.setState({\n        errors: nextProps.errors\n      });\n    }\n  }\n\n  render() {\n    const {\n      errors\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Form, {\n      onFinish: this.onFinish,\n      name: \"normal_login\",\n      className: \"login-register-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Welcome to SingHealth Audit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Enter your username and password to log in \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        name: \"email\",\n        rules: [{\n          required: true,\n          message: \"Please input your Email!\"\n        }],\n        children: /*#__PURE__*/_jsxDEV(Input, {\n          prefix: /*#__PURE__*/_jsxDEV(UserOutlined, {\n            className: \"site-form-item-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 21\n          }, this),\n          placeholder: \"Email\",\n          onChange: this.onChange,\n          value: this.state.email,\n          error: errors.email,\n          id: \"email\",\n          type: \"email\",\n          className: classnames(\"\", {\n            invalid: errors.email || errors.emailnotfound\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        name: \"password\",\n        rules: [{\n          required: true,\n          message: \"Please input your Password!\"\n        }],\n        children: /*#__PURE__*/_jsxDEV(Input, {\n          prefix: /*#__PURE__*/_jsxDEV(LockOutlined, {\n            className: \"site-form-item-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 21\n          }, this),\n          placeholder: \"Password\",\n          onChange: this.onChange,\n          value: this.state.password,\n          error: errors.password,\n          id: \"password\",\n          type: \"password\",\n          className: classnames(\"\", {\n            invalid: errors.password || errors.passwordincorrect\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        name: \"usertype\",\n        children: /*#__PURE__*/_jsxDEV(Checkbox, {\n          onChange: this.onCheckboxChange,\n          value: this.state.usertype,\n          error: errors.usertype,\n          id: \"usertype\",\n          children: \"Singhealth Staff Member?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          id: \"login-button\",\n          type: \"primary\",\n          htmlType: \"submit\",\n          className: \"login-register-form-button\",\n          children: \"Log in\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this), \"Or if you are a new staff member,\", \" \", /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/Register\",\n          children: \"register here!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nLogin.propTypes = {\n  loginUser: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired,\n  errors: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  errors: state.errors\n});\n\nexport default connect(mapStateToProps, {\n  loginUser\n})(Login);","map":{"version":3,"sources":["C:/Users/tanka/Desktop/ESC/Project/SingHealthApp/singhealth2.0/client/src/components/auth/Login.js"],"names":["React","Component","Link","PropTypes","connect","loginUser","classnames","Form","Input","Button","Checkbox","Radio","UserOutlined","LockOutlined","Login","constructor","onChange","e","enableCheckBox","state","data","setState","handlefoodCheckCount","checked","type","target","food_count","onFinish","values","console","log","userData","email","password","usertype","props","errors","componentDidMount","auth","isAuthenticated","history","push","componentWillReceiveProps","nextProps","render","required","message","invalid","emailnotfound","passwordincorrect","onCheckboxChange","propTypes","func","isRequired","object","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { loginUser } from \"../../actions/authActions\";\r\nimport classnames from \"classnames\";\r\n\r\nimport { Form, Input, Button, Checkbox, Radio } from \"antd\";\r\nimport { UserOutlined, LockOutlined } from \"@ant-design/icons\";\r\n\r\nclass Login extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      email: \"\",\r\n      password: \"\",\r\n      usertype: \"\",\r\n      errors: {},\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // If logged in and user navigates to Login page, should redirect them to dashboard\r\n    if (this.props.auth.isAuthenticated) {\r\n      this.props.history.push(\"/auditlist\");\r\n    }\r\n  }\r\n  // might be deprecated\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.auth.isAuthenticated) {\r\n      this.props.history.push(\"/auditlist\"); // push user to dashboard when they login\r\n    }\r\n    if (nextProps.errors) {\r\n      this.setState({\r\n        errors: nextProps.errors,\r\n      });\r\n    }\r\n  }\r\n\r\n  onChange = (e) => {\r\n    let { enableCheckBox } = this.state;\r\n    let data;\r\n\r\n    if (enableCheckBox) {\r\n      data = {};\r\n    }\r\n    this.setState(data);\r\n  };\r\n\r\n  handlefoodCheckCount = (e) => {\r\n    const { checked, type } = e.target;\r\n    if (type === \"checkbox\" && checked === true) {\r\n      this.setState((state) => state.food_count++);\r\n    } else {\r\n      this.setState((state) => state.food_count--);\r\n    }\r\n  };\r\n  onFinish = (values) => {\r\n    console.log(values);\r\n    const userData = {\r\n      email: values.email,\r\n      password: values.password,\r\n      usertype: values.usertype,\r\n    };\r\n    this.props.loginUser(userData); // since we handle the redirect within our component, we don't need to pass in this.props.history as a parameter\r\n  };\r\n  render() {\r\n    const { errors } = this.state;\r\n    return (\r\n      <Form\r\n        onFinish={this.onFinish}\r\n        name=\"normal_login\"\r\n        className=\"login-register-form\"\r\n      >\r\n        <h1>Welcome to SingHealth Audit</h1>\r\n        <h2>Enter your username and password to log in </h2>\r\n        <Form.Item\r\n          name=\"email\"\r\n          rules={[{ required: true, message: \"Please input your Email!\" }]}\r\n        >\r\n          <Input\r\n            prefix={<UserOutlined className=\"site-form-item-icon\" />}\r\n            placeholder=\"Email\"\r\n            onChange={this.onChange}\r\n            value={this.state.email}\r\n            error={errors.email}\r\n            id=\"email\"\r\n            type=\"email\"\r\n            className={classnames(\"\", {\r\n              invalid: errors.email || errors.emailnotfound,\r\n            })}\r\n          />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          name=\"password\"\r\n          rules={[{ required: true, message: \"Please input your Password!\" }]}\r\n        >\r\n          <Input\r\n            prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n            placeholder=\"Password\"\r\n            onChange={this.onChange}\r\n            value={this.state.password}\r\n            error={errors.password}\r\n            id=\"password\"\r\n            type=\"password\"\r\n            className={classnames(\"\", {\r\n              invalid: errors.password || errors.passwordincorrect,\r\n            })}\r\n          />\r\n        </Form.Item>\r\n\r\n        <Form.Item name=\"usertype\">\r\n          <Checkbox\r\n            onChange={this.onCheckboxChange}\r\n            value={this.state.usertype}\r\n            error={errors.usertype}\r\n            id=\"usertype\"\r\n          >\r\n            Singhealth Staff Member?\r\n          </Checkbox>\r\n        </Form.Item>\r\n\r\n        <Form.Item>\r\n          <Button\r\n            id=\"login-button\"\r\n            type=\"primary\"\r\n            htmlType=\"submit\"\r\n            className=\"login-register-form-button\"\r\n          >\r\n            Log in\r\n          </Button>\r\n          Or if you are a new staff member,{\" \"}\r\n          <Link to=\"/Register\">register here!</Link>\r\n        </Form.Item>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\nLogin.propTypes = {\r\n  loginUser: PropTypes.func.isRequired,\r\n  auth: PropTypes.object.isRequired,\r\n  errors: PropTypes.object.isRequired,\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  auth: state.auth,\r\n  errors: state.errors,\r\n});\r\nexport default connect(mapStateToProps, { loginUser })(Login);\r\n"]},"metadata":{},"sourceType":"module"}