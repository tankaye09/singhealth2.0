{"ast":null,"code":"import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./types\"; // Register User\n\n/* Get Staff Key */\n\nexport const getStaffKey = onDataReceived => {\n  axios.get(\"/api/staffkey\").then(response => {\n    // console.log(\"response is:\", response.data[0].staffkey);\n    onDataReceived(response.data[0].staffkey);\n  }).catch(err => {\n    console.log(err);\n  });\n};\nexport const registerUser = (userData, history) => dispatch => {\n  axios.post(\"/api/users/register\", userData).then(res => history.push(\"/login\")) // re-direct to login on successful register\n  .catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Login - get user token\n\nexport const loginUser = userData => dispatch => {\n  console.log(\"loginUser\"); // TODO IMMEDIATE: why login must click twice?\n\n  axios.post(\"/api/users/login\", userData).then(res => {\n    // Save to localStorage\n    // Set token to localStorage\n    const {\n      token\n    } = res.data;\n    localStorage.setItem(\"jwtToken\", token); // Set token to Auth header\n\n    setAuthToken(token); // Decode token to get user data\n\n    const decoded = jwt_decode(token); // console.log(\"decoded is: \", decoded);\n    // Set current user\n\n    dispatch(setCurrentUser(decoded));\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Set logged in user\n\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; // User loading\n\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n}; // Log user out\n\nexport const logoutUser = () => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\"); // Remove auth header for future requests\n\n  setAuthToken(false); // Set current user to empty object {} which will set isAuthenticaed to false\n\n  dispatch(setCurrentUser({}));\n};\n/* Tenant */\n// Register Tenant\n\nexport const registerTenant = (userData, history) => dispatch => {\n  axios.post(\"/api/users/createtenant\", userData).then(res => {\n    history.push(\"/createtenant\");\n  }) // TODO: set up ViewTenants{AuditorName} or sth\n  .catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Get Tenants\n\nexport const getTenants = onDataReceived => dispatch => {\n  axios.get(\"/api/tenants\").then(response => {\n    // console.log(\"response is:\", response.data[0].staffkey);\n    onDataReceived(response.data);\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n};","map":{"version":3,"sources":["C:/Users/tanka/Desktop/ESC/Project/SingHealthApp/singhealth2.0/client/src/actions/authActions.js"],"names":["axios","setAuthToken","jwt_decode","GET_ERRORS","SET_CURRENT_USER","USER_LOADING","getStaffKey","onDataReceived","get","then","response","data","staffkey","catch","err","console","log","registerUser","userData","history","dispatch","post","res","push","type","payload","loginUser","token","localStorage","setItem","decoded","setCurrentUser","setUserLoading","logoutUser","removeItem","registerTenant","getTenants"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport jwt_decode from \"jwt-decode\";\r\n\r\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./types\";\r\n\r\n// Register User\r\n\r\n/* Get Staff Key */\r\nexport const getStaffKey = (onDataReceived) => {\r\n  axios\r\n    .get(\"/api/staffkey\")\r\n    .then((response) => {\r\n      // console.log(\"response is:\", response.data[0].staffkey);\r\n      onDataReceived(response.data[0].staffkey);\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n    });\r\n};\r\n\r\nexport const registerUser = (userData, history) => (dispatch) => {\r\n  axios\r\n    .post(\"/api/users/register\", userData)\r\n    .then((res) => history.push(\"/login\")) // re-direct to login on successful register\r\n    .catch((err) =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data,\r\n      })\r\n    );\r\n};\r\n\r\n// Login - get user token\r\nexport const loginUser = (userData) => (dispatch) => {\r\n  console.log(\"loginUser\"); // TODO IMMEDIATE: why login must click twice?\r\n  axios\r\n    .post(\"/api/users/login\", userData)\r\n    .then((res) => {\r\n      // Save to localStorage\r\n\r\n      // Set token to localStorage\r\n      const { token } = res.data;\r\n      localStorage.setItem(\"jwtToken\", token);\r\n      // Set token to Auth header\r\n      setAuthToken(token);\r\n      // Decode token to get user data\r\n      const decoded = jwt_decode(token);\r\n      // console.log(\"decoded is: \", decoded);\r\n      // Set current user\r\n      dispatch(setCurrentUser(decoded));\r\n    })\r\n    .catch((err) =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data,\r\n      })\r\n    );\r\n};\r\n\r\n// Set logged in user\r\nexport const setCurrentUser = (decoded) => {\r\n  return {\r\n    type: SET_CURRENT_USER,\r\n    payload: decoded,\r\n  };\r\n};\r\n\r\n// User loading\r\nexport const setUserLoading = () => {\r\n  return {\r\n    type: USER_LOADING,\r\n  };\r\n};\r\n\r\n// Log user out\r\nexport const logoutUser = () => (dispatch) => {\r\n  // Remove token from local storage\r\n  localStorage.removeItem(\"jwtToken\");\r\n  // Remove auth header for future requests\r\n  setAuthToken(false);\r\n  // Set current user to empty object {} which will set isAuthenticaed to false\r\n  dispatch(setCurrentUser({}));\r\n};\r\n\r\n/* Tenant */\r\n// Register Tenant\r\nexport const registerTenant = (userData, history) => (dispatch) => {\r\n  axios\r\n    .post(\"/api/users/createtenant\", userData)\r\n    .then((res) => {\r\n      history.push(\"/createtenant\");\r\n    }) // TODO: set up ViewTenants{AuditorName} or sth\r\n    .catch((err) =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data,\r\n      })\r\n    );\r\n};\r\n\r\n// Get Tenants\r\nexport const getTenants = (onDataReceived) => (dispatch) => {\r\n  axios\r\n    .get(\"/api/tenants\")\r\n    .then((response) => {\r\n      // console.log(\"response is:\", response.data[0].staffkey);\r\n      onDataReceived(response.data);\r\n    })\r\n    .catch((err) =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data,\r\n      })\r\n    );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}