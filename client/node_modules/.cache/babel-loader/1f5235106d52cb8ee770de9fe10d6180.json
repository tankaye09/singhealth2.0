{"ast":null,"code":"'use strict';\n\nconst services = require('./services.json');\n\nconst normalized = {};\nObject.keys(services).forEach(key => {\n  let service = services[key];\n  normalized[normalizeKey(key)] = normalizeService(service);\n  [].concat(service.aliases || []).forEach(alias => {\n    normalized[normalizeKey(alias)] = normalizeService(service);\n  });\n  [].concat(service.domains || []).forEach(domain => {\n    normalized[normalizeKey(domain)] = normalizeService(service);\n  });\n});\n\nfunction normalizeKey(key) {\n  return key.replace(/[^a-zA-Z0-9.-]/g, '').toLowerCase();\n}\n\nfunction normalizeService(service) {\n  let filter = ['domains', 'aliases'];\n  let response = {};\n  Object.keys(service).forEach(key => {\n    if (filter.indexOf(key) < 0) {\n      response[key] = service[key];\n    }\n  });\n  return response;\n}\n/**\n * Resolves SMTP config for given key. Key can be a name (like 'Gmail'), alias (like 'Google Mail') or\n * an email address (like 'test@googlemail.com').\n *\n * @param {String} key [description]\n * @returns {Object} SMTP config or false if not found\n */\n\n\nmodule.exports = function (key) {\n  key = normalizeKey(key.split('@').pop());\n  return normalized[key] || false;\n};","map":{"version":3,"sources":["C:/Users/tanka/Desktop/ESC/Project/SingHealthApp/singhealth2.0/node_modules/nodemailer/lib/well-known/index.js"],"names":["services","require","normalized","Object","keys","forEach","key","service","normalizeKey","normalizeService","concat","aliases","alias","domains","domain","replace","toLowerCase","filter","response","indexOf","module","exports","split","pop"],"mappings":"AAAA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,iBAAD,CAAxB;;AACA,MAAMC,UAAU,GAAG,EAAnB;AAEAC,MAAM,CAACC,IAAP,CAAYJ,QAAZ,EAAsBK,OAAtB,CAA8BC,GAAG,IAAI;AACjC,MAAIC,OAAO,GAAGP,QAAQ,CAACM,GAAD,CAAtB;AAEAJ,EAAAA,UAAU,CAACM,YAAY,CAACF,GAAD,CAAb,CAAV,GAAgCG,gBAAgB,CAACF,OAAD,CAAhD;AAEA,KAAGG,MAAH,CAAUH,OAAO,CAACI,OAAR,IAAmB,EAA7B,EAAiCN,OAAjC,CAAyCO,KAAK,IAAI;AAC9CV,IAAAA,UAAU,CAACM,YAAY,CAACI,KAAD,CAAb,CAAV,GAAkCH,gBAAgB,CAACF,OAAD,CAAlD;AACH,GAFD;AAIA,KAAGG,MAAH,CAAUH,OAAO,CAACM,OAAR,IAAmB,EAA7B,EAAiCR,OAAjC,CAAyCS,MAAM,IAAI;AAC/CZ,IAAAA,UAAU,CAACM,YAAY,CAACM,MAAD,CAAb,CAAV,GAAmCL,gBAAgB,CAACF,OAAD,CAAnD;AACH,GAFD;AAGH,CAZD;;AAcA,SAASC,YAAT,CAAsBF,GAAtB,EAA2B;AACvB,SAAOA,GAAG,CAACS,OAAJ,CAAY,iBAAZ,EAA+B,EAA/B,EAAmCC,WAAnC,EAAP;AACH;;AAED,SAASP,gBAAT,CAA0BF,OAA1B,EAAmC;AAC/B,MAAIU,MAAM,GAAG,CAAC,SAAD,EAAY,SAAZ,CAAb;AACA,MAAIC,QAAQ,GAAG,EAAf;AAEAf,EAAAA,MAAM,CAACC,IAAP,CAAYG,OAAZ,EAAqBF,OAArB,CAA6BC,GAAG,IAAI;AAChC,QAAIW,MAAM,CAACE,OAAP,CAAeb,GAAf,IAAsB,CAA1B,EAA6B;AACzBY,MAAAA,QAAQ,CAACZ,GAAD,CAAR,GAAgBC,OAAO,CAACD,GAAD,CAAvB;AACH;AACJ,GAJD;AAMA,SAAOY,QAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAE,MAAM,CAACC,OAAP,GAAiB,UAAUf,GAAV,EAAe;AAC5BA,EAAAA,GAAG,GAAGE,YAAY,CAACF,GAAG,CAACgB,KAAJ,CAAU,GAAV,EAAeC,GAAf,EAAD,CAAlB;AACA,SAAOrB,UAAU,CAACI,GAAD,CAAV,IAAmB,KAA1B;AACH,CAHD","sourcesContent":["'use strict';\n\nconst services = require('./services.json');\nconst normalized = {};\n\nObject.keys(services).forEach(key => {\n    let service = services[key];\n\n    normalized[normalizeKey(key)] = normalizeService(service);\n\n    [].concat(service.aliases || []).forEach(alias => {\n        normalized[normalizeKey(alias)] = normalizeService(service);\n    });\n\n    [].concat(service.domains || []).forEach(domain => {\n        normalized[normalizeKey(domain)] = normalizeService(service);\n    });\n});\n\nfunction normalizeKey(key) {\n    return key.replace(/[^a-zA-Z0-9.-]/g, '').toLowerCase();\n}\n\nfunction normalizeService(service) {\n    let filter = ['domains', 'aliases'];\n    let response = {};\n\n    Object.keys(service).forEach(key => {\n        if (filter.indexOf(key) < 0) {\n            response[key] = service[key];\n        }\n    });\n\n    return response;\n}\n\n/**\n * Resolves SMTP config for given key. Key can be a name (like 'Gmail'), alias (like 'Google Mail') or\n * an email address (like 'test@googlemail.com').\n *\n * @param {String} key [description]\n * @returns {Object} SMTP config or false if not found\n */\nmodule.exports = function (key) {\n    key = normalizeKey(key.split('@').pop());\n    return normalized[key] || false;\n};\n"]},"metadata":{},"sourceType":"script"}