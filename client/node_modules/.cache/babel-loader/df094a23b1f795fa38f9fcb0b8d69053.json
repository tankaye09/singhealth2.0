{"ast":null,"code":"'use strict'; // FIXME:\n// replace this Transform mess with a method that pipes input argument to output argument\n\nconst MessageParser = require('./message-parser');\n\nconst RelaxedBody = require('./relaxed-body');\n\nconst sign = require('./sign');\n\nconst PassThrough = require('stream').PassThrough;\n\nconst fs = require('fs');\n\nconst path = require('path');\n\nconst crypto = require('crypto');\n\nconst DKIM_ALGO = 'sha256';\nconst MAX_MESSAGE_SIZE = 128 * 1024; // buffer messages larger than this to disk\n\n/*\n// Usage:\n\nlet dkim = new DKIM({\n    domainName: 'example.com',\n    keySelector: 'key-selector',\n    privateKey,\n    cacheDir: '/tmp'\n});\ndkim.sign(input).pipe(process.stdout);\n\n// Where inputStream is a rfc822 message (either a stream, string or Buffer)\n// and outputStream is a DKIM signed rfc822 message\n*/\n\nclass DKIMSigner {\n  constructor(options, keys, input, output) {\n    this.options = options || {};\n    this.keys = keys;\n    this.cacheTreshold = Number(this.options.cacheTreshold) || MAX_MESSAGE_SIZE;\n    this.hashAlgo = this.options.hashAlgo || DKIM_ALGO;\n    this.cacheDir = this.options.cacheDir || false;\n    this.chunks = [];\n    this.chunklen = 0;\n    this.readPos = 0;\n    this.cachePath = this.cacheDir ? path.join(this.cacheDir, 'message.' + Date.now() + '-' + crypto.randomBytes(14).toString('hex')) : false;\n    this.cache = false;\n    this.headers = false;\n    this.bodyHash = false;\n    this.parser = false;\n    this.relaxedBody = false;\n    this.input = input;\n    this.output = output;\n    this.output.usingCache = false;\n    this.errored = false;\n    this.input.on('error', err => {\n      this.errored = true;\n      this.cleanup();\n      output.emit('error', err);\n    });\n  }\n\n  cleanup() {\n    if (!this.cache || !this.cachePath) {\n      return;\n    }\n\n    fs.unlink(this.cachePath, () => false);\n  }\n\n  createReadCache() {\n    // pipe remainings to cache file\n    this.cache = fs.createReadStream(this.cachePath);\n    this.cache.once('error', err => {\n      this.cleanup();\n      this.output.emit('error', err);\n    });\n    this.cache.once('close', () => {\n      this.cleanup();\n    });\n    this.cache.pipe(this.output);\n  }\n\n  sendNextChunk() {\n    if (this.errored) {\n      return;\n    }\n\n    if (this.readPos >= this.chunks.length) {\n      if (!this.cache) {\n        return this.output.end();\n      }\n\n      return this.createReadCache();\n    }\n\n    let chunk = this.chunks[this.readPos++];\n\n    if (this.output.write(chunk) === false) {\n      return this.output.once('drain', () => {\n        this.sendNextChunk();\n      });\n    }\n\n    setImmediate(() => this.sendNextChunk());\n  }\n\n  sendSignedOutput() {\n    let keyPos = 0;\n\n    let signNextKey = () => {\n      if (keyPos >= this.keys.length) {\n        this.output.write(this.parser.rawHeaders);\n        return setImmediate(() => this.sendNextChunk());\n      }\n\n      let key = this.keys[keyPos++];\n      let dkimField = sign(this.headers, this.hashAlgo, this.bodyHash, {\n        domainName: key.domainName,\n        keySelector: key.keySelector,\n        privateKey: key.privateKey,\n        headerFieldNames: this.options.headerFieldNames,\n        skipFields: this.options.skipFields\n      });\n\n      if (dkimField) {\n        this.output.write(Buffer.from(dkimField + '\\r\\n'));\n      }\n\n      return setImmediate(signNextKey);\n    };\n\n    if (this.bodyHash && this.headers) {\n      return signNextKey();\n    }\n\n    this.output.write(this.parser.rawHeaders);\n    this.sendNextChunk();\n  }\n\n  createWriteCache() {\n    this.output.usingCache = true; // pipe remainings to cache file\n\n    this.cache = fs.createWriteStream(this.cachePath);\n    this.cache.once('error', err => {\n      this.cleanup(); // drain input\n\n      this.relaxedBody.unpipe(this.cache);\n      this.relaxedBody.on('readable', () => {\n        while (this.relaxedBody.read() !== null) {// do nothing\n        }\n      });\n      this.errored = true; // emit error\n\n      this.output.emit('error', err);\n    });\n    this.cache.once('close', () => {\n      this.sendSignedOutput();\n    });\n    this.relaxedBody.removeAllListeners('readable');\n    this.relaxedBody.pipe(this.cache);\n  }\n\n  signStream() {\n    this.parser = new MessageParser();\n    this.relaxedBody = new RelaxedBody({\n      hashAlgo: this.hashAlgo\n    });\n    this.parser.on('headers', value => {\n      this.headers = value;\n    });\n    this.relaxedBody.on('hash', value => {\n      this.bodyHash = value;\n    });\n    this.relaxedBody.on('readable', () => {\n      let chunk;\n\n      if (this.cache) {\n        return;\n      }\n\n      while ((chunk = this.relaxedBody.read()) !== null) {\n        this.chunks.push(chunk);\n        this.chunklen += chunk.length;\n\n        if (this.chunklen >= this.cacheTreshold && this.cachePath) {\n          return this.createWriteCache();\n        }\n      }\n    });\n    this.relaxedBody.on('end', () => {\n      if (this.cache) {\n        return;\n      }\n\n      this.sendSignedOutput();\n    });\n    this.parser.pipe(this.relaxedBody);\n    setImmediate(() => this.input.pipe(this.parser));\n  }\n\n}\n\nclass DKIM {\n  constructor(options) {\n    this.options = options || {};\n    this.keys = [].concat(this.options.keys || {\n      domainName: options.domainName,\n      keySelector: options.keySelector,\n      privateKey: options.privateKey\n    });\n  }\n\n  sign(input, extraOptions) {\n    let output = new PassThrough();\n    let inputStream = input;\n    let writeValue = false;\n\n    if (Buffer.isBuffer(input)) {\n      writeValue = input;\n      inputStream = new PassThrough();\n    } else if (typeof input === 'string') {\n      writeValue = Buffer.from(input);\n      inputStream = new PassThrough();\n    }\n\n    let options = this.options;\n\n    if (extraOptions && Object.keys(extraOptions).length) {\n      options = {};\n      Object.keys(this.options || {}).forEach(key => {\n        options[key] = this.options[key];\n      });\n      Object.keys(extraOptions || {}).forEach(key => {\n        if (!(key in options)) {\n          options[key] = extraOptions[key];\n        }\n      });\n    }\n\n    let signer = new DKIMSigner(options, this.keys, inputStream, output);\n    setImmediate(() => {\n      signer.signStream();\n\n      if (writeValue) {\n        setImmediate(() => {\n          inputStream.end(writeValue);\n        });\n      }\n    });\n    return output;\n  }\n\n}\n\nmodule.exports = DKIM;","map":{"version":3,"sources":["C:/Users/tanka/Desktop/ESC/Project/SingHealthApp/singhealth2.0/node_modules/nodemailer/lib/dkim/index.js"],"names":["MessageParser","require","RelaxedBody","sign","PassThrough","fs","path","crypto","DKIM_ALGO","MAX_MESSAGE_SIZE","DKIMSigner","constructor","options","keys","input","output","cacheTreshold","Number","hashAlgo","cacheDir","chunks","chunklen","readPos","cachePath","join","Date","now","randomBytes","toString","cache","headers","bodyHash","parser","relaxedBody","usingCache","errored","on","err","cleanup","emit","unlink","createReadCache","createReadStream","once","pipe","sendNextChunk","length","end","chunk","write","setImmediate","sendSignedOutput","keyPos","signNextKey","rawHeaders","key","dkimField","domainName","keySelector","privateKey","headerFieldNames","skipFields","Buffer","from","createWriteCache","createWriteStream","unpipe","read","removeAllListeners","signStream","value","push","DKIM","concat","extraOptions","inputStream","writeValue","isBuffer","Object","forEach","signer","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n// FIXME:\n// replace this Transform mess with a method that pipes input argument to output argument\n\nconst MessageParser = require('./message-parser');\nconst RelaxedBody = require('./relaxed-body');\nconst sign = require('./sign');\nconst PassThrough = require('stream').PassThrough;\nconst fs = require('fs');\nconst path = require('path');\nconst crypto = require('crypto');\n\nconst DKIM_ALGO = 'sha256';\nconst MAX_MESSAGE_SIZE = 128 * 1024; // buffer messages larger than this to disk\n\n/*\n// Usage:\n\nlet dkim = new DKIM({\n    domainName: 'example.com',\n    keySelector: 'key-selector',\n    privateKey,\n    cacheDir: '/tmp'\n});\ndkim.sign(input).pipe(process.stdout);\n\n// Where inputStream is a rfc822 message (either a stream, string or Buffer)\n// and outputStream is a DKIM signed rfc822 message\n*/\n\nclass DKIMSigner {\n    constructor(options, keys, input, output) {\n        this.options = options || {};\n        this.keys = keys;\n\n        this.cacheTreshold = Number(this.options.cacheTreshold) || MAX_MESSAGE_SIZE;\n        this.hashAlgo = this.options.hashAlgo || DKIM_ALGO;\n\n        this.cacheDir = this.options.cacheDir || false;\n\n        this.chunks = [];\n        this.chunklen = 0;\n        this.readPos = 0;\n        this.cachePath = this.cacheDir ? path.join(this.cacheDir, 'message.' + Date.now() + '-' + crypto.randomBytes(14).toString('hex')) : false;\n        this.cache = false;\n\n        this.headers = false;\n        this.bodyHash = false;\n        this.parser = false;\n        this.relaxedBody = false;\n\n        this.input = input;\n        this.output = output;\n        this.output.usingCache = false;\n\n        this.errored = false;\n\n        this.input.on('error', err => {\n            this.errored = true;\n            this.cleanup();\n            output.emit('error', err);\n        });\n    }\n\n    cleanup() {\n        if (!this.cache || !this.cachePath) {\n            return;\n        }\n        fs.unlink(this.cachePath, () => false);\n    }\n\n    createReadCache() {\n        // pipe remainings to cache file\n        this.cache = fs.createReadStream(this.cachePath);\n        this.cache.once('error', err => {\n            this.cleanup();\n            this.output.emit('error', err);\n        });\n        this.cache.once('close', () => {\n            this.cleanup();\n        });\n        this.cache.pipe(this.output);\n    }\n\n    sendNextChunk() {\n        if (this.errored) {\n            return;\n        }\n\n        if (this.readPos >= this.chunks.length) {\n            if (!this.cache) {\n                return this.output.end();\n            }\n            return this.createReadCache();\n        }\n        let chunk = this.chunks[this.readPos++];\n        if (this.output.write(chunk) === false) {\n            return this.output.once('drain', () => {\n                this.sendNextChunk();\n            });\n        }\n        setImmediate(() => this.sendNextChunk());\n    }\n\n    sendSignedOutput() {\n        let keyPos = 0;\n        let signNextKey = () => {\n            if (keyPos >= this.keys.length) {\n                this.output.write(this.parser.rawHeaders);\n                return setImmediate(() => this.sendNextChunk());\n            }\n            let key = this.keys[keyPos++];\n            let dkimField = sign(this.headers, this.hashAlgo, this.bodyHash, {\n                domainName: key.domainName,\n                keySelector: key.keySelector,\n                privateKey: key.privateKey,\n                headerFieldNames: this.options.headerFieldNames,\n                skipFields: this.options.skipFields\n            });\n            if (dkimField) {\n                this.output.write(Buffer.from(dkimField + '\\r\\n'));\n            }\n            return setImmediate(signNextKey);\n        };\n\n        if (this.bodyHash && this.headers) {\n            return signNextKey();\n        }\n\n        this.output.write(this.parser.rawHeaders);\n        this.sendNextChunk();\n    }\n\n    createWriteCache() {\n        this.output.usingCache = true;\n        // pipe remainings to cache file\n        this.cache = fs.createWriteStream(this.cachePath);\n        this.cache.once('error', err => {\n            this.cleanup();\n            // drain input\n            this.relaxedBody.unpipe(this.cache);\n            this.relaxedBody.on('readable', () => {\n                while (this.relaxedBody.read() !== null) {\n                    // do nothing\n                }\n            });\n            this.errored = true;\n            // emit error\n            this.output.emit('error', err);\n        });\n        this.cache.once('close', () => {\n            this.sendSignedOutput();\n        });\n        this.relaxedBody.removeAllListeners('readable');\n        this.relaxedBody.pipe(this.cache);\n    }\n\n    signStream() {\n        this.parser = new MessageParser();\n        this.relaxedBody = new RelaxedBody({\n            hashAlgo: this.hashAlgo\n        });\n\n        this.parser.on('headers', value => {\n            this.headers = value;\n        });\n\n        this.relaxedBody.on('hash', value => {\n            this.bodyHash = value;\n        });\n\n        this.relaxedBody.on('readable', () => {\n            let chunk;\n            if (this.cache) {\n                return;\n            }\n            while ((chunk = this.relaxedBody.read()) !== null) {\n                this.chunks.push(chunk);\n                this.chunklen += chunk.length;\n                if (this.chunklen >= this.cacheTreshold && this.cachePath) {\n                    return this.createWriteCache();\n                }\n            }\n        });\n\n        this.relaxedBody.on('end', () => {\n            if (this.cache) {\n                return;\n            }\n            this.sendSignedOutput();\n        });\n\n        this.parser.pipe(this.relaxedBody);\n        setImmediate(() => this.input.pipe(this.parser));\n    }\n}\n\nclass DKIM {\n    constructor(options) {\n        this.options = options || {};\n        this.keys = [].concat(\n            this.options.keys || {\n                domainName: options.domainName,\n                keySelector: options.keySelector,\n                privateKey: options.privateKey\n            }\n        );\n    }\n\n    sign(input, extraOptions) {\n        let output = new PassThrough();\n        let inputStream = input;\n        let writeValue = false;\n\n        if (Buffer.isBuffer(input)) {\n            writeValue = input;\n            inputStream = new PassThrough();\n        } else if (typeof input === 'string') {\n            writeValue = Buffer.from(input);\n            inputStream = new PassThrough();\n        }\n\n        let options = this.options;\n        if (extraOptions && Object.keys(extraOptions).length) {\n            options = {};\n            Object.keys(this.options || {}).forEach(key => {\n                options[key] = this.options[key];\n            });\n            Object.keys(extraOptions || {}).forEach(key => {\n                if (!(key in options)) {\n                    options[key] = extraOptions[key];\n                }\n            });\n        }\n\n        let signer = new DKIMSigner(options, this.keys, inputStream, output);\n        setImmediate(() => {\n            signer.signStream();\n            if (writeValue) {\n                setImmediate(() => {\n                    inputStream.end(writeValue);\n                });\n            }\n        });\n\n        return output;\n    }\n}\n\nmodule.exports = DKIM;\n"]},"metadata":{},"sourceType":"script"}