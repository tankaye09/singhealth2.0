{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tanka\\\\Desktop\\\\ESC\\\\Project\\\\SingHealthApp\\\\singhealth2.0\\\\client\\\\src\\\\components\\\\auth\\\\PreRegister.js\";\nimport React, { Component } from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { registerUser } from \"../../actions/authActions\";\nimport classnames from \"classnames\";\nimport staffkey from \"../../data/staffkey.json\";\nimport { Form, Input, Button, Checkbox } from \"antd\";\nimport { MailOutlined, UserOutlined, LockOutlined, SketchOutlined } from \"@ant-design/icons\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Register extends Component {\n  constructor() {\n    super();\n\n    this.onChange = e => {\n      this.setState({\n        [e.target.id]: e.target.value\n      });\n    };\n\n    this.onFinish = values => {\n      console.log(this.state.staffkey);\n      console.log(staffkey[\"staff key\"]);\n\n      if (this.state.staffkey === staffkey[\"staff key\"]) {\n        const newUser = {\n          staffkey: values.staffkey\n        };\n        console.log(newUser);\n        this.props.history.push(\"/register\");\n      } else {\n        alert(\"Staffkey incorrect\");\n      }\n    };\n\n    this.state = {\n      staffkey: \"\",\n      errors: {}\n    };\n  }\n\n  componentDidMount() {\n    // If loggied in and user navigates to Register page, should redirect them to dashboad\n    if (this.props.auth.isAuthenticaed) {\n      this.props.history.push(\"/dashboard\"); // Push new entry into history stack, ie redirecting the user to another route\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.errors) {\n      this.setState({\n        errors: nextProps.errors\n      });\n    }\n  }\n\n  render() {\n    const {\n      errors\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Form, {\n      name: \"normal_login\",\n      className: \"login-register-form\",\n      onFinish: this.onFinish,\n      children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n        name: \"staffkey\",\n        rules: [{\n          required: true,\n          message: \"Please input your staff key!\"\n        }],\n        children: /*#__PURE__*/_jsxDEV(Input, {\n          prefix: /*#__PURE__*/_jsxDEV(SketchOutlined, {\n            className: \"site-form-item-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 21\n          }, this),\n          placeholder: \"Staff Key\",\n          onChange: this.onChange,\n          onCh: true,\n          value: this.state.staffkey,\n          error: errors.staffkey,\n          id: \"staffkey\",\n          type: \"staffkey\",\n          className: classnames(\"\", {\n            invalid: errors.key || errors.keyincorrect\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          type: \"primary\",\n          htmlType: \"submit\",\n          className: \"login-register-form-button\",\n          children: \"Register\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), \"Or \", /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/Login\",\n          children: \"Login here\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 14\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this);\n  }\n\n} // Props stands for properties and is being used for passing data from one component to another\n\n\nRegister.propTypes = {\n  registerUser: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired,\n  errors: PropTypes.object.isRequired\n}; // Get state from Redux and map it to props\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  // allows us to call this.props.auth\n  errors: state.errors // allows us to call this.props.errors\n\n});\n\nexport default connect(mapStateToProps, {\n  registerUser\n})(withRouter(Register));","map":{"version":3,"sources":["C:/Users/tanka/Desktop/ESC/Project/SingHealthApp/singhealth2.0/client/src/components/auth/PreRegister.js"],"names":["React","Component","Link","withRouter","PropTypes","connect","registerUser","classnames","staffkey","Form","Input","Button","Checkbox","MailOutlined","UserOutlined","LockOutlined","SketchOutlined","Register","constructor","onChange","e","setState","target","id","value","onFinish","values","console","log","state","newUser","props","history","push","alert","errors","componentDidMount","auth","isAuthenticaed","componentWillReceiveProps","nextProps","render","required","message","invalid","key","keyincorrect","propTypes","func","isRequired","object","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { registerUser } from \"../../actions/authActions\";\r\nimport classnames from \"classnames\";\r\nimport staffkey from \"../../data/staffkey.json\";\r\nimport { Form, Input, Button, Checkbox } from \"antd\";\r\nimport {\r\n  MailOutlined,\r\n  UserOutlined,\r\n  LockOutlined,\r\n  SketchOutlined,\r\n} from \"@ant-design/icons\";\r\n\r\nclass Register extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      staffkey: \"\",\r\n      errors: {},\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // If loggied in and user navigates to Register page, should redirect them to dashboad\r\n    if (this.props.auth.isAuthenticaed) {\r\n      this.props.history.push(\"/dashboard\"); // Push new entry into history stack, ie redirecting the user to another route\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.errors) {\r\n      this.setState({\r\n        errors: nextProps.errors,\r\n      });\r\n    }\r\n  }\r\n\r\n  onChange = (e) => {\r\n    this.setState({ [e.target.id]: e.target.value });\r\n  };\r\n  //TODO: key must match before submitting\r\n  onFinish = (values) => {\r\n    console.log(this.state.staffkey);\r\n    console.log(staffkey[\"staff key\"]);\r\n    if (this.state.staffkey === staffkey[\"staff key\"]) {\r\n      const newUser = {\r\n        staffkey: values.staffkey,\r\n      };\r\n      console.log(newUser);\r\n      this.props.history.push(\"/register\");\r\n    } else {\r\n      alert(\"Staffkey incorrect\");\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { errors } = this.state;\r\n    return (\r\n      <Form\r\n        name=\"normal_login\"\r\n        className=\"login-register-form\"\r\n        onFinish={this.onFinish}\r\n      >\r\n        <Form.Item\r\n          name=\"staffkey\"\r\n          rules={[{ required: true, message: \"Please input your staff key!\" }]}\r\n        >\r\n          <Input\r\n            prefix={<SketchOutlined className=\"site-form-item-icon\" />}\r\n            placeholder=\"Staff Key\"\r\n            onChange={this.onChange}\r\n            onCh\r\n            value={this.state.staffkey}\r\n            error={errors.staffkey}\r\n            id=\"staffkey\"\r\n            type=\"staffkey\"\r\n            className={classnames(\"\", {\r\n              invalid: errors.key || errors.keyincorrect,\r\n            })}\r\n          />\r\n        </Form.Item>\r\n\r\n        <Form.Item>\r\n          <Button\r\n            type=\"primary\"\r\n            htmlType=\"submit\"\r\n            className=\"login-register-form-button\"\r\n          >\r\n            Register\r\n          </Button>\r\n          Or <Link to=\"/Login\">Login here</Link>\r\n        </Form.Item>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n// Props stands for properties and is being used for passing data from one component to another\r\nRegister.propTypes = {\r\n  registerUser: PropTypes.func.isRequired,\r\n  auth: PropTypes.object.isRequired,\r\n  errors: PropTypes.object.isRequired,\r\n};\r\n\r\n// Get state from Redux and map it to props\r\nconst mapStateToProps = (state) => ({\r\n  auth: state.auth, // allows us to call this.props.auth\r\n  errors: state.errors, // allows us to call this.props.errors\r\n});\r\n\r\nexport default connect(mapStateToProps, { registerUser })(withRouter(Register));\r\n"]},"metadata":{},"sourceType":"module"}