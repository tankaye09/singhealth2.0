{"ast":null,"code":"'use strict';\n\nconst Mailer = require('./mailer');\n\nconst shared = require('./shared');\n\nconst SMTPPool = require('./smtp-pool');\n\nconst SMTPTransport = require('./smtp-transport');\n\nconst SendmailTransport = require('./sendmail-transport');\n\nconst StreamTransport = require('./stream-transport');\n\nconst JSONTransport = require('./json-transport');\n\nconst SESTransport = require('./ses-transport');\n\nconst fetch = require('./fetch');\n\nconst packageData = require('../package.json');\n\nconst ETHEREAL_API = (process.env.ETHEREAL_API || 'https://api.nodemailer.com').replace(/\\/+$/, '');\nconst ETHEREAL_WEB = (process.env.ETHEREAL_WEB || 'https://ethereal.email').replace(/\\/+$/, '');\nconst ETHEREAL_CACHE = ['true', 'yes', 'y', '1'].includes((process.env.ETHEREAL_CACHE || 'yes').toString().trim().toLowerCase());\nlet testAccount = false;\n\nmodule.exports.createTransport = function (transporter, defaults) {\n  let urlConfig;\n  let options;\n  let mailer;\n\n  if ( // provided transporter is a configuration object, not transporter plugin\n  typeof transporter === 'object' && typeof transporter.send !== 'function' || // provided transporter looks like a connection url\n  typeof transporter === 'string' && /^(smtps?|direct):/i.test(transporter)) {\n    if (urlConfig = typeof transporter === 'string' ? transporter : transporter.url) {\n      // parse a configuration URL into configuration options\n      options = shared.parseConnectionUrl(urlConfig);\n    } else {\n      options = transporter;\n    }\n\n    if (options.pool) {\n      transporter = new SMTPPool(options);\n    } else if (options.sendmail) {\n      transporter = new SendmailTransport(options);\n    } else if (options.streamTransport) {\n      transporter = new StreamTransport(options);\n    } else if (options.jsonTransport) {\n      transporter = new JSONTransport(options);\n    } else if (options.SES) {\n      transporter = new SESTransport(options);\n    } else {\n      transporter = new SMTPTransport(options);\n    }\n  }\n\n  mailer = new Mailer(transporter, options, defaults);\n  return mailer;\n};\n\nmodule.exports.createTestAccount = function (apiUrl, callback) {\n  let promise;\n\n  if (!callback && typeof apiUrl === 'function') {\n    callback = apiUrl;\n    apiUrl = false;\n  }\n\n  if (!callback) {\n    promise = new Promise((resolve, reject) => {\n      callback = shared.callbackPromise(resolve, reject);\n    });\n  }\n\n  if (ETHEREAL_CACHE && testAccount) {\n    setImmediate(() => callback(null, testAccount));\n    return promise;\n  }\n\n  apiUrl = apiUrl || ETHEREAL_API;\n  let chunks = [];\n  let chunklen = 0;\n  let req = fetch(apiUrl + '/user', {\n    contentType: 'application/json',\n    method: 'POST',\n    body: Buffer.from(JSON.stringify({\n      requestor: packageData.name,\n      version: packageData.version\n    }))\n  });\n  req.on('readable', () => {\n    let chunk;\n\n    while ((chunk = req.read()) !== null) {\n      chunks.push(chunk);\n      chunklen += chunk.length;\n    }\n  });\n  req.once('error', err => callback(err));\n  req.once('end', () => {\n    let res = Buffer.concat(chunks, chunklen);\n    let data;\n    let err;\n\n    try {\n      data = JSON.parse(res.toString());\n    } catch (E) {\n      err = E;\n    }\n\n    if (err) {\n      return callback(err);\n    }\n\n    if (data.status !== 'success' || data.error) {\n      return callback(new Error(data.error || 'Request failed'));\n    }\n\n    delete data.status;\n    testAccount = data;\n    callback(null, testAccount);\n  });\n  return promise;\n};\n\nmodule.exports.getTestMessageUrl = function (info) {\n  if (!info || !info.response) {\n    return false;\n  }\n\n  let infoProps = new Map();\n  info.response.replace(/\\[([^\\]]+)\\]$/, (m, props) => {\n    props.replace(/\\b([A-Z0-9]+)=([^\\s]+)/g, (m, key, value) => {\n      infoProps.set(key, value);\n    });\n  });\n\n  if (infoProps.has('STATUS') && infoProps.has('MSGID')) {\n    return (testAccount.web || ETHEREAL_WEB) + '/message/' + infoProps.get('MSGID');\n  }\n\n  return false;\n};","map":{"version":3,"sources":["C:/Users/tanka/Desktop/ESC/Project/SingHealthApp/singhealth2.0/node_modules/nodemailer/lib/nodemailer.js"],"names":["Mailer","require","shared","SMTPPool","SMTPTransport","SendmailTransport","StreamTransport","JSONTransport","SESTransport","fetch","packageData","ETHEREAL_API","process","env","replace","ETHEREAL_WEB","ETHEREAL_CACHE","includes","toString","trim","toLowerCase","testAccount","module","exports","createTransport","transporter","defaults","urlConfig","options","mailer","send","test","url","parseConnectionUrl","pool","sendmail","streamTransport","jsonTransport","SES","createTestAccount","apiUrl","callback","promise","Promise","resolve","reject","callbackPromise","setImmediate","chunks","chunklen","req","contentType","method","body","Buffer","from","JSON","stringify","requestor","name","version","on","chunk","read","push","length","once","err","res","concat","data","parse","E","status","error","Error","getTestMessageUrl","info","response","infoProps","Map","m","props","key","value","set","has","web","get"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Mailer = require('./mailer');\nconst shared = require('./shared');\nconst SMTPPool = require('./smtp-pool');\nconst SMTPTransport = require('./smtp-transport');\nconst SendmailTransport = require('./sendmail-transport');\nconst StreamTransport = require('./stream-transport');\nconst JSONTransport = require('./json-transport');\nconst SESTransport = require('./ses-transport');\nconst fetch = require('./fetch');\nconst packageData = require('../package.json');\n\nconst ETHEREAL_API = (process.env.ETHEREAL_API || 'https://api.nodemailer.com').replace(/\\/+$/, '');\nconst ETHEREAL_WEB = (process.env.ETHEREAL_WEB || 'https://ethereal.email').replace(/\\/+$/, '');\nconst ETHEREAL_CACHE = ['true', 'yes', 'y', '1'].includes((process.env.ETHEREAL_CACHE || 'yes').toString().trim().toLowerCase());\n\nlet testAccount = false;\n\nmodule.exports.createTransport = function (transporter, defaults) {\n    let urlConfig;\n    let options;\n    let mailer;\n\n    if (\n        // provided transporter is a configuration object, not transporter plugin\n        (typeof transporter === 'object' && typeof transporter.send !== 'function') ||\n        // provided transporter looks like a connection url\n        (typeof transporter === 'string' && /^(smtps?|direct):/i.test(transporter))\n    ) {\n        if ((urlConfig = typeof transporter === 'string' ? transporter : transporter.url)) {\n            // parse a configuration URL into configuration options\n            options = shared.parseConnectionUrl(urlConfig);\n        } else {\n            options = transporter;\n        }\n\n        if (options.pool) {\n            transporter = new SMTPPool(options);\n        } else if (options.sendmail) {\n            transporter = new SendmailTransport(options);\n        } else if (options.streamTransport) {\n            transporter = new StreamTransport(options);\n        } else if (options.jsonTransport) {\n            transporter = new JSONTransport(options);\n        } else if (options.SES) {\n            transporter = new SESTransport(options);\n        } else {\n            transporter = new SMTPTransport(options);\n        }\n    }\n\n    mailer = new Mailer(transporter, options, defaults);\n\n    return mailer;\n};\n\nmodule.exports.createTestAccount = function (apiUrl, callback) {\n    let promise;\n\n    if (!callback && typeof apiUrl === 'function') {\n        callback = apiUrl;\n        apiUrl = false;\n    }\n\n    if (!callback) {\n        promise = new Promise((resolve, reject) => {\n            callback = shared.callbackPromise(resolve, reject);\n        });\n    }\n\n    if (ETHEREAL_CACHE && testAccount) {\n        setImmediate(() => callback(null, testAccount));\n        return promise;\n    }\n\n    apiUrl = apiUrl || ETHEREAL_API;\n\n    let chunks = [];\n    let chunklen = 0;\n\n    let req = fetch(apiUrl + '/user', {\n        contentType: 'application/json',\n        method: 'POST',\n        body: Buffer.from(\n            JSON.stringify({\n                requestor: packageData.name,\n                version: packageData.version\n            })\n        )\n    });\n\n    req.on('readable', () => {\n        let chunk;\n        while ((chunk = req.read()) !== null) {\n            chunks.push(chunk);\n            chunklen += chunk.length;\n        }\n    });\n\n    req.once('error', err => callback(err));\n\n    req.once('end', () => {\n        let res = Buffer.concat(chunks, chunklen);\n        let data;\n        let err;\n        try {\n            data = JSON.parse(res.toString());\n        } catch (E) {\n            err = E;\n        }\n        if (err) {\n            return callback(err);\n        }\n        if (data.status !== 'success' || data.error) {\n            return callback(new Error(data.error || 'Request failed'));\n        }\n        delete data.status;\n        testAccount = data;\n        callback(null, testAccount);\n    });\n\n    return promise;\n};\n\nmodule.exports.getTestMessageUrl = function (info) {\n    if (!info || !info.response) {\n        return false;\n    }\n\n    let infoProps = new Map();\n    info.response.replace(/\\[([^\\]]+)\\]$/, (m, props) => {\n        props.replace(/\\b([A-Z0-9]+)=([^\\s]+)/g, (m, key, value) => {\n            infoProps.set(key, value);\n        });\n    });\n\n    if (infoProps.has('STATUS') && infoProps.has('MSGID')) {\n        return (testAccount.web || ETHEREAL_WEB) + '/message/' + infoProps.get('MSGID');\n    }\n\n    return false;\n};\n"]},"metadata":{},"sourceType":"script"}