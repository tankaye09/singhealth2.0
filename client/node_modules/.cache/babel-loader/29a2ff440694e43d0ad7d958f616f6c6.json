{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tanka\\\\Desktop\\\\ESC\\\\Project\\\\SingHealthApp\\\\singhealth2.0\\\\client\\\\src\\\\components\\\\auth\\\\Register.js\";\nimport React, { Component } from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport Recaptcha from \"react-recaptcha\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { registerUser } from \"../../actions/authActions\";\nimport classnames from \"classnames\";\nimport { getStaffKey } from \"../../actions/authActions\";\nimport { Form, Input, Button, Layout, Select } from \"antd\";\nimport { MailOutlined, UserOutlined, LockOutlined, SketchOutlined } from \"@ant-design/icons\";\nimport institutionsData from \"../../data/institutions.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Header,\n  Footer,\n  Sider,\n  Content\n} = Layout; // TEST TEAM: for testing change to false\n// DEV TEAM: for dev change to true\n\nconst recaptchaOn = false;\nconst institutions = institutionsData;\n\nclass Register extends Component {\n  constructor() {\n    super();\n\n    this.onChange = e => {\n      this.setState({\n        [e.target.id]: e.target.value\n      });\n    };\n\n    this.onDropdownChange = (e, {\n      value\n    }) => this.setState({\n      value\n    });\n\n    this.onFinish = values => {\n      if (!this.state.isVerified) {\n        alert(\"Please verify you are human\");\n      } else {\n        window.recaptcha = null;\n        getStaffKey(data => {\n          // console.log(\"data is: \", data);\n          this.setState({ ...this.state,\n            dbstaffkey: data\n          }); // console.log(\"dbstaffkey is: \", this.state.dbstaffkey);\n\n          if (this.state.staffkey === this.state.dbstaffkey) {\n            const newUser = {\n              name: values.name,\n              email: values.email,\n              password: values.password,\n              password2: values.password2,\n              institution: values.institution,\n              usertype: \"staff\"\n            };\n            this.props.registerUser(newUser, this.props.history);\n          } else {\n            alert(\"Staff Key is incorrect!\");\n          }\n        });\n      }\n    };\n\n    this.verifyCallback = this.verifyCallback.bind(this);\n    this.state = {\n      isVerified: false,\n      name: \"\",\n      email: \"\",\n      password: \"\",\n      password2: \"\",\n      institution: \"\",\n      staffkey: \"\",\n      dbstaffkey: \"\",\n      errors: {}\n    };\n  }\n\n  componentDidMount() {\n    // If loggied in and user navigates to Register page, should redirect them to dashboad\n    if (this.props.auth.isAuthenticaed) {\n      this.props.history.push(\"/dashboard\"); // Push new entry into history stack, ie redirecting the user to another route\n    }\n\n    if (!recaptchaOn) {\n      this.setState({\n        isVerified: true\n      });\n    }\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (nextProps.errors) {\n      this.setState({\n        errors: nextProps.errors\n      });\n    }\n  }\n\n  verifyCallback(response) {\n    if (response) {\n      this.setState({\n        isVerified: true\n      });\n    }\n  }\n\n  render() {\n    const {\n      errors\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Layout, {\n      children: [/*#__PURE__*/_jsxDEV(Form, {\n        name: \"normal_login\",\n        className: \"login-register-form\",\n        title: \"Register\",\n        onFinish: this.onFinish,\n        children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n          name: \"name\",\n          rules: [{\n            required: true,\n            message: \"Please input your Name!\"\n          }],\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            prefix: /*#__PURE__*/_jsxDEV(UserOutlined, {\n              className: \"site-form-item-icon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 23\n            }, this),\n            placeholder: \"Name\",\n            onChange: this.onChange,\n            value: this.state.name,\n            error: errors.name,\n            id: \"name\",\n            type: \"text\" // className={classnames(\"\", {\n            // invalid: errors.name,\n            // })}\n\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          name: \"email\",\n          rules: [{\n            required: true,\n            type: \"email\",\n            message: \"Please input a valid Email!\"\n          }],\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            prefix: /*#__PURE__*/_jsxDEV(MailOutlined, {\n              className: \"site-form-item-icon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 23\n            }, this),\n            placeholder: \"Email\",\n            onChange: this.onChange,\n            value: this.state.email,\n            error: errors.email,\n            id: \"email\",\n            type: \"email\" // className={classnames(\"\", {\n            //   invalid: errors.email,\n            // })}\n\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          name: \"password\",\n          rules: [{\n            required: true,\n            message: \"Please input your Password!\"\n          }],\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            prefix: /*#__PURE__*/_jsxDEV(LockOutlined, {\n              className: \"site-form-item-icon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 23\n            }, this),\n            placeholder: \"Password\",\n            onChange: this.onChange,\n            value: this.state.password,\n            error: errors.password,\n            id: \"password\",\n            type: \"password\" // className={classnames(\"\", {\n            //   invalid: errors.password,\n            // })}\n\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          name: \"password2\",\n          dependencies: [\"password\"],\n          hasFeedback: true,\n          rules: [{\n            required: true,\n            message: \"Passwords do not match!\"\n          }, ({\n            getFieldValue\n          }) => ({\n            validator(_, value) {\n              if (!value || getFieldValue(\"password\") === value) {\n                return Promise.resolve();\n              }\n\n              return Promise.reject(new Error(\"The two passwords that you entered do not match!\"));\n            }\n\n          })],\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            prefix: /*#__PURE__*/_jsxDEV(LockOutlined, {\n              className: \"site-form-item-icon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 23\n            }, this),\n            placeholder: \"Confirm Password\",\n            onChange: this.onChange,\n            value: this.state.password2,\n            error: errors.password2,\n            id: \"password2\",\n            type: \"password\" // className={classnames(\"\", {\n            // invalid: errors.password2,\n            // })}\n\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          name: \"staffkey\",\n          rules: [{\n            required: true,\n            message: \"Please input your staff key!\"\n          }],\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            prefix: /*#__PURE__*/_jsxDEV(SketchOutlined, {\n              className: \"site-form-item-icon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 23\n            }, this),\n            placeholder: \"Staff Key\",\n            onChange: this.onChange,\n            value: this.state.staffkey,\n            error: errors.staffkey,\n            id: \"staffkey\",\n            type: \"staffkey\",\n            className: classnames(\"\", {\n              invalid: errors.key || errors.keyincorrect\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          name: \"institution\",\n          rules: [{\n            required: true,\n            message: \"Please select an institution!\"\n          }],\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            showSearch: true,\n            className: \"dropdown\",\n            icon: MailOutlined,\n            placeholder: \"Institution\",\n            options: institutions,\n            onChange: this.onDropdownChange,\n            id: \"institution\",\n            type: \"institution\",\n            value: this.state.institution,\n            error: errors.institution\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            type: \"primary\",\n            htmlType: \"submit\",\n            className: \"login-register-form-button\",\n            children: \"Register\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 13\n          }, this), \"Or \", /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/Login\",\n            children: \"Login here\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 16\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Recaptcha, {\n        sitekey: \"6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI\",\n        render: \"explicit\",\n        onloadCallback: console.log(\"onloadCallback\"),\n        verifyCallback: this.verifyCallback\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this);\n  }\n\n} // Props stands for properties and is being used for passing data from one component to another\n\n\nRegister.propTypes = {\n  registerUser: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired,\n  errors: PropTypes.object.isRequired\n}; // Get state from Redux and map it to props\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  // allows us to call this.props.auth\n  errors: state.errors // allows us to call this.props.errors\n\n});\n\nexport default connect(mapStateToProps, {\n  registerUser\n})(withRouter(Register));","map":{"version":3,"sources":["C:/Users/tanka/Desktop/ESC/Project/SingHealthApp/singhealth2.0/client/src/components/auth/Register.js"],"names":["React","Component","Link","withRouter","Recaptcha","PropTypes","connect","registerUser","classnames","getStaffKey","Form","Input","Button","Layout","Select","MailOutlined","UserOutlined","LockOutlined","SketchOutlined","institutionsData","Header","Footer","Sider","Content","recaptchaOn","institutions","Register","constructor","onChange","e","setState","target","id","value","onDropdownChange","onFinish","values","state","isVerified","alert","window","recaptcha","data","dbstaffkey","staffkey","newUser","name","email","password","password2","institution","usertype","props","history","verifyCallback","bind","errors","componentDidMount","auth","isAuthenticaed","push","UNSAFE_componentWillReceiveProps","nextProps","response","render","required","message","type","getFieldValue","validator","_","Promise","resolve","reject","Error","invalid","key","keyincorrect","console","log","propTypes","func","isRequired","object","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport Recaptcha from \"react-recaptcha\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { registerUser } from \"../../actions/authActions\";\r\nimport classnames from \"classnames\";\r\nimport { getStaffKey } from \"../../actions/authActions\";\r\nimport { Form, Input, Button, Layout, Select } from \"antd\";\r\nimport {\r\n  MailOutlined,\r\n  UserOutlined,\r\n  LockOutlined,\r\n  SketchOutlined,\r\n} from \"@ant-design/icons\";\r\nimport institutionsData from \"../../data/institutions.json\";\r\n\r\nconst { Header, Footer, Sider, Content } = Layout;\r\n\r\n// TEST TEAM: for testing change to false\r\n// DEV TEAM: for dev change to true\r\nconst recaptchaOn = false;\r\n\r\nconst institutions = institutionsData;\r\n\r\nclass Register extends Component {\r\n  constructor() {\r\n    super();\r\n    this.verifyCallback = this.verifyCallback.bind(this);\r\n    this.state = {\r\n      isVerified: false,\r\n      name: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n      password2: \"\",\r\n      institution: \"\",\r\n      staffkey: \"\",\r\n      dbstaffkey: \"\",\r\n      errors: {},\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // If loggied in and user navigates to Register page, should redirect them to dashboad\r\n    if (this.props.auth.isAuthenticaed) {\r\n      this.props.history.push(\"/dashboard\"); // Push new entry into history stack, ie redirecting the user to another route\r\n    }\r\n    if (!recaptchaOn) {\r\n      this.setState({\r\n        isVerified: true,\r\n      });\r\n    }\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps) {\r\n    if (nextProps.errors) {\r\n      this.setState({\r\n        errors: nextProps.errors,\r\n      });\r\n    }\r\n  }\r\n\r\n  onChange = (e) => {\r\n    this.setState({ [e.target.id]: e.target.value });\r\n  };\r\n\r\n  onDropdownChange = (e, { value }) => this.setState({ value });\r\n\r\n  onFinish = (values) => {\r\n    if (!this.state.isVerified) {\r\n      alert(\"Please verify you are human\");\r\n    } else {\r\n      window.recaptcha = null;\r\n      getStaffKey((data) => {\r\n        // console.log(\"data is: \", data);\r\n        this.setState({ ...this.state, dbstaffkey: data });\r\n        // console.log(\"dbstaffkey is: \", this.state.dbstaffkey);\r\n        if (this.state.staffkey === this.state.dbstaffkey) {\r\n          const newUser = {\r\n            name: values.name,\r\n            email: values.email,\r\n            password: values.password,\r\n            password2: values.password2,\r\n            institution: values.institution,\r\n            usertype: \"staff\",\r\n          };\r\n          this.props.registerUser(newUser, this.props.history);\r\n        } else {\r\n          alert(\"Staff Key is incorrect!\");\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  verifyCallback(response) {\r\n    if (response) {\r\n      this.setState({ isVerified: true });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { errors } = this.state;\r\n    return (\r\n      <Layout>\r\n        <Form\r\n          name=\"normal_login\"\r\n          className=\"login-register-form\"\r\n          title=\"Register\"\r\n          onFinish={this.onFinish}\r\n        >\r\n          <Form.Item\r\n            name=\"name\"\r\n            rules={[{ required: true, message: \"Please input your Name!\" }]}\r\n          >\r\n            <Input\r\n              prefix={<UserOutlined className=\"site-form-item-icon\" />}\r\n              placeholder=\"Name\"\r\n              onChange={this.onChange}\r\n              value={this.state.name}\r\n              error={errors.name}\r\n              id=\"name\"\r\n              type=\"text\"\r\n              // className={classnames(\"\", {\r\n              // invalid: errors.name,\r\n              // })}\r\n            />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            name=\"email\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                type: \"email\",\r\n                message: \"Please input a valid Email!\",\r\n              },\r\n            ]}\r\n          >\r\n            <Input\r\n              prefix={<MailOutlined className=\"site-form-item-icon\" />}\r\n              placeholder=\"Email\"\r\n              onChange={this.onChange}\r\n              value={this.state.email}\r\n              error={errors.email}\r\n              id=\"email\"\r\n              type=\"email\"\r\n              // className={classnames(\"\", {\r\n              //   invalid: errors.email,\r\n              // })}\r\n            />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            name=\"password\"\r\n            rules={[{ required: true, message: \"Please input your Password!\" }]}\r\n          >\r\n            <Input\r\n              prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n              placeholder=\"Password\"\r\n              onChange={this.onChange}\r\n              value={this.state.password}\r\n              error={errors.password}\r\n              id=\"password\"\r\n              type=\"password\"\r\n              // className={classnames(\"\", {\r\n              //   invalid: errors.password,\r\n              // })}\r\n            />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            name=\"password2\"\r\n            dependencies={[\"password\"]}\r\n            hasFeedback\r\n            rules={[\r\n              { required: true, message: \"Passwords do not match!\" },\r\n              ({ getFieldValue }) => ({\r\n                validator(_, value) {\r\n                  if (!value || getFieldValue(\"password\") === value) {\r\n                    return Promise.resolve();\r\n                  }\r\n\r\n                  return Promise.reject(\r\n                    new Error(\r\n                      \"The two passwords that you entered do not match!\"\r\n                    )\r\n                  );\r\n                },\r\n              }),\r\n            ]}\r\n          >\r\n            <Input\r\n              prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n              placeholder=\"Confirm Password\"\r\n              onChange={this.onChange}\r\n              value={this.state.password2}\r\n              error={errors.password2}\r\n              id=\"password2\"\r\n              type=\"password\"\r\n              // className={classnames(\"\", {\r\n              // invalid: errors.password2,\r\n              // })}\r\n            />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            name=\"staffkey\"\r\n            rules={[\r\n              { required: true, message: \"Please input your staff key!\" },\r\n            ]}\r\n          >\r\n            <Input\r\n              prefix={<SketchOutlined className=\"site-form-item-icon\" />}\r\n              placeholder=\"Staff Key\"\r\n              onChange={this.onChange}\r\n              value={this.state.staffkey}\r\n              error={errors.staffkey}\r\n              id=\"staffkey\"\r\n              type=\"staffkey\"\r\n              className={classnames(\"\", {\r\n                invalid: errors.key || errors.keyincorrect,\r\n              })}\r\n            />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            name=\"institution\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Please select an institution!\",\r\n              },\r\n            ]}\r\n          >\r\n            <Select\r\n              showSearch\r\n              className=\"dropdown\"\r\n              icon={MailOutlined}\r\n              placeholder=\"Institution\"\r\n              options={institutions}\r\n              onChange={this.onDropdownChange}\r\n              id=\"institution\"\r\n              type=\"institution\"\r\n              value={this.state.institution}\r\n              error={errors.institution}\r\n            />\r\n          </Form.Item>\r\n\r\n          <Form.Item>\r\n            <Button\r\n              type=\"primary\"\r\n              htmlType=\"submit\"\r\n              className=\"login-register-form-button\"\r\n            >\r\n              Register\r\n            </Button>\r\n            Or <Link to=\"/Login\">Login here</Link>\r\n          </Form.Item>\r\n        </Form>\r\n        <Recaptcha\r\n          sitekey=\"6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI\"\r\n          render=\"explicit\"\r\n          onloadCallback={console.log(\"onloadCallback\")}\r\n          verifyCallback={this.verifyCallback}\r\n        />\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n// Props stands for properties and is being used for passing data from one component to another\r\nRegister.propTypes = {\r\n  registerUser: PropTypes.func.isRequired,\r\n  auth: PropTypes.object.isRequired,\r\n  errors: PropTypes.object.isRequired,\r\n};\r\n\r\n// Get state from Redux and map it to props\r\nconst mapStateToProps = (state) => ({\r\n  auth: state.auth, // allows us to call this.props.auth\r\n  errors: state.errors, // allows us to call this.props.errors\r\n});\r\n\r\nexport default connect(mapStateToProps, { registerUser })(withRouter(Register));\r\n"]},"metadata":{},"sourceType":"module"}