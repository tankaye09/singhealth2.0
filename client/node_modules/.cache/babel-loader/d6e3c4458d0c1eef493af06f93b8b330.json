{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tanka\\\\Desktop\\\\ESC\\\\Project\\\\SingHealthApp\\\\singhealth2.0\\\\client\\\\src\\\\components\\\\Checklist.js\";\nimport \"../App.css\";\nimport { Collapse, Divider, List, Input, Checkbox, Button } from \"antd\";\nimport React, { Component } from \"react\";\nimport importJSON from \"../data/questionsDict.json\";\nimport { createRegularExpressionLiteral } from \"typescript\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Fb = importJSON.fb;\nconst {\n  Panel\n} = Collapse; // TODO: Take score from json file => Update the score, replace the json file\n\nclass Checklist extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleFormSubmit = formSubmitEvent => {\n      formSubmitEvent.preventDefault();\n\n      for (const checkbox of this.selectedCheckboxes) {\n        console.log(checkbox, \"is selected.\");\n      }\n    };\n\n    this.state = {\n      checkboxes: []\n    };\n\n    this.toggleCheckbox = label => {\n      // if (this.selectedCheckboxes.has(label)) {\n      if (this.state.checkboxes.has(label)) {\n        this.selectedCheckboxes.delete(label);\n      } else {\n        this.selectedCheckboxes.add(label);\n      }\n    };\n\n    this.createCheckbox = label => {\n      this.setState({\n        checkboxes: this.state.checkboxes.concat([{\n          label: {\n            label\n          },\n          checked: false\n        }])\n      });\n    };\n\n    this.createprofCheckbox = label => /*#__PURE__*/_jsxDEV(Checkbox, {\n      label: label,\n      handleCheckboxChange: this.toggleCheckbox,\n      onChange: e => this.handleCat0Count(e)\n    }, label, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }, this);\n\n    this.handleCat0Count = e => {\n      const {\n        checked,\n        type\n      } = e.target;\n\n      if (type === \"checkbox\" && checked === true) {\n        this.setState(state => state.cat0count++, this.logCount);\n      } else {\n        this.setState(state => state.cat0count--, this.logCount);\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"panels\",\n      children: [Fb.map((cat, catIndex) => {\n        var catScore = cat.score; // const createCheckbox = (label) => (\n        //   <Checkbox\n        //     label={label}\n        //     handleCheckboxChange={toggleCheckbox}\n        //     key={label}\n        //     onChange={(e) => handleCount(e)}\n        //   />\n        // );\n        // const toggleCheckbox = (label) => {\n        //   if (this.selectedCheckboxes.has(label)) {\n        //     this.selectedCheckboxes.delete(label);\n        //   } else {\n        //     this.selectedCheckboxes.add(label);\n        //   }\n        // };\n        // const handleCount = (e) => {\n        //   const { checked, type } = e.target;\n        //   if (type === \"checkbox\" && checked === true) {\n        //     catScore++;\n        //   } else {\n        //     catScore--;\n        //   }\n        // };\n\n        return (\n          /*#__PURE__*/\n          // Category\n          _jsxDEV(Collapse, {\n            defaultActiveKey: [\"1\"],\n            children: /*#__PURE__*/_jsxDEV(Panel, {\n              header: /*#__PURE__*/_jsxDEV(\"div\", {\n                catIndex: catIndex,\n                children: cat.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 25\n              }, this),\n              className: \"bg-orange\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                catIndex: catIndex,\n                children: cat.subcategories.map((subCat, subCatIndex) => {\n                  return (\n                    /*#__PURE__*/\n                    // SubCategory\n                    _jsxDEV(Collapse, {\n                      defaultActiveKey: [\"1\"],\n                      children: /*#__PURE__*/_jsxDEV(Panel, {\n                        header: /*#__PURE__*/_jsxDEV(\"div\", {\n                          subCatIndex: subCatIndex,\n                          children: subCat.name\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 106,\n                          columnNumber: 29\n                        }, this),\n                        className: \"bg-orange\",\n                        children: /*#__PURE__*/_jsxDEV(\"div\", {\n                          children: subCat.questions.map((question, questionIndex) => {\n                            // this.createCheckbox\n                            // this.state.checkboxes[questionIndex]\n                            return /*#__PURE__*/_jsxDEV(List, {\n                              children: /*#__PURE__*/_jsxDEV(List.Item, {\n                                children: [this.createCheckbox, /*#__PURE__*/_jsxDEV(\"div\", {\n                                  className: \"create-audit-row\",\n                                  children: [question, /*#__PURE__*/_jsxDEV(Checkbox, {\n                                    label: question,\n                                    handleCheckboxChange: this.toggleCheckbox,\n                                    onChange: e => this.handleCat0Count(e)\n                                  }, question, false, {\n                                    fileName: _jsxFileName,\n                                    lineNumber: 121,\n                                    columnNumber: 39\n                                  }, this)]\n                                }, void 0, true, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 119,\n                                  columnNumber: 37\n                                }, this)]\n                              }, void 0, true, {\n                                fileName: _jsxFileName,\n                                lineNumber: 117,\n                                columnNumber: 35\n                              }, this)\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 116,\n                              columnNumber: 33\n                            }, this);\n                          })\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 111,\n                          columnNumber: 27\n                        }, this)\n                      }, subCatIndex + 1, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 104,\n                        columnNumber: 25\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 103,\n                      columnNumber: 23\n                    }, this)\n                  );\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\"Score: \", catScore]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 17\n              }, this)]\n            }, catIndex + 1, true, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this)\n        );\n      }), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.state.cat0count\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: \"submit-button\",\n        type: \"primary\",\n        htmlType: \"submit\",\n        children: \"SUBMIT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Checklist;","map":{"version":3,"sources":["C:/Users/tanka/Desktop/ESC/Project/SingHealthApp/singhealth2.0/client/src/components/Checklist.js"],"names":["Collapse","Divider","List","Input","Checkbox","Button","React","Component","importJSON","createRegularExpressionLiteral","Fb","fb","Panel","Checklist","handleFormSubmit","formSubmitEvent","preventDefault","checkbox","selectedCheckboxes","console","log","state","checkboxes","toggleCheckbox","label","has","delete","add","createCheckbox","setState","concat","checked","createprofCheckbox","e","handleCat0Count","type","target","cat0count","logCount","render","map","cat","catIndex","catScore","score","name","subcategories","subCat","subCatIndex","questions","question","questionIndex"],"mappings":"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","sourcesContent":["import \"../App.css\";\r\nimport { Collapse, Divider, List, Input, Checkbox, Button } from \"antd\";\r\nimport React, { Component } from \"react\";\r\nimport importJSON from \"../data/questionsDict.json\";\r\nimport { createRegularExpressionLiteral } from \"typescript\";\r\nconst Fb = importJSON.fb;\r\nconst { Panel } = Collapse;\r\n\r\n// TODO: Take score from json file => Update the score, replace the json file\r\n\r\nclass Checklist extends Component {\r\n  handleFormSubmit = (formSubmitEvent) => {\r\n    formSubmitEvent.preventDefault();\r\n\r\n    for (const checkbox of this.selectedCheckboxes) {\r\n      console.log(checkbox, \"is selected.\");\r\n    }\r\n  };\r\n\r\n  state = {\r\n    checkboxes: [],\r\n  };\r\n\r\n  toggleCheckbox = (label) => {\r\n    // if (this.selectedCheckboxes.has(label)) {\r\n    if (this.state.checkboxes.has(label)) {\r\n      this.selectedCheckboxes.delete(label);\r\n    } else {\r\n      this.selectedCheckboxes.add(label);\r\n    }\r\n  };\r\n\r\n  createCheckbox = (label) => {\r\n    this.setState({\r\n      checkboxes: this.state.checkboxes.concat([\r\n        { label: { label }, checked: false },\r\n      ]),\r\n    });\r\n  };\r\n\r\n  createprofCheckbox = (label) => (\r\n    <Checkbox\r\n      label={label}\r\n      handleCheckboxChange={this.toggleCheckbox}\r\n      key={label}\r\n      onChange={(e) => this.handleCat0Count(e)}\r\n    />\r\n  );\r\n\r\n  handleCat0Count = (e) => {\r\n    const { checked, type } = e.target;\r\n    if (type === \"checkbox\" && checked === true) {\r\n      this.setState((state) => state.cat0count++, this.logCount);\r\n    } else {\r\n      this.setState((state) => state.cat0count--, this.logCount);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"panels\">\r\n        {Fb.map((cat, catIndex) => {\r\n          var catScore = cat.score;\r\n\r\n          // const createCheckbox = (label) => (\r\n          //   <Checkbox\r\n          //     label={label}\r\n          //     handleCheckboxChange={toggleCheckbox}\r\n          //     key={label}\r\n          //     onChange={(e) => handleCount(e)}\r\n          //   />\r\n          // );\r\n\r\n          // const toggleCheckbox = (label) => {\r\n          //   if (this.selectedCheckboxes.has(label)) {\r\n          //     this.selectedCheckboxes.delete(label);\r\n          //   } else {\r\n          //     this.selectedCheckboxes.add(label);\r\n          //   }\r\n          // };\r\n\r\n          // const handleCount = (e) => {\r\n          //   const { checked, type } = e.target;\r\n          //   if (type === \"checkbox\" && checked === true) {\r\n          //     catScore++;\r\n          //   } else {\r\n          //     catScore--;\r\n          //   }\r\n          // };\r\n\r\n          return (\r\n            // Category\r\n            <Collapse defaultActiveKey={[\"1\"]}>\r\n              <Panel\r\n                header={<div catIndex={catIndex}>{cat.name}</div>}\r\n                key={catIndex + 1}\r\n                className=\"bg-orange\"\r\n              >\r\n                <div catIndex={catIndex}>\r\n                  {cat.subcategories.map((subCat, subCatIndex) => {\r\n                    return (\r\n                      // SubCategory\r\n                      <Collapse defaultActiveKey={[\"1\"]}>\r\n                        <Panel\r\n                          header={\r\n                            <div subCatIndex={subCatIndex}>{subCat.name}</div>\r\n                          }\r\n                          key={subCatIndex + 1}\r\n                          className=\"bg-orange\"\r\n                        >\r\n                          <div>\r\n                            {subCat.questions.map((question, questionIndex) => {\r\n                              // this.createCheckbox\r\n                              // this.state.checkboxes[questionIndex]\r\n                              return (\r\n                                <List>\r\n                                  <List.Item>\r\n                                    {this.createCheckbox}\r\n                                    <div className=\"create-audit-row\">\r\n                                      {question}\r\n                                      <Checkbox\r\n                                        label={question}\r\n                                        handleCheckboxChange={\r\n                                          this.toggleCheckbox\r\n                                        }\r\n                                        key={question}\r\n                                        onChange={(e) =>\r\n                                          this.handleCat0Count(e)\r\n                                        }\r\n                                      />\r\n                                    </div>\r\n                                  </List.Item>\r\n                                </List>\r\n                              );\r\n                            })}\r\n                          </div>\r\n                        </Panel>\r\n                      </Collapse>\r\n                    );\r\n                  })}\r\n                </div>\r\n                <div>Score: {catScore}</div>\r\n              </Panel>\r\n            </Collapse>\r\n          );\r\n        })}\r\n        <div>{this.state.cat0count}</div>\r\n        <Button className=\"submit-button\" type=\"primary\" htmlType=\"submit\">\r\n          SUBMIT\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Checklist;\r\n"]},"metadata":{},"sourceType":"module"}