{"ast":null,"code":"import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./types\"; // Pre-register User\n\nexport const preRegister = (key, history) => dispatch => {\n  axios.get(\"api/keys/\");\n}; // Register User\n\nexport const registerUser = (userData, history) => dispatch => {\n  axios.post(\"/api/users/register\", userData).then(res => history.push(\"/login\")) // re-direct to login on successful register\n  .catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Login - get user token\n\nexport const loginUser = userData => dispatch => {\n  axios.post(\"/api/users/login\", userData).then(res => {\n    // Save to localStorage\n    // Set token to localStorage\n    const {\n      token\n    } = res.data;\n    localStorage.setItem(\"jwtToken\", token); // Set token to Auth header\n\n    setAuthToken(token); // Decode token to get user data\n\n    const decoded = jwt_decode(token); // Set current user\n\n    dispatch(setCurrentUser(decoded));\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Set logged in user\n\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; // User loading\n\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n}; // Log user out\n\nexport const logoutUser = () => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\"); // Remove auth header for future requests\n\n  setAuthToken(false); // Set current user to empty object {} which will set isAuthenticaed to false\n\n  dispatch(setCurrentUser({}));\n};\n/* Get Staff Key */\n\nexport const getStaffKey = onDataReceived => {\n  axios.get(\"/api/staffkey\").then(response => onDataReceived(response.data.staffkey));\n};\n/* Tenant */\n// Register Tenant\n\nexport const registerTenant = (userData, history) => dispatch => {\n  axios.post(\"/api/users/register\", userData).then(res => history.push(\"/login\")) // re-direct to login on successful register\n  .catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n};","map":{"version":3,"sources":["C:/Users/tanka/Desktop/ESC/Project/SingHealthApp/singhealth2.0/client/src/actions/authActions.js"],"names":["axios","setAuthToken","jwt_decode","GET_ERRORS","SET_CURRENT_USER","USER_LOADING","preRegister","key","history","dispatch","get","registerUser","userData","post","then","res","push","catch","err","type","payload","response","data","loginUser","token","localStorage","setItem","decoded","setCurrentUser","setUserLoading","logoutUser","removeItem","getStaffKey","onDataReceived","staffkey","registerTenant"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport jwt_decode from \"jwt-decode\";\r\n\r\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./types\";\r\n\r\n// Pre-register User\r\n\r\nexport const preRegister = (key, history) => (dispatch) => {\r\n  axios.get(\"api/keys/\");\r\n};\r\n\r\n// Register User\r\nexport const registerUser = (userData, history) => (dispatch) => {\r\n  axios\r\n    .post(\"/api/users/register\", userData)\r\n    .then((res) => history.push(\"/login\")) // re-direct to login on successful register\r\n    .catch((err) =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data,\r\n      })\r\n    );\r\n};\r\n\r\n// Login - get user token\r\nexport const loginUser = (userData) => (dispatch) => {\r\n  axios\r\n    .post(\"/api/users/login\", userData)\r\n    .then((res) => {\r\n      // Save to localStorage\r\n\r\n      // Set token to localStorage\r\n      const { token } = res.data;\r\n      localStorage.setItem(\"jwtToken\", token);\r\n      // Set token to Auth header\r\n      setAuthToken(token);\r\n      // Decode token to get user data\r\n      const decoded = jwt_decode(token);\r\n      // Set current user\r\n      dispatch(setCurrentUser(decoded));\r\n    })\r\n    .catch((err) =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data,\r\n      })\r\n    );\r\n};\r\n\r\n// Set logged in user\r\nexport const setCurrentUser = (decoded) => {\r\n  return {\r\n    type: SET_CURRENT_USER,\r\n    payload: decoded,\r\n  };\r\n};\r\n\r\n// User loading\r\nexport const setUserLoading = () => {\r\n  return {\r\n    type: USER_LOADING,\r\n  };\r\n};\r\n\r\n// Log user out\r\nexport const logoutUser = () => (dispatch) => {\r\n  // Remove token from local storage\r\n  localStorage.removeItem(\"jwtToken\");\r\n  // Remove auth header for future requests\r\n  setAuthToken(false);\r\n  // Set current user to empty object {} which will set isAuthenticaed to false\r\n  dispatch(setCurrentUser({}));\r\n};\r\n\r\n/* Get Staff Key */\r\nexport const getStaffKey = (onDataReceived) => {\r\n  axios\r\n    .get(\"/api/staffkey\")\r\n    .then((response) => onDataReceived(response.data.staffkey));\r\n};\r\n\r\n/* Tenant */\r\n// Register Tenant\r\nexport const registerTenant = (userData, history) => (dispatch) => {\r\n  axios\r\n    .post(\"/api/users/register\", userData)\r\n    .then((res) => history.push(\"/login\")) // re-direct to login on successful register\r\n    .catch((err) =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data,\r\n      })\r\n    );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}