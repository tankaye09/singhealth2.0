{"ast":null,"code":"import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport { GET_ERRORS, GET_MESSAGE, SET_CURRENT_USER, USER_LOADING } from \"./types\"; // Register User\n\n/* Get Staff Key */\n\nexport const getStaffKey = onDataReceived => {\n  axios.get(\"/api/staffkey\").then(response => {\n    // console.log(\"response is:\", response.data[0].staffkey);\n    onDataReceived(response.data[0].staffkey);\n  }).catch(err => {\n    console.log(err);\n  });\n};\nexport const registerUser = (userData, history) => dispatch => {\n  axios.post(\"/api/users/register\", userData).then(res => {\n    dispatch({\n      type: GET_MESSAGE,\n      payload: \"User Created\"\n    });\n    history.push(\"/login\");\n  }) // re-direct to login on successful register\n  .catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Login - get user token\n\nexport const loginUser = (userData, history) => dispatch => {\n  axios.post(\"/api/users/login\", userData).then(res => {\n    // Save to localStorage\n    // Set token to localStorage\n    const {\n      token\n    } = res.data;\n    localStorage.setItem(\"jwtToken\", token); // Set token to Auth header\n\n    setAuthToken(token); // Decode token to get user data\n\n    const decoded = jwt_decode(token); // console.log(\"decoded is: \", decoded);\n    // Set current user\n\n    dispatch(setCurrentUser(decoded));\n    history.push(\"/\");\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Set logged in user\n\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; // User loading\n\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n}; // Log user out\n\nexport const logoutUser = () => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\"); // Remove auth header for future requests\n\n  setAuthToken(false); // Set current user to empty object {} which will set isAuthenticaed to false\n\n  dispatch(setCurrentUser({}));\n};\n/* Tenant */\n// Register Tenant\n\nexport const registerTenant = (userData, history) => dispatch => {\n  let promise = new Promise((resolve, reject) => {\n    axios.post(\"/api/users/createtenant\", userData).then(res => {\n      dispatch({\n        type: GET_MESSAGE,\n        payload: \"Tenant Created\"\n      }); // history.push(\"/auditlist\");\n\n      resolve(userData);\n    }) // TODO: set up ViewTenants{AuditorName} or sth\n    .catch(error => {\n      dispatch({\n        type: GET_ERRORS,\n        payload: error.response.data\n      });\n      reject(\"Tenant Creation Failed\");\n    });\n  });\n  promise.then(message => {\n    sendEmail(message);\n  }).catch(message => {\n    console.log(message);\n  });\n};\nexport const deleteTenant = data => {\n  console.log(data);\n  axios.post(\"/api/users/deletetenant\", data).catch(err => {\n    console.log(err);\n  });\n};\nexport const printMe = () => {\n  console.log(\"Inside print me\");\n};\nexport const sendEmail = data => {\n  console.log(\"In send email\");\n  axios.post(\"/api/sendemail\", data).then(res => {\n    console.log(\"email sent success\"); // dispatch({\n    //   type: GET_MESSAGE,\n    //   payload: \"Email Sent to Tenant\",\n    // });\n  }).catch(err => {\n    console.log(\"email sent failed, err: \", err); // dispatch({\n    //   type: GET_ERRORS,\n    //   payload: \"Email Sent Failed\",\n    // });\n  });\n};","map":{"version":3,"sources":["C:/Users/tanka/Desktop/ESC/Project/SingHealthApp/singhealth2.0/client/src/actions/authActions.js"],"names":["axios","setAuthToken","jwt_decode","GET_ERRORS","GET_MESSAGE","SET_CURRENT_USER","USER_LOADING","getStaffKey","onDataReceived","get","then","response","data","staffkey","catch","err","console","log","registerUser","userData","history","dispatch","post","res","type","payload","push","loginUser","token","localStorage","setItem","decoded","setCurrentUser","setUserLoading","logoutUser","removeItem","registerTenant","promise","Promise","resolve","reject","error","message","sendEmail","deleteTenant","printMe"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,SACEC,UADF,EAEEC,WAFF,EAGEC,gBAHF,EAIEC,YAJF,QAKO,SALP,C,CAOA;;AAEA;;AACA,OAAO,MAAMC,WAAW,GAAIC,cAAD,IAAoB;AAC7CR,EAAAA,KAAK,CACFS,GADH,CACO,eADP,EAEGC,IAFH,CAESC,QAAD,IAAc;AAClB;AACAH,IAAAA,cAAc,CAACG,QAAQ,CAACC,IAAT,CAAc,CAAd,EAAiBC,QAAlB,CAAd;AACD,GALH,EAMGC,KANH,CAMUC,GAAD,IAAS;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,GARH;AASD,CAVM;AAYP,OAAO,MAAMG,YAAY,GAAG,CAACC,QAAD,EAAWC,OAAX,KAAwBC,QAAD,IAAc;AAC/DrB,EAAAA,KAAK,CACFsB,IADH,CACQ,qBADR,EAC+BH,QAD/B,EAEGT,IAFH,CAESa,GAAD,IAAS;AACbF,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEpB,WADC;AAEPqB,MAAAA,OAAO,EAAE;AAFF,KAAD,CAAR;AAIAL,IAAAA,OAAO,CAACM,IAAR,CAAa,QAAb;AACD,GARH,EAQK;AARL,GASGZ,KATH,CASUC,GAAD,IACLM,QAAQ,CAAC;AACPG,IAAAA,IAAI,EAAErB,UADC;AAEPsB,IAAAA,OAAO,EAAEV,GAAG,CAACJ,QAAJ,CAAaC;AAFf,GAAD,CAVZ;AAeD,CAhBM,C,CAkBP;;AACA,OAAO,MAAMe,SAAS,GAAG,CAACR,QAAD,EAAWC,OAAX,KAAwBC,QAAD,IAAc;AAC5DrB,EAAAA,KAAK,CACFsB,IADH,CACQ,kBADR,EAC4BH,QAD5B,EAEGT,IAFH,CAESa,GAAD,IAAS;AACb;AAEA;AACA,UAAM;AAAEK,MAAAA;AAAF,QAAYL,GAAG,CAACX,IAAtB;AACAiB,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC,EALa,CAMb;;AACA3B,IAAAA,YAAY,CAAC2B,KAAD,CAAZ,CAPa,CAQb;;AACA,UAAMG,OAAO,GAAG7B,UAAU,CAAC0B,KAAD,CAA1B,CATa,CAUb;AACA;;AACAP,IAAAA,QAAQ,CAACW,cAAc,CAACD,OAAD,CAAf,CAAR;AACAX,IAAAA,OAAO,CAACM,IAAR,CAAa,GAAb;AACD,GAhBH,EAiBGZ,KAjBH,CAiBUC,GAAD,IACLM,QAAQ,CAAC;AACPG,IAAAA,IAAI,EAAErB,UADC;AAEPsB,IAAAA,OAAO,EAAEV,GAAG,CAACJ,QAAJ,CAAaC;AAFf,GAAD,CAlBZ;AAuBD,CAxBM,C,CA0BP;;AACA,OAAO,MAAMoB,cAAc,GAAID,OAAD,IAAa;AACzC,SAAO;AACLP,IAAAA,IAAI,EAAEnB,gBADD;AAELoB,IAAAA,OAAO,EAAEM;AAFJ,GAAP;AAID,CALM,C,CAOP;;AACA,OAAO,MAAME,cAAc,GAAG,MAAM;AAClC,SAAO;AACLT,IAAAA,IAAI,EAAElB;AADD,GAAP;AAGD,CAJM,C,CAMP;;AACA,OAAO,MAAM4B,UAAU,GAAG,MAAOb,QAAD,IAAc;AAC5C;AACAQ,EAAAA,YAAY,CAACM,UAAb,CAAwB,UAAxB,EAF4C,CAG5C;;AACAlC,EAAAA,YAAY,CAAC,KAAD,CAAZ,CAJ4C,CAK5C;;AACAoB,EAAAA,QAAQ,CAACW,cAAc,CAAC,EAAD,CAAf,CAAR;AACD,CAPM;AASP;AACA;;AACA,OAAO,MAAMI,cAAc,GAAG,CAACjB,QAAD,EAAWC,OAAX,KAAwBC,QAAD,IAAc;AACjE,MAAIgB,OAAO,GAAG,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC7CxC,IAAAA,KAAK,CACFsB,IADH,CACQ,yBADR,EACmCH,QADnC,EAEGT,IAFH,CAESa,GAAD,IAAS;AACbF,MAAAA,QAAQ,CAAC;AACPG,QAAAA,IAAI,EAAEpB,WADC;AAEPqB,QAAAA,OAAO,EAAE;AAFF,OAAD,CAAR,CADa,CAKb;;AACAc,MAAAA,OAAO,CAACpB,QAAD,CAAP;AACD,KATH,EASK;AATL,KAUGL,KAVH,CAUU2B,KAAD,IAAW;AAChBpB,MAAAA,QAAQ,CAAC;AACPG,QAAAA,IAAI,EAAErB,UADC;AAEPsB,QAAAA,OAAO,EAAEgB,KAAK,CAAC9B,QAAN,CAAeC;AAFjB,OAAD,CAAR;AAIA4B,MAAAA,MAAM,CAAC,wBAAD,CAAN;AACD,KAhBH;AAiBD,GAlBa,CAAd;AAoBAH,EAAAA,OAAO,CACJ3B,IADH,CACSgC,OAAD,IAAa;AACjBC,IAAAA,SAAS,CAACD,OAAD,CAAT;AACD,GAHH,EAIG5B,KAJH,CAIU4B,OAAD,IAAa;AAClB1B,IAAAA,OAAO,CAACC,GAAR,CAAYyB,OAAZ;AACD,GANH;AAOD,CA5BM;AA8BP,OAAO,MAAME,YAAY,GAAIhC,IAAD,IAAU;AACpCI,EAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;AACAZ,EAAAA,KAAK,CAACsB,IAAN,CAAW,yBAAX,EAAsCV,IAAtC,EAA4CE,KAA5C,CAAmDC,GAAD,IAAS;AACzDC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,GAFD;AAGD,CALM;AAOP,OAAO,MAAM8B,OAAO,GAAG,MAAM;AAC3B7B,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACD,CAFM;AAIP,OAAO,MAAM0B,SAAS,GAAI/B,IAAD,IAAU;AACjCI,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACAjB,EAAAA,KAAK,CACFsB,IADH,CACQ,gBADR,EAC0BV,IAD1B,EAEGF,IAFH,CAESa,GAAD,IAAS;AACbP,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EADa,CAEb;AACA;AACA;AACA;AACD,GARH,EASGH,KATH,CASUC,GAAD,IAAS;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCF,GAAxC,EADc,CAEd;AACA;AACA;AACA;AACD,GAfH;AAgBD,CAlBM","sourcesContent":["import axios from \"axios\";\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport jwt_decode from \"jwt-decode\";\r\n\r\nimport {\r\n  GET_ERRORS,\r\n  GET_MESSAGE,\r\n  SET_CURRENT_USER,\r\n  USER_LOADING,\r\n} from \"./types\";\r\n\r\n// Register User\r\n\r\n/* Get Staff Key */\r\nexport const getStaffKey = (onDataReceived) => {\r\n  axios\r\n    .get(\"/api/staffkey\")\r\n    .then((response) => {\r\n      // console.log(\"response is:\", response.data[0].staffkey);\r\n      onDataReceived(response.data[0].staffkey);\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n    });\r\n};\r\n\r\nexport const registerUser = (userData, history) => (dispatch) => {\r\n  axios\r\n    .post(\"/api/users/register\", userData)\r\n    .then((res) => {\r\n      dispatch({\r\n        type: GET_MESSAGE,\r\n        payload: \"User Created\",\r\n      });\r\n      history.push(\"/login\");\r\n    }) // re-direct to login on successful register\r\n    .catch((err) =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data,\r\n      })\r\n    );\r\n};\r\n\r\n// Login - get user token\r\nexport const loginUser = (userData, history) => (dispatch) => {\r\n  axios\r\n    .post(\"/api/users/login\", userData)\r\n    .then((res) => {\r\n      // Save to localStorage\r\n\r\n      // Set token to localStorage\r\n      const { token } = res.data;\r\n      localStorage.setItem(\"jwtToken\", token);\r\n      // Set token to Auth header\r\n      setAuthToken(token);\r\n      // Decode token to get user data\r\n      const decoded = jwt_decode(token);\r\n      // console.log(\"decoded is: \", decoded);\r\n      // Set current user\r\n      dispatch(setCurrentUser(decoded));\r\n      history.push(\"/\");\r\n    })\r\n    .catch((err) =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data,\r\n      })\r\n    );\r\n};\r\n\r\n// Set logged in user\r\nexport const setCurrentUser = (decoded) => {\r\n  return {\r\n    type: SET_CURRENT_USER,\r\n    payload: decoded,\r\n  };\r\n};\r\n\r\n// User loading\r\nexport const setUserLoading = () => {\r\n  return {\r\n    type: USER_LOADING,\r\n  };\r\n};\r\n\r\n// Log user out\r\nexport const logoutUser = () => (dispatch) => {\r\n  // Remove token from local storage\r\n  localStorage.removeItem(\"jwtToken\");\r\n  // Remove auth header for future requests\r\n  setAuthToken(false);\r\n  // Set current user to empty object {} which will set isAuthenticaed to false\r\n  dispatch(setCurrentUser({}));\r\n};\r\n\r\n/* Tenant */\r\n// Register Tenant\r\nexport const registerTenant = (userData, history) => (dispatch) => {\r\n  let promise = new Promise((resolve, reject) => {\r\n    axios\r\n      .post(\"/api/users/createtenant\", userData)\r\n      .then((res) => {\r\n        dispatch({\r\n          type: GET_MESSAGE,\r\n          payload: \"Tenant Created\",\r\n        });\r\n        // history.push(\"/auditlist\");\r\n        resolve(userData);\r\n      }) // TODO: set up ViewTenants{AuditorName} or sth\r\n      .catch((error) => {\r\n        dispatch({\r\n          type: GET_ERRORS,\r\n          payload: error.response.data,\r\n        });\r\n        reject(\"Tenant Creation Failed\");\r\n      });\r\n  });\r\n\r\n  promise\r\n    .then((message) => {\r\n      sendEmail(message);\r\n    })\r\n    .catch((message) => {\r\n      console.log(message);\r\n    });\r\n};\r\n\r\nexport const deleteTenant = (data) => {\r\n  console.log(data);\r\n  axios.post(\"/api/users/deletetenant\", data).catch((err) => {\r\n    console.log(err);\r\n  });\r\n};\r\n\r\nexport const printMe = () => {\r\n  console.log(\"Inside print me\");\r\n};\r\n\r\nexport const sendEmail = (data) => {\r\n  console.log(\"In send email\");\r\n  axios\r\n    .post(\"/api/sendemail\", data)\r\n    .then((res) => {\r\n      console.log(\"email sent success\");\r\n      // dispatch({\r\n      //   type: GET_MESSAGE,\r\n      //   payload: \"Email Sent to Tenant\",\r\n      // });\r\n    })\r\n    .catch((err) => {\r\n      console.log(\"email sent failed, err: \", err);\r\n      // dispatch({\r\n      //   type: GET_ERRORS,\r\n      //   payload: \"Email Sent Failed\",\r\n      // });\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}