{"ast":null,"code":"'use strict';\n\nconst SMTPConnection = require('../smtp-connection');\n\nconst assign = require('../shared').assign;\n\nconst XOAuth2 = require('../xoauth2');\n\nconst EventEmitter = require('events');\n/**\n * Creates an element for the pool\n *\n * @constructor\n * @param {Object} options SMTPPool instance\n */\n\n\nclass PoolResource extends EventEmitter {\n  constructor(pool) {\n    super();\n    this.pool = pool;\n    this.options = pool.options;\n    this.logger = this.pool.logger;\n\n    if (this.options.auth) {\n      switch ((this.options.auth.type || '').toString().toUpperCase()) {\n        case 'OAUTH2':\n          {\n            let oauth2 = new XOAuth2(this.options.auth, this.logger);\n            oauth2.provisionCallback = this.pool.mailer && this.pool.mailer.get('oauth2_provision_cb') || oauth2.provisionCallback;\n            this.auth = {\n              type: 'OAUTH2',\n              user: this.options.auth.user,\n              oauth2,\n              method: 'XOAUTH2'\n            };\n            oauth2.on('token', token => this.pool.mailer.emit('token', token));\n            oauth2.on('error', err => this.emit('error', err));\n            break;\n          }\n\n        default:\n          if (!this.options.auth.user && !this.options.auth.pass) {\n            break;\n          }\n\n          this.auth = {\n            type: (this.options.auth.type || '').toString().toUpperCase() || 'LOGIN',\n            user: this.options.auth.user,\n            credentials: {\n              user: this.options.auth.user || '',\n              pass: this.options.auth.pass,\n              options: this.options.auth.options\n            },\n            method: (this.options.auth.method || '').trim().toUpperCase() || this.options.authMethod || false\n          };\n      }\n    }\n\n    this._connection = false;\n    this._connected = false;\n    this.messages = 0;\n    this.available = true;\n  }\n  /**\n   * Initiates a connection to the SMTP server\n   *\n   * @param {Function} callback Callback function to run once the connection is established or failed\n   */\n\n\n  connect(callback) {\n    this.pool.getSocket(this.options, (err, socketOptions) => {\n      if (err) {\n        return callback(err);\n      }\n\n      let returned = false;\n      let options = this.options;\n\n      if (socketOptions && socketOptions.connection) {\n        this.logger.info({\n          tnx: 'proxy',\n          remoteAddress: socketOptions.connection.remoteAddress,\n          remotePort: socketOptions.connection.remotePort,\n          destHost: options.host || '',\n          destPort: options.port || '',\n          action: 'connected'\n        }, 'Using proxied socket from %s:%s to %s:%s', socketOptions.connection.remoteAddress, socketOptions.connection.remotePort, options.host || '', options.port || '');\n        options = assign(false, options);\n        Object.keys(socketOptions).forEach(key => {\n          options[key] = socketOptions[key];\n        });\n      }\n\n      this.connection = new SMTPConnection(options);\n      this.connection.once('error', err => {\n        this.emit('error', err);\n\n        if (returned) {\n          return;\n        }\n\n        returned = true;\n        return callback(err);\n      });\n      this.connection.once('end', () => {\n        this.close();\n\n        if (returned) {\n          return;\n        }\n\n        returned = true;\n        let timer = setTimeout(() => {\n          if (returned) {\n            return;\n          } // still have not returned, this means we have an unexpected connection close\n\n\n          let err = new Error('Unexpected socket close');\n\n          if (this.connection && this.connection._socket && this.connection._socket.upgrading) {\n            // starttls connection errors\n            err.code = 'ETLS';\n          }\n\n          callback(err);\n        }, 1000);\n\n        try {\n          timer.unref();\n        } catch (E) {// Ignore. Happens on envs with non-node timer implementation\n        }\n      });\n      this.connection.connect(() => {\n        if (returned) {\n          return;\n        }\n\n        if (this.auth && (this.connection.allowsAuth || options.forceAuth)) {\n          this.connection.login(this.auth, err => {\n            if (returned) {\n              return;\n            }\n\n            returned = true;\n\n            if (err) {\n              this.connection.close();\n              this.emit('error', err);\n              return callback(err);\n            }\n\n            this._connected = true;\n            callback(null, true);\n          });\n        } else {\n          returned = true;\n          this._connected = true;\n          return callback(null, true);\n        }\n      });\n    });\n  }\n  /**\n   * Sends an e-mail to be sent using the selected settings\n   *\n   * @param {Object} mail Mail object\n   * @param {Function} callback Callback function\n   */\n\n\n  send(mail, callback) {\n    if (!this._connected) {\n      return this.connect(err => {\n        if (err) {\n          return callback(err);\n        }\n\n        return this.send(mail, callback);\n      });\n    }\n\n    let envelope = mail.message.getEnvelope();\n    let messageId = mail.message.messageId();\n    let recipients = [].concat(envelope.to || []);\n\n    if (recipients.length > 3) {\n      recipients.push('...and ' + recipients.splice(2).length + ' more');\n    }\n\n    this.logger.info({\n      tnx: 'send',\n      messageId,\n      cid: this.id\n    }, 'Sending message %s using #%s to <%s>', messageId, this.id, recipients.join(', '));\n\n    if (mail.data.dsn) {\n      envelope.dsn = mail.data.dsn;\n    }\n\n    this.connection.send(envelope, mail.message.createReadStream(), (err, info) => {\n      this.messages++;\n\n      if (err) {\n        this.connection.close();\n        this.emit('error', err);\n        return callback(err);\n      }\n\n      info.envelope = {\n        from: envelope.from,\n        to: envelope.to\n      };\n      info.messageId = messageId;\n      setImmediate(() => {\n        let err;\n\n        if (this.messages >= this.options.maxMessages) {\n          err = new Error('Resource exhausted');\n          err.code = 'EMAXLIMIT';\n          this.connection.close();\n          this.emit('error', err);\n        } else {\n          this.pool._checkRateLimit(() => {\n            this.available = true;\n            this.emit('available');\n          });\n        }\n      });\n      callback(null, info);\n    });\n  }\n  /**\n   * Closes the connection\n   */\n\n\n  close() {\n    this._connected = false;\n\n    if (this.auth && this.auth.oauth2) {\n      this.auth.oauth2.removeAllListeners();\n    }\n\n    if (this.connection) {\n      this.connection.close();\n    }\n\n    this.emit('close');\n  }\n\n}\n\nmodule.exports = PoolResource;","map":{"version":3,"sources":["C:/Users/tanka/Desktop/ESC/Project/SingHealthApp/singhealth2.0/node_modules/nodemailer/lib/smtp-pool/pool-resource.js"],"names":["SMTPConnection","require","assign","XOAuth2","EventEmitter","PoolResource","constructor","pool","options","logger","auth","type","toString","toUpperCase","oauth2","provisionCallback","mailer","get","user","method","on","token","emit","err","pass","credentials","trim","authMethod","_connection","_connected","messages","available","connect","callback","getSocket","socketOptions","returned","connection","info","tnx","remoteAddress","remotePort","destHost","host","destPort","port","action","Object","keys","forEach","key","once","close","timer","setTimeout","Error","_socket","upgrading","code","unref","E","allowsAuth","forceAuth","login","send","mail","envelope","message","getEnvelope","messageId","recipients","concat","to","length","push","splice","cid","id","join","data","dsn","createReadStream","from","setImmediate","maxMessages","_checkRateLimit","removeAllListeners","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst SMTPConnection = require('../smtp-connection');\nconst assign = require('../shared').assign;\nconst XOAuth2 = require('../xoauth2');\nconst EventEmitter = require('events');\n\n/**\n * Creates an element for the pool\n *\n * @constructor\n * @param {Object} options SMTPPool instance\n */\nclass PoolResource extends EventEmitter {\n    constructor(pool) {\n        super();\n\n        this.pool = pool;\n        this.options = pool.options;\n        this.logger = this.pool.logger;\n\n        if (this.options.auth) {\n            switch ((this.options.auth.type || '').toString().toUpperCase()) {\n                case 'OAUTH2': {\n                    let oauth2 = new XOAuth2(this.options.auth, this.logger);\n                    oauth2.provisionCallback = (this.pool.mailer && this.pool.mailer.get('oauth2_provision_cb')) || oauth2.provisionCallback;\n                    this.auth = {\n                        type: 'OAUTH2',\n                        user: this.options.auth.user,\n                        oauth2,\n                        method: 'XOAUTH2'\n                    };\n                    oauth2.on('token', token => this.pool.mailer.emit('token', token));\n                    oauth2.on('error', err => this.emit('error', err));\n                    break;\n                }\n                default:\n                    if (!this.options.auth.user && !this.options.auth.pass) {\n                        break;\n                    }\n                    this.auth = {\n                        type: (this.options.auth.type || '').toString().toUpperCase() || 'LOGIN',\n                        user: this.options.auth.user,\n                        credentials: {\n                            user: this.options.auth.user || '',\n                            pass: this.options.auth.pass,\n                            options: this.options.auth.options\n                        },\n                        method: (this.options.auth.method || '').trim().toUpperCase() || this.options.authMethod || false\n                    };\n            }\n        }\n\n        this._connection = false;\n        this._connected = false;\n\n        this.messages = 0;\n        this.available = true;\n    }\n\n    /**\n     * Initiates a connection to the SMTP server\n     *\n     * @param {Function} callback Callback function to run once the connection is established or failed\n     */\n    connect(callback) {\n        this.pool.getSocket(this.options, (err, socketOptions) => {\n            if (err) {\n                return callback(err);\n            }\n\n            let returned = false;\n            let options = this.options;\n            if (socketOptions && socketOptions.connection) {\n                this.logger.info(\n                    {\n                        tnx: 'proxy',\n                        remoteAddress: socketOptions.connection.remoteAddress,\n                        remotePort: socketOptions.connection.remotePort,\n                        destHost: options.host || '',\n                        destPort: options.port || '',\n                        action: 'connected'\n                    },\n                    'Using proxied socket from %s:%s to %s:%s',\n                    socketOptions.connection.remoteAddress,\n                    socketOptions.connection.remotePort,\n                    options.host || '',\n                    options.port || ''\n                );\n\n                options = assign(false, options);\n                Object.keys(socketOptions).forEach(key => {\n                    options[key] = socketOptions[key];\n                });\n            }\n\n            this.connection = new SMTPConnection(options);\n\n            this.connection.once('error', err => {\n                this.emit('error', err);\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                return callback(err);\n            });\n\n            this.connection.once('end', () => {\n                this.close();\n                if (returned) {\n                    return;\n                }\n                returned = true;\n\n                let timer = setTimeout(() => {\n                    if (returned) {\n                        return;\n                    }\n                    // still have not returned, this means we have an unexpected connection close\n                    let err = new Error('Unexpected socket close');\n                    if (this.connection && this.connection._socket && this.connection._socket.upgrading) {\n                        // starttls connection errors\n                        err.code = 'ETLS';\n                    }\n                    callback(err);\n                }, 1000);\n\n                try {\n                    timer.unref();\n                } catch (E) {\n                    // Ignore. Happens on envs with non-node timer implementation\n                }\n            });\n\n            this.connection.connect(() => {\n                if (returned) {\n                    return;\n                }\n\n                if (this.auth && (this.connection.allowsAuth || options.forceAuth)) {\n                    this.connection.login(this.auth, err => {\n                        if (returned) {\n                            return;\n                        }\n                        returned = true;\n\n                        if (err) {\n                            this.connection.close();\n                            this.emit('error', err);\n                            return callback(err);\n                        }\n\n                        this._connected = true;\n                        callback(null, true);\n                    });\n                } else {\n                    returned = true;\n                    this._connected = true;\n                    return callback(null, true);\n                }\n            });\n        });\n    }\n\n    /**\n     * Sends an e-mail to be sent using the selected settings\n     *\n     * @param {Object} mail Mail object\n     * @param {Function} callback Callback function\n     */\n    send(mail, callback) {\n        if (!this._connected) {\n            return this.connect(err => {\n                if (err) {\n                    return callback(err);\n                }\n                return this.send(mail, callback);\n            });\n        }\n\n        let envelope = mail.message.getEnvelope();\n        let messageId = mail.message.messageId();\n\n        let recipients = [].concat(envelope.to || []);\n        if (recipients.length > 3) {\n            recipients.push('...and ' + recipients.splice(2).length + ' more');\n        }\n        this.logger.info(\n            {\n                tnx: 'send',\n                messageId,\n                cid: this.id\n            },\n            'Sending message %s using #%s to <%s>',\n            messageId,\n            this.id,\n            recipients.join(', ')\n        );\n\n        if (mail.data.dsn) {\n            envelope.dsn = mail.data.dsn;\n        }\n\n        this.connection.send(envelope, mail.message.createReadStream(), (err, info) => {\n            this.messages++;\n\n            if (err) {\n                this.connection.close();\n                this.emit('error', err);\n                return callback(err);\n            }\n\n            info.envelope = {\n                from: envelope.from,\n                to: envelope.to\n            };\n            info.messageId = messageId;\n\n            setImmediate(() => {\n                let err;\n                if (this.messages >= this.options.maxMessages) {\n                    err = new Error('Resource exhausted');\n                    err.code = 'EMAXLIMIT';\n                    this.connection.close();\n                    this.emit('error', err);\n                } else {\n                    this.pool._checkRateLimit(() => {\n                        this.available = true;\n                        this.emit('available');\n                    });\n                }\n            });\n\n            callback(null, info);\n        });\n    }\n\n    /**\n     * Closes the connection\n     */\n    close() {\n        this._connected = false;\n        if (this.auth && this.auth.oauth2) {\n            this.auth.oauth2.removeAllListeners();\n        }\n        if (this.connection) {\n            this.connection.close();\n        }\n        this.emit('close');\n    }\n}\n\nmodule.exports = PoolResource;\n"]},"metadata":{},"sourceType":"script"}