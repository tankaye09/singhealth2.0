{"ast":null,"code":"'use strict';\n\nconst packageData = require('../../package.json');\n\nconst shared = require('../shared');\n/**\n * Generates a Transport object to generate JSON output\n *\n * @constructor\n * @param {Object} optional config parameter\n */\n\n\nclass JSONTransport {\n  constructor(options) {\n    options = options || {};\n    this.options = options || {};\n    this.name = 'JSONTransport';\n    this.version = packageData.version;\n    this.logger = shared.getLogger(this.options, {\n      component: this.options.component || 'json-transport'\n    });\n  }\n  /**\n   * <p>Compiles a mailcomposer message and forwards it to handler that sends it.</p>\n   *\n   * @param {Object} emailMessage MailComposer object\n   * @param {Function} callback Callback function to run when the sending is completed\n   */\n\n\n  send(mail, done) {\n    // Sendmail strips this header line by itself\n    mail.message.keepBcc = true;\n    let envelope = mail.data.envelope || mail.message.getEnvelope();\n    let messageId = mail.message.messageId();\n    let recipients = [].concat(envelope.to || []);\n\n    if (recipients.length > 3) {\n      recipients.push('...and ' + recipients.splice(2).length + ' more');\n    }\n\n    this.logger.info({\n      tnx: 'send',\n      messageId\n    }, 'Composing JSON structure of %s to <%s>', messageId, recipients.join(', '));\n    setImmediate(() => {\n      mail.normalize((err, data) => {\n        if (err) {\n          this.logger.error({\n            err,\n            tnx: 'send',\n            messageId\n          }, 'Failed building JSON structure for %s. %s', messageId, err.message);\n          return done(err);\n        }\n\n        delete data.envelope;\n        delete data.normalizedHeaders;\n        return done(null, {\n          envelope,\n          messageId,\n          message: this.options.skipEncoding ? data : JSON.stringify(data)\n        });\n      });\n    });\n  }\n\n}\n\nmodule.exports = JSONTransport;","map":{"version":3,"sources":["C:/Users/tanka/Desktop/ESC/Project/SingHealthApp/singhealth2.0/node_modules/nodemailer/lib/json-transport/index.js"],"names":["packageData","require","shared","JSONTransport","constructor","options","name","version","logger","getLogger","component","send","mail","done","message","keepBcc","envelope","data","getEnvelope","messageId","recipients","concat","to","length","push","splice","info","tnx","join","setImmediate","normalize","err","error","normalizedHeaders","skipEncoding","JSON","stringify","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,WAAW,GAAGC,OAAO,CAAC,oBAAD,CAA3B;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,WAAD,CAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAME,aAAN,CAAoB;AAChBC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjBA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAEA,SAAKA,OAAL,GAAeA,OAAO,IAAI,EAA1B;AAEA,SAAKC,IAAL,GAAY,eAAZ;AACA,SAAKC,OAAL,GAAeP,WAAW,CAACO,OAA3B;AAEA,SAAKC,MAAL,GAAcN,MAAM,CAACO,SAAP,CAAiB,KAAKJ,OAAtB,EAA+B;AACzCK,MAAAA,SAAS,EAAE,KAAKL,OAAL,CAAaK,SAAb,IAA0B;AADI,KAA/B,CAAd;AAGH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,IAAI,CAACC,IAAD,EAAOC,IAAP,EAAa;AACb;AACAD,IAAAA,IAAI,CAACE,OAAL,CAAaC,OAAb,GAAuB,IAAvB;AAEA,QAAIC,QAAQ,GAAGJ,IAAI,CAACK,IAAL,CAAUD,QAAV,IAAsBJ,IAAI,CAACE,OAAL,CAAaI,WAAb,EAArC;AACA,QAAIC,SAAS,GAAGP,IAAI,CAACE,OAAL,CAAaK,SAAb,EAAhB;AAEA,QAAIC,UAAU,GAAG,GAAGC,MAAH,CAAUL,QAAQ,CAACM,EAAT,IAAe,EAAzB,CAAjB;;AACA,QAAIF,UAAU,CAACG,MAAX,GAAoB,CAAxB,EAA2B;AACvBH,MAAAA,UAAU,CAACI,IAAX,CAAgB,YAAYJ,UAAU,CAACK,MAAX,CAAkB,CAAlB,EAAqBF,MAAjC,GAA0C,OAA1D;AACH;;AACD,SAAKf,MAAL,CAAYkB,IAAZ,CACI;AACIC,MAAAA,GAAG,EAAE,MADT;AAEIR,MAAAA;AAFJ,KADJ,EAKI,wCALJ,EAMIA,SANJ,EAOIC,UAAU,CAACQ,IAAX,CAAgB,IAAhB,CAPJ;AAUAC,IAAAA,YAAY,CAAC,MAAM;AACfjB,MAAAA,IAAI,CAACkB,SAAL,CAAe,CAACC,GAAD,EAAMd,IAAN,KAAe;AAC1B,YAAIc,GAAJ,EAAS;AACL,eAAKvB,MAAL,CAAYwB,KAAZ,CACI;AACID,YAAAA,GADJ;AAEIJ,YAAAA,GAAG,EAAE,MAFT;AAGIR,YAAAA;AAHJ,WADJ,EAMI,2CANJ,EAOIA,SAPJ,EAQIY,GAAG,CAACjB,OARR;AAUA,iBAAOD,IAAI,CAACkB,GAAD,CAAX;AACH;;AAED,eAAOd,IAAI,CAACD,QAAZ;AACA,eAAOC,IAAI,CAACgB,iBAAZ;AAEA,eAAOpB,IAAI,CAAC,IAAD,EAAO;AACdG,UAAAA,QADc;AAEdG,UAAAA,SAFc;AAGdL,UAAAA,OAAO,EAAE,KAAKT,OAAL,CAAa6B,YAAb,GAA4BjB,IAA5B,GAAmCkB,IAAI,CAACC,SAAL,CAAenB,IAAf;AAH9B,SAAP,CAAX;AAKH,OAvBD;AAwBH,KAzBW,CAAZ;AA0BH;;AAnEe;;AAsEpBoB,MAAM,CAACC,OAAP,GAAiBnC,aAAjB","sourcesContent":["'use strict';\n\nconst packageData = require('../../package.json');\nconst shared = require('../shared');\n\n/**\n * Generates a Transport object to generate JSON output\n *\n * @constructor\n * @param {Object} optional config parameter\n */\nclass JSONTransport {\n    constructor(options) {\n        options = options || {};\n\n        this.options = options || {};\n\n        this.name = 'JSONTransport';\n        this.version = packageData.version;\n\n        this.logger = shared.getLogger(this.options, {\n            component: this.options.component || 'json-transport'\n        });\n    }\n\n    /**\n     * <p>Compiles a mailcomposer message and forwards it to handler that sends it.</p>\n     *\n     * @param {Object} emailMessage MailComposer object\n     * @param {Function} callback Callback function to run when the sending is completed\n     */\n    send(mail, done) {\n        // Sendmail strips this header line by itself\n        mail.message.keepBcc = true;\n\n        let envelope = mail.data.envelope || mail.message.getEnvelope();\n        let messageId = mail.message.messageId();\n\n        let recipients = [].concat(envelope.to || []);\n        if (recipients.length > 3) {\n            recipients.push('...and ' + recipients.splice(2).length + ' more');\n        }\n        this.logger.info(\n            {\n                tnx: 'send',\n                messageId\n            },\n            'Composing JSON structure of %s to <%s>',\n            messageId,\n            recipients.join(', ')\n        );\n\n        setImmediate(() => {\n            mail.normalize((err, data) => {\n                if (err) {\n                    this.logger.error(\n                        {\n                            err,\n                            tnx: 'send',\n                            messageId\n                        },\n                        'Failed building JSON structure for %s. %s',\n                        messageId,\n                        err.message\n                    );\n                    return done(err);\n                }\n\n                delete data.envelope;\n                delete data.normalizedHeaders;\n\n                return done(null, {\n                    envelope,\n                    messageId,\n                    message: this.options.skipEncoding ? data : JSON.stringify(data)\n                });\n            });\n        });\n    }\n}\n\nmodule.exports = JSONTransport;\n"]},"metadata":{},"sourceType":"script"}