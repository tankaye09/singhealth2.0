[{"C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\index.js":"1","C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\reportWebVitals.js":"2","C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\App.js":"3","C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\utils\\setAuthToken.js":"4","C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\components\\private-route\\StaffRoute.js":"5","C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\components\\private-route\\TenantRoute.js":"6","C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\components\\tenant\\TenantHome.js":"7","C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\components\\tenant\\EditAudit.js":"8","C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\store.js":"9","C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\components\\Checklist.js":"10","C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\actions\\authActions.js":"11","C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\components\\AuditList.js":"12","C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\components\\TenantList.js":"13","C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\components\\ChecklistNonFB.js":"14","C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\components\\ViewAudit.js":"15","C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\components\\MessageDisplay.js":"16","C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\components\\layout\\Navbar.js":"17","C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\components\\auth\\Register.js":"18","C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\components\\auth\\CreateTenant.js":"19","C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\components\\auth\\Login.js":"20","C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\data\\AuditData.ts":"21","C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\actions\\auditActions.js":"22","C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\components\\layout\\RightMenuLoggedIn.js":"23","C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\components\\layout\\RightMenu.js":"24","C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\actions\\types.js":"25","C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\actions\\tenantActions.js":"26","C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\actions\\errorActions.js":"27","C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\components\\layout\\LeftMenu.js":"28","C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\reducers\\index.js":"29","C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\reducers\\tenantReducer.js":"30","C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\reducers\\messageReducer.js":"31","C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\reducers\\authReducer.js":"32","C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\reducers\\errorReducer.js":"33"},{"size":517,"mtime":1616231467184,"results":"34","hashOfConfig":"35"},{"size":375,"mtime":1616231467186,"results":"36","hashOfConfig":"35"},{"size":3147,"mtime":1617887788696,"results":"37","hashOfConfig":"35"},{"size":346,"mtime":1616231467189,"results":"38","hashOfConfig":"35"},{"size":839,"mtime":1617351031334,"results":"39","hashOfConfig":"35"},{"size":916,"mtime":1617351031335,"results":"40","hashOfConfig":"35"},{"size":156,"mtime":1617351031338,"results":"41","hashOfConfig":"35"},{"size":268,"mtime":1617351031336,"results":"42","hashOfConfig":"35"},{"size":416,"mtime":1617887788721,"results":"43","hashOfConfig":"35"},{"size":10881,"mtime":1617893432945,"results":"44","hashOfConfig":"35"},{"size":2822,"mtime":1617887788697,"results":"45","hashOfConfig":"35"},{"size":2887,"mtime":1617887788700,"results":"46","hashOfConfig":"35"},{"size":6258,"mtime":1617890239912,"results":"47","hashOfConfig":"35"},{"size":9352,"mtime":1617887788701,"results":"48","hashOfConfig":"35"},{"size":4179,"mtime":1617887788703,"results":"49","hashOfConfig":"35"},{"size":2087,"mtime":1617887788702,"results":"50","hashOfConfig":"35"},{"size":1829,"mtime":1617887788708,"results":"51","hashOfConfig":"35"},{"size":8261,"mtime":1617887788705,"results":"52","hashOfConfig":"35"},{"size":6703,"mtime":1617887788704,"results":"53","hashOfConfig":"35"},{"size":5518,"mtime":1617887788705,"results":"54","hashOfConfig":"35"},{"size":1353,"mtime":1616231492718,"results":"55","hashOfConfig":"35"},{"size":466,"mtime":1617887788697,"results":"56","hashOfConfig":"35"},{"size":1104,"mtime":1617351031330,"results":"57","hashOfConfig":"35"},{"size":1014,"mtime":1617351031328,"results":"58","hashOfConfig":"35"},{"size":335,"mtime":1617887788699,"results":"59","hashOfConfig":"35"},{"size":687,"mtime":1617887788698,"results":"60","hashOfConfig":"35"},{"size":231,"mtime":1617887788698,"results":"61","hashOfConfig":"35"},{"size":2423,"mtime":1617887788707,"results":"62","hashOfConfig":"35"},{"size":367,"mtime":1617887788711,"results":"63","hashOfConfig":"35"},{"size":385,"mtime":1617887788720,"results":"64","hashOfConfig":"35"},{"size":439,"mtime":1617887788720,"results":"65","hashOfConfig":"35"},{"size":655,"mtime":1616231467185,"results":"66","hashOfConfig":"35"},{"size":383,"mtime":1617887788711,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"17v4gd9",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"70"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"70"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"70"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"70"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"70"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"70"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"70"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"70"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"70"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"70"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"70"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"70"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\index.js",[],["149","150"],"C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\reportWebVitals.js",[],"C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\App.js",["151"],"import React, { Component } from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport \"./App.css\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport setAuthToken from \"./utils/setAuthToken\";\r\nimport Recaptcha from \"react-recaptcha\";\r\n\r\nimport { setCurrentUser, logoutUser } from \"./actions/authActions\";\r\n\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store\";\r\n\r\nimport StaffRoute from \"./components/private-route/StaffRoute\";\r\nimport TenantRoute from \"./components/private-route/TenantRoute\";\r\n\r\nimport Navbar from \"./components/layout/Navbar\";\r\n// Login Flow\r\nimport Login from \"./components/auth/Login\";\r\nimport Register from \"./components/auth/Register\";\r\n//Staff Flow\r\nimport AuditList from \"./components/AuditList\";\r\nimport Directory from \"./components/TenantList\";\r\nimport Checklist from \"./components/Checklist\";\r\nimport ChecklistNonFB from \"./components/ChecklistNonFB\";\r\nimport CreateTenant from \"./components/auth/CreateTenant\";\r\nimport ViewAudit from \"./components/ViewAudit\";\r\n//Tenant Flow\r\nimport TenantHome from \"./components/tenant/TenantHome\";\r\nimport TenantEditAudit from \"./components/tenant/EditAudit\";\r\n//Error warning\r\nimport MessageDisplay from \"./components/MessageDisplay\";\r\n\r\n// Check for token to keep user logged in\r\nif (localStorage.jwtToken) {\r\n  // Set auth token header auth\r\n  const token = localStorage.jwtToken;\r\n  setAuthToken(token);\r\n  // Decode token and get user info and exp\r\n  const decoded = jwt_decode(token);\r\n  // Set user and isAuthenticated\r\n  store.dispatch(setCurrentUser(decoded));\r\n\r\n  // Check for expired token\r\n  const currentTime = Date.now() / 1000; // to get in milliseconds\r\n  if (decoded.exp < currentTime) {\r\n    // Logout user\r\n    store.dispatch(logoutUser());\r\n\r\n    // Redirect to login\r\n    window.location.href = \"./login\";\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Provider store={store}>\r\n        <MessageDisplay />\r\n        <Router>\r\n          <div className=\"App\">\r\n            <Navbar />\r\n            <Route exact path=\"/\" component={Login} />\r\n            <Route exact path=\"/register\" component={Register} />\r\n            <Route exact path=\"/login\" component={Login} />\r\n            <Switch>\r\n              <StaffRoute exact path=\"/auditlist\" component={AuditList} />\r\n              <StaffRoute exact path=\"/checklistFB\" component={Checklist} />\r\n              <StaffRoute\r\n                exact\r\n                path=\"/checklistNonFB\"\r\n                component={ChecklistNonFB}\r\n              />\r\n              <StaffRoute exact path=\"/directory\" component={Directory} />\r\n              <StaffRoute exact path=\"/createtenant\" component={CreateTenant} />\r\n              <StaffRoute exact path=\"/viewaudit\" component={ViewAudit} />\r\n\r\n              <TenantRoute exact path=\"/tenant\" component={TenantHome} />\r\n              <TenantRoute\r\n                exact\r\n                path=\"/tenant/editAudit\"\r\n                component={TenantEditAudit}\r\n              />\r\n            </Switch>\r\n          </div>\r\n        </Router>\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\utils\\setAuthToken.js",[],"C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\components\\private-route\\StaffRoute.js",["152","153"],"import React, { Component } from \"react\";\r\nimport { Link, Route, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst StaffRoute = ({ component: Component, auth, ...rest }) => (\r\n  <Route\r\n    {...rest}\r\n    render={(props) =>\r\n      auth.isAuthenticated === true ? (\r\n        auth.user.usertype === \"staff\" ? ( // check for staff usertype\r\n          <Component {...props} />\r\n        ) : (\r\n          <div>\r\n            <h1>Sorry, you are not authorised to view this page</h1>\r\n          </div>\r\n        )\r\n      ) : (\r\n        <Redirect to=\"/login\" />\r\n      )\r\n    }\r\n  />\r\n);\r\n\r\nStaffRoute.propTypes = {\r\n  auth: PropTypes.object.isRequired,\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  auth: state.auth,\r\n});\r\nexport default connect(mapStateToProps)(StaffRoute);\r\n","C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\components\\private-route\\TenantRoute.js",["154","155"],"import React, { Component } from \"react\";\r\nimport { Link, Route, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst TenantRoute = ({ component: Component, auth, ...rest }) => (\r\n  <Route\r\n    {...rest}\r\n    render={(props) =>\r\n      auth.isAuthenticated === true ? (\r\n        auth.user.usertype === \"tenant\" ? ( // check for tenant usertype, maybe can change such that both tenant and staff can view tenant pages\r\n          <Component {...props} />\r\n        ) : (\r\n          <div>\r\n            <h1>Sorry, you are not authorised to view this page</h1>\r\n          </div>\r\n        )\r\n      ) : (\r\n        <Redirect to=\"/login\" />\r\n      )\r\n    }\r\n  />\r\n);\r\n\r\nTenantRoute.propTypes = {\r\n  auth: PropTypes.object.isRequired,\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  auth: state.auth,\r\n});\r\nexport default connect(mapStateToProps)(TenantRoute);\r\n","C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\components\\tenant\\TenantHome.js",[],"C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\components\\tenant\\EditAudit.js",[],"C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\store.js",[],"C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\components\\Checklist.js",["156","157"],"import \"../App.css\";\r\nimport {\r\n  Collapse,\r\n  Divider,\r\n  List,\r\n  Input,\r\n  Checkbox,\r\n  Button,\r\n  Modal,\r\n  Form,\r\n  DatePicker,\r\n} from \"antd\";\r\nimport React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport importJSON from \"../data/questionsDict.json\";\r\nimport { submit, display } from \"../actions/auditActions.js\";\r\nconst fileUpload = require(\"fuctbase64\");\r\nconst Fb = importJSON.fb;\r\nconst { Panel } = Collapse;\r\n\r\n// TODO: Take score from json file => Update the score, replace the json file\r\n\r\nclass Checklist extends Component {\r\n  // componentWillMount = () => {\r\n  //   this.selectedCheckboxes = new Set();\r\n  // };\r\n\r\n  // toggleCheckbox = (label) => {\r\n  //   if (this.selectedCheckboxes.has(label)) {\r\n  //     this.selectedCheckboxes.delete(label);\r\n  //   } else {\r\n  //     this.selectedCheckboxes.add(label);\r\n  //   }\r\n  // };\r\n\r\n  // handleFormSubmit = (formSubmitEvent) => {\r\n  //   formSubmitEvent.preventDefault();\r\n\r\n  //   for (const checkbox of this.selectedCheckboxes) {\r\n  //     console.log(checkbox, \"is selected.\");\r\n  //   }\r\n  // };\r\n\r\n  // onFinish = () => {\r\n  //   var newState = [];\r\n  //   for (var i = 0; i < this.state.catCounts.length; i++) {\r\n  //     newState.push(this.state.catCounts[i] / 2);\r\n  //   }\r\n  //   const submitData = {\r\n  //     catCounts: newState,\r\n  //   };\r\n\r\n  //   console.log(submitData);\r\n  // };\r\n\r\n  submitAudit = () => {\r\n    console.log(this.state);\r\n    submit({\r\n      type: \"FB\",\r\n      catCounts: this.state.catCounts,\r\n      total_score:\r\n        this.state.catCounts[0] +\r\n        this.state.catCounts[1] +\r\n        this.state.catCounts[2] +\r\n        this.state.catCounts[3] +\r\n        this.state.catCounts[4],\r\n      image: this.state.image,\r\n      date: this.state.date,\r\n      description: this.state.description,\r\n      location: this.state.location,\r\n    });\r\n    this.showAuditModal();\r\n  };\r\n\r\n  onChange = (e) => {\r\n    this.setState({ [e.target.id]: e.target.value });\r\n  };\r\n\r\n  onChangeDate = (date, dateString) => {\r\n    this.setState({ date: date });\r\n  };\r\n\r\n  fileSelectedHandler = (event) => {\r\n    // console.log(event.target.files[0]);\r\n    fileUpload(event).then((data) => {\r\n      // console.log(\"base64: \", data.base64);\r\n      this.setState({\r\n        image: data.base64,\r\n      });\r\n    });\r\n  };\r\n\r\n  showAuditModal = () => {\r\n    this.setState({\r\n      visibleAudit: true,\r\n    });\r\n  };\r\n\r\n  showFormModal = () => {\r\n    this.setState({\r\n      visibleForm: true,\r\n    });\r\n  };\r\n\r\n  showConfirmModal = () => {\r\n    this.setState({\r\n      visibleConfirm: true,\r\n    });\r\n  };\r\n\r\n  handleAuditOk = (e) => {\r\n    console.log(e);\r\n    this.setState({\r\n      visibleAudit: false,\r\n    });\r\n  };\r\n\r\n  handleFormOk = (e) => {\r\n    console.log(e);\r\n    this.showConfirmModal();\r\n  };\r\n\r\n  handleUploadOk = (e) => {\r\n    console.log(e);\r\n    this.setState({\r\n      visibleConfirm: false,\r\n    });\r\n  };\r\n\r\n  handleCancel = (e) => {\r\n    console.log(e);\r\n    this.setState({\r\n      visibleForm: false,\r\n    });\r\n  };\r\n\r\n  createCheckbox = (label, catIndex) => (\r\n    <Checkbox\r\n      label={label}\r\n      // handleCheckboxChange={this.toggleCheckbox}\r\n      key={label}\r\n      onChange={(e) => this.handleCount(e, catIndex)}\r\n    />\r\n  );\r\n  handlegcCheckCount = (e) => {\r\n    const { checked, type } = e.target;\r\n    if (type === \"checkbox\" && checked === true) {\r\n      this.setState((state) => state.gc_count++);\r\n    } else {\r\n      this.setState((state) => state.gc_count--);\r\n    }\r\n  };\r\n  //for food hygiene cat\r\n  createfoodCheckbox = (label) => (\r\n    <Checkbox\r\n      label={label}\r\n      handleCheckboxChange={this.toggleCheckbox}\r\n      key={label}\r\n      onChange={(e) => this.handlefoodCheckCount(e)}\r\n    />\r\n  );\r\n  handlefoodCheckCount = (e) => {\r\n    const { checked, type } = e.target;\r\n    if (type === \"checkbox\" && checked === true) {\r\n      this.setState((state) => state.food_count++);\r\n    } else {\r\n      this.setState((state) => state.food_count--);\r\n    }\r\n  };\r\n\r\n  // not exactly dynamic\r\n  state = {\r\n    checked: false,\r\n    catCounts: [0, 0, 0, 0, 0], // counts[0]: for Professionalism & Staff Hygiene (10%), counts[1]: for Housekeeping & General Cleanliness (20%)\r\n    image: null,\r\n    date: null,\r\n    description: \"\",\r\n    location: \"\",\r\n    visibleForm: false,\r\n    visibleConfirm: false,\r\n    visibleAudit: false,\r\n    tenantInfo: {},\r\n    type: \"FB\",\r\n  };\r\n  handleCount = (e, catIndex) => {\r\n    const { checked, type } = e.target;\r\n    switch (catIndex) {\r\n      case 0:\r\n        if (type === \"checkbox\" && checked === true) {\r\n          this.setState((state) => state.catCounts[0]++);\r\n        } else {\r\n          this.setState((state) => state.catCounts[0]--);\r\n        }\r\n        break;\r\n      case 1:\r\n        if (type === \"checkbox\" && checked === true) {\r\n          this.setState((state) => state.catCounts[1]++);\r\n        } else {\r\n          this.setState((state) => state.catCounts[1]--);\r\n        }\r\n        break;\r\n      case 2:\r\n        if (type === \"checkbox\" && checked === true) {\r\n          this.setState((state) => state.catCounts[2]++);\r\n        } else {\r\n          this.setState((state) => state.catCounts[2]--);\r\n        }\r\n        break;\r\n      case 3:\r\n        if (type === \"checkbox\" && checked === true) {\r\n          this.setState((state) => state.catCounts[3]++);\r\n        } else {\r\n          this.setState((state) => state.catCounts[3]--);\r\n        }\r\n        break;\r\n      case 4:\r\n        if (type === \"checkbox\" && checked === true) {\r\n          this.setState((state) => state.catCounts[4]++);\r\n        } else {\r\n          this.setState((state) => state.catCounts[4]--);\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"table\">\r\n        <h3>\r\n          F&B Audit for Tenant at Address:{\" \"}\r\n          <b>\r\n            {this.props.tenantInfo !== null ? this.props.tenantInfo.record._id !== null\r\n              ? this.props.tenantInfo.record._id\r\n              : \"\" : \"\"}\r\n          </b>\r\n        </h3>\r\n\r\n        {Fb.map((cat, catIndex) => {\r\n          // var catScore = cat.score;\r\n          return (\r\n            // Category\r\n            <Collapse defaultActiveKey={[\"1\"]}>\r\n              <Panel\r\n                header={<div catIndex={catIndex}>{cat.name}</div>}\r\n                key={catIndex + 1}\r\n                className=\"bg-orange\"\r\n              >\r\n                <div catIndex={catIndex}>\r\n                  {cat.subcategories.map((subCat, subCatIndex) => {\r\n                    return (\r\n                      // SubCategory\r\n                      <Collapse defaultActiveKey={[\"1\"]}>\r\n                        <Panel\r\n                          header={\r\n                            <div subCatIndex={subCatIndex}>{subCat.name}</div>\r\n                          }\r\n                          key={subCatIndex + 1}\r\n                          className=\"bg-orange\"\r\n                        >\r\n                          <List\r\n                            dataSource={subCat.questions} // Questions\r\n                            renderItem={(item) => (\r\n                              <List.Item>\r\n                                <div className=\"checklist-item\">\r\n                                  <div className=\"create-audit-row\">{item}</div>\r\n                                  <div className=\"checklist-checkbox\">\r\n                                    {this.createCheckbox(item, catIndex)}\r\n                                  </div>\r\n                                </div>\r\n                              </List.Item>\r\n                            )}\r\n                          />\r\n                        </Panel>\r\n                      </Collapse>\r\n                    );\r\n                  })}\r\n                </div>\r\n                <div>Score: {this.state.catCounts[catIndex] / 2}</div>\r\n              </Panel>\r\n            </Collapse>\r\n          );\r\n        })}\r\n        <Button type=\"primary\" onClick={this.showFormModal}>\r\n          Upload Photo\r\n        </Button>\r\n        <Modal\r\n          title=\"Upload Photo\"\r\n          visible={this.state.visibleForm}\r\n          onOk={this.handleFormOk}\r\n          onCancel={this.handleCancel}\r\n          okButtonProps={{ disabled: false }}\r\n          cancelButtonProps={{ disabled: false }}\r\n        >\r\n          <Form\r\n            name=\"photo_upload\"\r\n            className=\"photo-upload\"\r\n            onFinish={this.onFinish}\r\n          >\r\n            <Form.Item>\r\n              <Input type=\"file\" onChange={this.fileSelectedHandler} />\r\n            </Form.Item>\r\n            <Form.Item\r\n              name=\"date\"\r\n              rules={[{ required: true, message: \"Date of Incident\" }]}\r\n            >\r\n              <DatePicker placeholder=\"Date\" onChange={this.onChangeDate} />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n              name=\"description\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Description\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input\r\n                placeholder=\"Description\"\r\n                onChange={this.onChange}\r\n                value={this.state.description}\r\n                id=\"description\"\r\n                type=\"description\"\r\n              />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n              name=\"location\"\r\n              rules={[{ required: true, message: \"Location of Incident\" }]}\r\n            >\r\n              <Input\r\n                placeholder=\"Location\"\r\n                onChange={this.onChange}\r\n                value={this.state.location}\r\n                id=\"location\"\r\n                type=\"location\"\r\n              />\r\n            </Form.Item>\r\n          </Form>\r\n\r\n          <Modal\r\n            title=\"Upload Confirm\"\r\n            destroyOnClose={true}\r\n            visible={this.state.visibleConfirm}\r\n            onOk={this.handleUploadOk}\r\n            okButtonProps={{ disabled: false }}\r\n            cancelButtonProps={{ disabled: true, visible: false }}\r\n          >\r\n            <p>Photo Added!</p>\r\n          </Modal>\r\n        </Modal>\r\n        <Button\r\n          className=\"submit-button\"\r\n          type=\"primary\"\r\n          onClick={() => this.submitAudit()}\r\n        >\r\n          SUBMIT\r\n        </Button>\r\n\r\n        <Modal\r\n          title=\"\"\r\n          visible={this.state.visibleAudit}\r\n          onOk={this.handleAuditOk}\r\n          okButtonProps={{ disabled: false }}\r\n          cancelButtonProps={{ disabled: true, visible: false }}\r\n        >\r\n          <p>Audit Uploaded!</p>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nChecklist.propTypes = {\r\n  tenantInfo: PropTypes.object.isRequired,\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  tenantInfo: state.tenantInfo,\r\n});\r\nexport default connect(mapStateToProps)(Checklist);\r\n","C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\actions\\authActions.js",[],"C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\components\\AuditList.js",["158","159","160","161","162","163","164","165"],"import React, { Component, TextArea } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { Table, Tag, Space } from \"antd\";\r\nimport { getAudits } from \"../data/AuditData.ts\";\r\nimport { display } from \"../actions/auditActions.js\"; import { submit } from \"../actions/auditActions.js\";\r\n\r\nconst { Column, ColumnGroup } = Table;\r\n\r\nconst Audit = (props) => (\r\n  <tr>\r\n    <td>{props.audit.username}</td>\r\n    <td>{props.audit.image}</td>\r\n    <td>{props.audit.notes}</td>\r\n    <td>{props.audit.tags}</td>\r\n    <td>{props.audit.date.substring(0, 10)}</td>\r\n    <td>\r\n      <Link to={\"/edit/\" + props.audit._id}>edit</Link> |\r\n      <a\r\n        href=\"#\"\r\n        onClick={() => {\r\n          props.deleteAudit(props.audit._id);\r\n        }}\r\n      >\r\n        delete\r\n      </a>\r\n    </td>\r\n  </tr>\r\n);\r\n\r\nexport default class AuditList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.deleteAudit = this.deleteAudit.bind(this);\r\n\r\n    this.state = { audits: [] };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // axios\r\n    //   .get(\"http://localhost:5000/api/audits\")\r\n    //   .then((response) => {\r\n    //     this.setState({ audits: response.data });\r\n    //     console.log(response.data);\r\n    //   })\r\n    //   .catch((error) => {\r\n    //     console.log(error);\r\n    //   });\r\n    display((data) => {\r\n      this.setState({ audits: data });\r\n    });\r\n  }\r\n\r\n  deleteAudit(id) {\r\n    axios\r\n      .delete(\"http://localhost:5000/audits/\" + id)\r\n      .then((res) => console.log(res.data));\r\n    this.setState({\r\n      audits: this.state.audits.filter((el) => el._id !== id),\r\n    });\r\n  }\r\n\r\n  auditList() {\r\n    return this.state.audits.map((currentaudit) => {\r\n      return (\r\n        <Audit\r\n          audit={currentaudit}\r\n          deleteAudit={this.deleteAudit}\r\n          key={currentaudit._id}\r\n        />\r\n      );\r\n    });\r\n  }\r\n  render() {\r\n    // console.log(this.state.audits);\r\n    return (\r\n      <div className=\"table\">\r\n        <Table\r\n          dataSource={this.state.audits}\r\n          title={() => <div className=\"table-title\">Audits</div>}\r\n          scroll={{ x: 400 }}\r\n        >\r\n          <Column title=\"Type\" dataIndex=\"type\" key=\"type\" />\r\n          <Column title=\"Tenant\" dataIndex=\"tenant\" key=\"tenant\" />\r\n          <Column title=\"Date\" dataIndex=\"date\" key=\"date\" />\r\n          <Column\r\n            title=\"Total Score\"\r\n            dataIndex=\"total_score\"\r\n            key=\"total_score\"\r\n          />\r\n          <Column\r\n            title=\"View Audit\"\r\n            dataIndex=\"view_audit\"\r\n            key=\"view_audit\"\r\n            render={(text, record) => (\r\n              <a>\r\n                <td onClick={() => window.open(text, \"_blank\")}>View Image</td>\r\n              </a>\r\n            )}\r\n          />\r\n        </Table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// const data = getAudits(\"Pamela\");\r\n","C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\components\\TenantList.js",["166","167"],"C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\components\\ChecklistNonFB.js",["168","169"],"import \"../App.css\";\r\nimport {\r\n  Collapse,\r\n  Divider,\r\n  DatePicker,\r\n  Form,\r\n  List,\r\n  Input,\r\n  Checkbox,\r\n  Button,\r\n  Modal,\r\n} from \"antd\";\r\nimport React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport importJSON from \"../data/questionsDict.json\";\r\nimport { submit } from \"../actions/auditActions.js\";\r\nimport store from \"../store\";\r\nconst fileUpload = require(\"fuctbase64\");\r\nconst nonFb = importJSON.non_fb;\r\nconst { Panel } = Collapse;\r\n\r\n// TODO: Take score from json file => Update the score, replace the json file\r\n\r\nclass ChecklistNonFB extends Component {\r\n  // not exactly dynamic\r\n  state = {\r\n    tenantInfo: {},\r\n    type: \"Non-FB\",\r\n    checked: false,\r\n    catCounts: [0, 0, 0],\r\n    // counts[0]: for Professionalism & Staff Hygiene (20%),\r\n    //counts[1]: for Housekeeping & General Cleanliness (40%)\r\n    //counts[2]: for Workplace Safety & Health (40%)\r\n    total_score: 0,\r\n    image: null,\r\n    date: null,\r\n    description: \"\",\r\n    location: \"\",\r\n    visibleForm: false,\r\n    visibleConfirm: false,\r\n    visibleAudit: false,\r\n  };\r\n\r\n  submitAudit = () => {\r\n    console.log(this.state);\r\n    submit({\r\n      type: \"Non-FB\",\r\n      catCounts: this.state.catCounts,\r\n      total_score:\r\n        this.state.catCounts[0] +\r\n        this.state.catCounts[1] +\r\n        this.state.catCounts[2],\r\n      image: this.state.image,\r\n      date: this.state.date,\r\n      description: this.state.description,\r\n      location: this.state.location,\r\n    });\r\n    this.showAuditModal();\r\n  };\r\n\r\n  onChange = (e) => {\r\n    this.setState({ [e.target.id]: e.target.value });\r\n  };\r\n\r\n  onChangeDate = (date, dateString) => {\r\n    this.setState({ date: date });\r\n  };\r\n\r\n  showFormModal = () => {\r\n    this.setState({\r\n      visibleForm: true,\r\n    });\r\n  };\r\n\r\n  showAuditModal = () => {\r\n    this.setState({\r\n      visibleAudit: true,\r\n    });\r\n  };\r\n\r\n  showConfirmModal = () => {\r\n    this.setState({\r\n      visibleConfirm: true,\r\n    });\r\n  };\r\n\r\n  handleFormOk = (e) => {\r\n    console.log(e);\r\n    this.showConfirmModal();\r\n  };\r\n\r\n  handleAuditOk = (e) => {\r\n    console.log(e);\r\n    this.setState({\r\n      visibleAudit: false,\r\n    });\r\n  };\r\n\r\n  handleCancel = (e) => {\r\n    console.log(e);\r\n    this.setState({\r\n      visibleForm: false,\r\n    });\r\n  };\r\n\r\n  handleUploadOk = (e) => {\r\n    console.log(e);\r\n    this.setState({\r\n      visibleConfirm: false,\r\n    });\r\n  };\r\n\r\n  createCheckbox = (label, catIndex) => (\r\n    <Checkbox\r\n      label={label}\r\n      // handleCheckboxChange={this.toggleCheckbox}\r\n      key={label}\r\n      onChange={(e) => this.handleCount(e, catIndex)}\r\n    />\r\n  );\r\n\r\n  fileSelectedHandler = (event) => {\r\n    // console.log(event.target.files[0]);\r\n    fileUpload(event).then((data) => {\r\n      // console.log(\"base64: \", data.base64);\r\n      this.setState({\r\n        image: data.base64,\r\n      });\r\n    });\r\n  };\r\n\r\n  handleCount = (e, catIndex) => {\r\n    const { checked, type } = e.target;\r\n    switch (catIndex) {\r\n      case 0:\r\n        if (type === \"checkbox\" && checked === true) {\r\n          this.setState((state) => state.catCounts[0]++);\r\n        } else {\r\n          this.setState((state) => state.catCounts[0]--);\r\n        }\r\n        break;\r\n      case 1:\r\n        if (type === \"checkbox\" && checked === true) {\r\n          this.setState((state) => state.catCounts[1]++);\r\n        } else {\r\n          this.setState((state) => state.catCounts[1]--);\r\n        }\r\n        break;\r\n      case 2:\r\n        if (type === \"checkbox\" && checked === true) {\r\n          this.setState((state) => state.catCounts[2]++);\r\n        } else {\r\n          this.setState((state) => state.catCounts[2]--);\r\n        }\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"table\">\r\n        <h3>\r\n          Non-F&B Audit for Tenant at Address:{\" \"}\r\n          <b>\r\n            {this.props.tenantInfo.record._id !== null\r\n              ? this.props.tenantInfo.record._id\r\n              : \"\"}\r\n          </b>\r\n        </h3>\r\n        {nonFb.map((cat, catIndex) => {\r\n          // var catScore = cat.score;\r\n          return (\r\n            // Category\r\n            <Collapse defaultActiveKey={[\"1\"]}>\r\n              <Panel\r\n                header={<div catIndex={catIndex}>{cat.name}</div>}\r\n                key={catIndex + 1}\r\n                className=\"bg-orange\"\r\n              >\r\n                <div catIndex={catIndex}>\r\n                  {cat.subcategories.map((subCat, subCatIndex) => {\r\n                    return (\r\n                      // SubCategory\r\n                      <Collapse defaultActiveKey={[\"1\"]}>\r\n                        <Panel\r\n                          header={\r\n                            <div subCatIndex={subCatIndex}>{subCat.name}</div>\r\n                          }\r\n                          key={subCatIndex + 1}\r\n                          className=\"bg-orange\"\r\n                        >\r\n                          <List\r\n                            dataSource={subCat.questions} // Questions\r\n                            renderItem={(item) => (\r\n                              <List.Item>\r\n                                <div className=\"checklist-item\">\r\n                                  <div className=\"create-audit-row\">{item}</div>\r\n                                  <div className=\"checklist-checkbox\">\r\n                                    {this.createCheckbox(item, catIndex)}\r\n                                  </div>\r\n                                </div>\r\n                              </List.Item>\r\n                            )}\r\n                          />\r\n                        </Panel>\r\n                      </Collapse>\r\n                    );\r\n                  })}\r\n                </div>\r\n                <div>Score: {this.state.catCounts[catIndex] / 2}</div>\r\n              </Panel>\r\n            </Collapse>\r\n          );\r\n        })}\r\n\r\n        <Button type=\"primary\" onClick={this.showFormModal}>\r\n          Upload Photo\r\n        </Button>\r\n        <Modal\r\n          title=\"Upload Photo\"\r\n          visible={this.state.visibleForm}\r\n          onOk={this.handleFormOk}\r\n          onCancel={this.handleCancel}\r\n          okButtonProps={{ disabled: false }}\r\n          cancelButtonProps={{ disabled: false }}\r\n        >\r\n          <Form\r\n            name=\"photo_upload\"\r\n            className=\"photo-upload\"\r\n            onFinish={this.onFinish}\r\n          >\r\n            <Form.Item>\r\n              <Input type=\"file\" onChange={this.fileSelectedHandler} />\r\n            </Form.Item>\r\n            <Form.Item\r\n              name=\"date\"\r\n              rules={[{ required: true, message: \"Date of Incident\" }]}\r\n            >\r\n              <DatePicker placeholder=\"Date\" onChange={this.onChangeDate} />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n              name=\"description\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Description\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input\r\n                placeholder=\"Description\"\r\n                onChange={this.onChange}\r\n                value={this.state.description}\r\n                id=\"description\"\r\n                type=\"description\"\r\n              />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n              name=\"location\"\r\n              rules={[{ required: true, message: \"Location of Incident\" }]}\r\n            >\r\n              <Input\r\n                placeholder=\"Location\"\r\n                onChange={this.onChange}\r\n                value={this.state.location}\r\n                id=\"location\"\r\n                type=\"location\"\r\n              />\r\n            </Form.Item>\r\n          </Form>\r\n          {/* <Form>\r\n            <Button\r\n              type=\"primary\"\r\n              htmlType=\"submit\"\r\n              className=\"upload-photo-button\"\r\n              onClick={() => { this.upload(this.state); }}\r\n            >\r\n              Upload\r\n                    </Button>\r\n          </Form> */}\r\n          <Modal\r\n            title=\"Upload Confirm\"\r\n            destroyOnClose={true}\r\n            visible={this.state.visibleConfirm}\r\n            onOk={this.handleUploadOk}\r\n            okButtonProps={{ disabled: false }}\r\n            cancelButtonProps={{ disabled: true, visible: false }}\r\n          >\r\n            <p>Photo Added!</p>\r\n          </Modal>\r\n        </Modal>\r\n        <Button\r\n          onClick={() => this.submitAudit()}\r\n          className=\"submit-button\"\r\n          type=\"primary\"\r\n          htmlType=\"submit\"\r\n        >\r\n          SUBMIT\r\n        </Button>\r\n        {/* <Button onClick={() => this.updateItems()} className=\"submit-button\" type=\"primary\" htmlType=\"submit\">\r\n          TEST\r\n        </Button> */}\r\n        <Modal\r\n          title=\"\"\r\n          visible={this.state.visibleAudit}\r\n          onOk={this.handleAuditOk}\r\n          okButtonProps={{ disabled: false }}\r\n          cancelButtonProps={{ disabled: true, visible: false }}\r\n        >\r\n          <p>Audit Uploaded!</p>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nChecklistNonFB.propTypes = {\r\n  tenantInfo: PropTypes.object.isRequired,\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  tenantInfo: state.tenantInfo,\r\n});\r\nexport default connect(mapStateToProps)(ChecklistNonFB);\r\n","C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\components\\ViewAudit.js",["170","171","172"],"import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Typography, Progress, Image, Input, Comment, Form, Button } from \"antd\";\r\n\r\nconst { Text } = Typography;\r\nconst { TextArea } = Input;\r\n\r\n\r\nexport default class ViewAudit extends Component {\r\n    state = {\r\n        input: \"85\",\r\n        tenant: \"tenant1\",\r\n        auditor: \"auditor\",\r\n        auditorComments: [\"Bla\", \"blabla\"],\r\n        tenantComments: [\"Response\", \"response\"],\r\n        image: \"iVBORw0KGgoAAAANSUhEUgAAAAUAAAAFCAYAAACNbyblAAAAHElEQVQI12P4//8/w38GIAXDIBKE0DHxgljNBAAO9TXL0Y4OHwAAAABJRU5ErkJggg==\",\r\n        decodedImage: \"\",\r\n        newComment: \"\",\r\n    };\r\n\r\n\r\n\r\n    displayComments() {\r\n        var Comm = [];\r\n        for (var i = 0; i < Math.max(this.state.auditorComments.length, this.state.tenantComments.length); i++) {\r\n            if (this.state.auditorComments[i] != null) {\r\n                Comm.push(<div>\r\n                    <Comment\r\n                        author={<a>{this.state.auditor}</a>}\r\n                        className=\"comment\"\r\n                        content={\r\n                            <p>{this.state.auditorComments[i]}</p>\r\n                        } />\r\n                </div>);\r\n            }\r\n            if (this.state.tenantComments[i] != null) {\r\n                Comm.push(<div>\r\n                    <Comment\r\n                        author={<a>{this.state.tenant}</a>}\r\n                        className=\"comment\"\r\n                        content={\r\n                            <p>{this.state.tenantComments[i]}</p>\r\n                        } />\r\n                </div>);\r\n            }\r\n        }\r\n        return (\r\n            <div>\r\n                {Comm}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    onChange = value => {\r\n        console.log(value.Text);\r\n        this.setState({\r\n            newComment: value\r\n        })\r\n        console.log(this.state.newComment);\r\n    };\r\n\r\n    newComment = (values) => {\r\n        // console.log(values.nativeEvent.explicitOriginalTarget.value);\r\n        this.setState({\r\n            newComment: values.nativeEvent.explicitOriginalTarget.value\r\n        })\r\n        // console.log(this.state.newComment)\r\n    }\r\n\r\n    submitComment = () => {\r\n        var tempArray = this.state.auditorComments;\r\n        console.log(tempArray);\r\n        tempArray.push(this.state.newComment);\r\n        console.log(tempArray);\r\n        this.setState({\r\n            auditorComments: tempArray,\r\n        })\r\n        console.log(this.state.auditorComments);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <p></p>\r\n                <Progress className=\"score\"\r\n                    type=\"circle\"\r\n                    percent={this.state.input} width={300} />\r\n                <div>\r\n                    <Text className=\"name\">\r\n                        Tenant: {this.state.tenant}\r\n                    </Text>\r\n                    <div />\r\n                    <Text className=\"name\">\r\n                        Auditor: {this.state.auditor}\r\n                    </Text>\r\n                    <div />\r\n                    <p className=\"name2\">ImageList:</p>\r\n                    <Image\r\n                        width={200}\r\n                        src={`data:image/jpeg;base64,${this.state.image}`}\r\n                    />\r\n                    <div />\r\n                    {this.displayComments()}\r\n                    <div />\r\n                    <Form className=\"addComment\" onChange={this.newComment} initialValues={{\r\n                        remember: false,\r\n                    }}>\r\n                        <Form.Item name=\"addComment\" label=\"Add Comment\">\r\n                            <TextArea className=\"addCommentText\" placeholder=\"Add Comment\" rows={4} allowClear={true} />\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button className=\"submit-comment\" onClick={this.submitComment}>\r\n                                Submit Comment\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n\r\n\r\n\r\n                </div>\r\n            </div >\r\n        );\r\n    }\r\n}","C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\components\\MessageDisplay.js",[],"C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\components\\layout\\Navbar.js",[],"C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\components\\auth\\Register.js",["173"],"import React, { Component } from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport Recaptcha from \"react-recaptcha\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { registerUser } from \"../../actions/authActions\";\r\nimport classnames from \"classnames\";\r\nimport { getStaffKey } from \"../../actions/authActions\";\r\nimport { Form, Input, Button, Checkbox, Select } from \"antd\";\r\nimport {\r\n  MailOutlined,\r\n  UserOutlined,\r\n  LockOutlined,\r\n  SketchOutlined,\r\n} from \"@ant-design/icons\";\r\nimport institutionsData from \"../../data/institutions.json\";\r\n\r\nconst institutions = institutionsData;\r\n\r\nclass Register extends Component {\r\n  constructor() {\r\n    super();\r\n    this.verifyCallback = this.verifyCallback.bind(this);\r\n    this.state = {\r\n      isVerified: false,\r\n      name: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n      password2: \"\",\r\n      institution: \"\",\r\n      staffkey: \"\",\r\n      dbstaffkey: \"\",\r\n      errors: {},\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // If loggied in and user navigates to Register page, should redirect them to dashboad\r\n    if (this.props.auth.isAuthenticaed) {\r\n      this.props.history.push(\"/dashboard\"); // Push new entry into history stack, ie redirecting the user to another route\r\n    }\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps) {\r\n    if (nextProps.errors) {\r\n      this.setState({\r\n        errors: nextProps.errors,\r\n      });\r\n    }\r\n  }\r\n\r\n  onChange = (e) => {\r\n    this.setState({ [e.target.id]: e.target.value });\r\n  };\r\n\r\n  onDropdownChange = (e, { value }) => this.setState({ value });\r\n\r\n  onFinish = (values) => {\r\n    if (!this.state.isVerified) {\r\n      alert(\"Please verify you are human\");\r\n    } else {\r\n      window.recaptcha = null;\r\n      getStaffKey((data) => {\r\n        // console.log(\"data is: \", data);\r\n        this.setState({ ...this.state, dbstaffkey: data });\r\n        // console.log(\"dbstaffkey is: \", this.state.dbstaffkey);\r\n        if (this.state.staffkey === this.state.dbstaffkey) {\r\n          const newUser = {\r\n            name: values.name,\r\n            email: values.email,\r\n            password: values.password,\r\n            password2: values.password2,\r\n            institution: values.institution,\r\n            usertype: \"staff\",\r\n          };\r\n          this.props.registerUser(newUser, this.props.history);\r\n        } else {\r\n          alert(\"Staff Key is incorrect!\");\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  verifyCallback(response) {\r\n    if (response) {\r\n      this.setState({ isVerified: true });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { errors } = this.state;\r\n    return (\r\n      <div>\r\n        <Form\r\n          name=\"normal_login\"\r\n          className=\"login-register-form\"\r\n          onFinish={this.onFinish}\r\n        >\r\n          <Form.Item\r\n            name=\"name\"\r\n            rules={[{ required: true, message: \"Please input your Name!\" }]}\r\n          >\r\n            <Input\r\n              prefix={<UserOutlined className=\"site-form-item-icon\" />}\r\n              placeholder=\"Name\"\r\n              onChange={this.onChange}\r\n              value={this.state.name}\r\n              error={errors.name}\r\n              id=\"name\"\r\n              type=\"text\"\r\n              // className={classnames(\"\", {\r\n              // invalid: errors.name,\r\n              // })}\r\n            />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            name=\"email\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                type: \"email\",\r\n                message: \"Please input a valid Email!\",\r\n              },\r\n            ]}\r\n          >\r\n            <Input\r\n              prefix={<MailOutlined className=\"site-form-item-icon\" />}\r\n              placeholder=\"Email\"\r\n              onChange={this.onChange}\r\n              value={this.state.email}\r\n              error={errors.email}\r\n              id=\"email\"\r\n              type=\"email\"\r\n              // className={classnames(\"\", {\r\n              //   invalid: errors.email,\r\n              // })}\r\n            />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            name=\"password\"\r\n            rules={[{ required: true, message: \"Please input your Password!\" }]}\r\n          >\r\n            <Input\r\n              prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n              placeholder=\"Password\"\r\n              onChange={this.onChange}\r\n              value={this.state.password}\r\n              error={errors.password}\r\n              id=\"password\"\r\n              type=\"password\"\r\n              // className={classnames(\"\", {\r\n              //   invalid: errors.password,\r\n              // })}\r\n            />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            name=\"password2\"\r\n            dependencies={[\"password\"]}\r\n            hasFeedback\r\n            rules={[\r\n              { required: true, message: \"Passwords do not match!\" },\r\n              ({ getFieldValue }) => ({\r\n                validator(_, value) {\r\n                  if (!value || getFieldValue(\"password\") === value) {\r\n                    return Promise.resolve();\r\n                  }\r\n\r\n                  return Promise.reject(\r\n                    new Error(\r\n                      \"The two passwords that you entered do not match!\"\r\n                    )\r\n                  );\r\n                },\r\n              }),\r\n            ]}\r\n          >\r\n            <Input\r\n              prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n              placeholder=\"Confirm Password\"\r\n              onChange={this.onChange}\r\n              value={this.state.password2}\r\n              error={errors.password2}\r\n              id=\"password2\"\r\n              type=\"password\"\r\n              // className={classnames(\"\", {\r\n              // invalid: errors.password2,\r\n              // })}\r\n            />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            name=\"staffkey\"\r\n            rules={[\r\n              { required: true, message: \"Please input your staff key!\" },\r\n            ]}\r\n          >\r\n            <Input\r\n              prefix={<SketchOutlined className=\"site-form-item-icon\" />}\r\n              placeholder=\"Staff Key\"\r\n              onChange={this.onChange}\r\n              value={this.state.staffkey}\r\n              error={errors.staffkey}\r\n              id=\"staffkey\"\r\n              type=\"staffkey\"\r\n              className={classnames(\"\", {\r\n                invalid: errors.key || errors.keyincorrect,\r\n              })}\r\n            />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            name=\"institution\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Please select an institution!\",\r\n              },\r\n            ]}\r\n          >\r\n            <Select\r\n              showSearch\r\n              className=\"dropdown\"\r\n              icon={MailOutlined}\r\n              placeholder=\"Institution\"\r\n              options={institutions}\r\n              onChange={this.onDropdownChange}\r\n              id=\"institution\"\r\n              type=\"institution\"\r\n              value={this.state.institution}\r\n              error={errors.institution}\r\n            />\r\n          </Form.Item>\r\n\r\n          <Form.Item>\r\n            <Button\r\n              type=\"primary\"\r\n              htmlType=\"submit\"\r\n              className=\"login-register-form-button\"\r\n            >\r\n              Register\r\n            </Button>\r\n            Or <Link to=\"/Login\">Login here</Link>\r\n          </Form.Item>\r\n        </Form>\r\n        <Recaptcha\r\n          sitekey=\"6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI\"\r\n          render=\"explicit\"\r\n          verifyCallback={this.verifyCallback}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n// Props stands for properties and is being used for passing data from one component to another\r\nRegister.propTypes = {\r\n  registerUser: PropTypes.func.isRequired,\r\n  auth: PropTypes.object.isRequired,\r\n  errors: PropTypes.object.isRequired,\r\n};\r\n\r\n// Get state from Redux and map it to props\r\nconst mapStateToProps = (state) => ({\r\n  auth: state.auth, // allows us to call this.props.auth\r\n  errors: state.errors, // allows us to call this.props.errors\r\n});\r\n\r\nexport default connect(mapStateToProps, { registerUser })(withRouter(Register));\r\n","C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\components\\auth\\CreateTenant.js",["174","175","176","177","178","179"],"import React, { ReactDOM, Component } from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { registerTenant } from \"../../actions/authActions\";\r\nimport { Form, Input, Button, Message, Select, message } from \"antd\";\r\nimport { MailOutlined, UserOutlined, LockOutlined } from \"@ant-design/icons\";\r\nimport institutionsData from \"../../data/institutions.json\";\r\nimport tenantData from \"../../data/tenantTypes.json\";\r\n\r\n// TODO: this should be taken from db\r\nconst institutions = institutionsData;\r\nconst tenantTypes = tenantData;\r\n\r\nclass CreateTenant extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      name: \"\",\r\n      type: \"\",\r\n      email: \"\",\r\n      address: \"\",\r\n      institution: \"\",\r\n      auditor: \"\",\r\n      errors: {},\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // If loggied in and user navigates to Register page, should redirect them to dashboad\r\n    if (this.props.auth.isAuthenticaed) {\r\n      this.props.history.push(\"/dashboard\"); // Push new entry into history stack, ie redirecting the user to another route\r\n    }\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps) {\r\n    if (nextProps.errors) {\r\n      this.setState({\r\n        errors: nextProps.errors,\r\n      });\r\n    }\r\n  }\r\n\r\n  onChange = (e) => {\r\n    this.setState({ [e.target.id]: e.target.value });\r\n  };\r\n\r\n  onDropdownChange = (e, { value }) => this.setState({ value });\r\n\r\n  // TODO send email to tenant with login details\r\n\r\n  onFinish = (values) => {\r\n    const newUser = {\r\n      name: values.name,\r\n      type: values.type,\r\n      email: values.email,\r\n      address: values.address,\r\n      institution: values.institution,\r\n      auditor: values.auditor,\r\n    };\r\n    console.log(newUser);\r\n    this.props.registerTenant(newUser, this.props.history);\r\n  };\r\n\r\n  render() {\r\n    const { user } = this.props.auth;\r\n    const { errors } = this.state;\r\n    const layout = {\r\n      labelCol: { span: 3 },\r\n    };\r\n    return (\r\n      <Form\r\n        {...layout}\r\n        name=\"normal_login\"\r\n        className=\"login-register-form\"\r\n        onFinish={this.onFinish}\r\n        initialValues={{\r\n          auditor: user.name,\r\n        }}\r\n      >\r\n        <h1>Create a Tenant Account</h1>\r\n\r\n        {/* No name, replace with id for annonymity */}\r\n\r\n        <Form.Item\r\n          label=\"Tenant Name\"\r\n          name=\"name\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              type: \"string\",\r\n              message: \"Please input a valid Name!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input\r\n            placeholder=\"Tenant Name\"\r\n            onChange={this.onChange}\r\n            value={this.state.name}\r\n            error={errors.name}\r\n            id=\"name\"\r\n            type=\"name\"\r\n            // className={classnames(\"\", {\r\n            //   invalid: errors.email,\r\n            // })}\r\n          />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label=\"Type\"\r\n          name=\"type\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please select F&B or non-F&B!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Select\r\n            className=\"dropdown\"\r\n            placeholder=\"F&B or Non-F&B\"\r\n            options={tenantTypes}\r\n            onChange={this.onDropdownChange}\r\n            id=\"type\"\r\n            type=\"type\"\r\n            value={this.state.type}\r\n            error={errors.type}\r\n          />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label=\"Email\"\r\n          name=\"email\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              type: \"email\",\r\n              message: \"Please input a valid Email!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input\r\n            placeholder=\"Email\"\r\n            onChange={this.onChange}\r\n            value={this.state.email}\r\n            error={errors.email}\r\n            id=\"email\"\r\n            type=\"email\"\r\n            // className={classnames(\"\", {\r\n            //   invalid: errors.email,\r\n            // })}\r\n          />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label=\"Address\"\r\n          name=\"address\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              type: \"string\",\r\n              message: \"Please input a valid Address!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input\r\n            placeholder=\"Address\"\r\n            onChange={this.onChange}\r\n            value={this.state.address}\r\n            error={errors.address}\r\n            id=\"address\"\r\n            type=\"address\"\r\n            // className={classnames(\"\", {\r\n            //   invalid: errors.email,\r\n            // })}\r\n          />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label=\"Institution\"\r\n          name=\"institution\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please select an institution!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Select\r\n            showSearch\r\n            className=\"dropdown\"\r\n            icon={MailOutlined}\r\n            placeholder=\"Institution\"\r\n            options={institutions}\r\n            onChange={this.onDropdownChange}\r\n            id=\"institution\"\r\n            type=\"institution\"\r\n            value={this.state.institution}\r\n            error={errors.institution}\r\n          />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label=\"Auditor\"\r\n          name=\"auditor\"\r\n          rules={[{ required: true, message: \"Please input name of Auditor!\" }]}\r\n        >\r\n          <Input\r\n            placeholder=\"Auditor\"\r\n            onChange={this.onChange}\r\n            value={this.state.auditor}\r\n            error={errors.auditor}\r\n            id=\"auditor\"\r\n            type=\"auditor\"\r\n          />\r\n        </Form.Item>\r\n\r\n        <Form.Item>\r\n          <Button\r\n            type=\"primary\"\r\n            htmlType=\"submit\"\r\n            className=\"login-register-form-button\"\r\n          >\r\n            Create Tenant\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n// Props stands for properties and is being used for passing data from one component to another\r\nCreateTenant.propTypes = {\r\n  registerTenant: PropTypes.func.isRequired,\r\n  auth: PropTypes.object.isRequired,\r\n  errors: PropTypes.object.isRequired,\r\n};\r\n\r\n// Get state from Redux and map it to props\r\nconst mapStateToProps = (state) => ({\r\n  auth: state.auth, // allows us to call this.props.auth\r\n  errors: state.errors, // allows us to call this.props.errors\r\n});\r\n\r\nexport default connect(mapStateToProps, { registerTenant })(\r\n  withRouter(CreateTenant)\r\n);\r\n","C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\components\\auth\\Login.js",["180"],"import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { loginUser } from \"../../actions/authActions\";\r\nimport classnames from \"classnames\";\r\nimport Recaptcha from \"react-recaptcha\";\r\n\r\nimport { Form, Input, Button, Checkbox, Alert } from \"antd\";\r\nimport { UserOutlined, LockOutlined } from \"@ant-design/icons\";\r\n\r\nclass Login extends Component {\r\n  constructor() {\r\n    super();\r\n    this.verifyCallback = this.verifyCallback.bind(this);\r\n    this.state = {\r\n      isVerified: false,\r\n      email: \"\",\r\n      password: \"\",\r\n      usertypebool: false,\r\n      errors: {},\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // If logged in and user navigates to Login page, should redirect them to dashboard\r\n    if (this.props.auth.isAuthenticated) {\r\n      if (this.props.auth.user.usertype === \"staff\") {\r\n        this.props.history.push(\"/auditlist\");\r\n      } else if (this.props.auth.user.usertype === \"tenant\") {\r\n        this.props.history.push(\"/tenant\");\r\n      }\r\n    }\r\n  }\r\n  // might be deprecated\r\n  UNSAFE_componentWillReceiveProps(nextProps) {\r\n    if (nextProps.auth.isAuthenticated) {\r\n      if (this.props.auth.user.usertype === \"staff\") {\r\n        this.props.history.push(\"/auditlist\"); // push staff to auditlist when they login\r\n      } else if (this.props.auth.user.usertype === \"tenant\") {\r\n        this.props.history.push(\"/tenant\");\r\n      }\r\n    }\r\n    if (nextProps.errors) {\r\n      this.setState({\r\n        errors: nextProps.errors,\r\n      });\r\n    }\r\n  }\r\n\r\n  onChange = (e) => {\r\n    this.setState({ [e.target.id]: e.target.value });\r\n  };\r\n\r\n  onCheckboxChange = (e) => {\r\n    this.setState({ usertypebool: !this.state.usertypebool });\r\n  };\r\n\r\n  onFinish = (values) => {\r\n    // console.log(values);\r\n    // Process checkbox boolean to usertype string\r\n    if (!this.state.isVerified) {\r\n      alert(\"Please verify you are human\");\r\n    } else {\r\n      window.recaptcha = null;\r\n      var { usertype } = \"\";\r\n      if (this.state.usertypebool) {\r\n        usertype = \"staff\";\r\n      } else {\r\n        usertype = \"tenant\";\r\n      }\r\n      const userData = {\r\n        email: values.email,\r\n        password: values.password,\r\n        usertype: usertype,\r\n      };\r\n      console.log(values);\r\n\r\n      this.props.loginUser(userData, this.props.history); // since we handle the redirect within our component, we don't need to pass in this.props.history as a parameter\r\n    }\r\n  };\r\n\r\n  recaptchaLoaded() {\r\n    console.log(\"captcha loaded\");\r\n  }\r\n\r\n  verifyCallback(response) {\r\n    if (response) {\r\n      this.setState({ isVerified: true });\r\n    }\r\n  }\r\n  render() {\r\n    const { errors } = this.state;\r\n    return (\r\n      <div>\r\n        <div>{this.state.isVerified.toString()}</div>\r\n        <Form\r\n          onFinish={this.onFinish}\r\n          name=\"normal_login\"\r\n          className=\"login-register-form\"\r\n        >\r\n          <h2>Welcome to SingHealth Audit</h2>\r\n          <p>Enter your email and password to log in </p>\r\n          <Form.Item\r\n            name=\"email\"\r\n            rules={[{ required: true, message: \"Please input your Email!\" }]}\r\n          >\r\n            <Input\r\n              prefix={<UserOutlined className=\"site-form-item-icon\" />}\r\n              placeholder=\"Email\"\r\n              onChange={this.onChange}\r\n              value={this.state.email}\r\n              error={errors.email}\r\n              id=\"email\"\r\n              type=\"email\"\r\n              className={classnames(\"\", {\r\n                invalid: errors.email || errors.emailnotfound,\r\n              })}\r\n            />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            name=\"password\"\r\n            rules={[{ required: true, message: \"Please input your Password!\" }]}\r\n          >\r\n            <Input\r\n              prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n              placeholder=\"Password\"\r\n              onChange={this.onChange}\r\n              value={this.state.password}\r\n              error={errors.password}\r\n              id=\"password\"\r\n              type=\"password\"\r\n              className={classnames(\"\", {\r\n                invalid: errors.password || errors.passwordincorrect,\r\n              })}\r\n            />\r\n          </Form.Item>\r\n\r\n          <Form.Item name=\"usertypebool\">\r\n            <Checkbox\r\n              onChange={this.onCheckboxChange}\r\n              value={this.state.usertypebool}\r\n              error={errors.usertypebool}\r\n              id=\"usertypebool\"\r\n            >\r\n              Singhealth Staff Member?\r\n            </Checkbox>\r\n          </Form.Item>\r\n\r\n          <Form.Item>\r\n            <Button\r\n              id=\"login-button\"\r\n              type=\"primary\"\r\n              htmlType=\"submit\"\r\n              className=\"login-register-form-button\"\r\n            >\r\n              Log in\r\n            </Button>\r\n            New staff member? <Link to=\"/Register\">Register here!</Link>\r\n          </Form.Item>\r\n        </Form>\r\n        <Recaptcha\r\n          sitekey=\"6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI\"\r\n          render=\"explicit\"\r\n          verifyCallback={this.verifyCallback}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nLogin.propTypes = {\r\n  loginUser: PropTypes.func.isRequired,\r\n  auth: PropTypes.object.isRequired,\r\n  errors: PropTypes.object.isRequired,\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  auth: state.auth,\r\n  errors: state.errors,\r\n});\r\nexport default connect(mapStateToProps, { loginUser })(Login);\r\n","C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\data\\AuditData.ts",[],["181","182"],"C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\actions\\auditActions.js",[],"C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\components\\layout\\RightMenuLoggedIn.js",["183","184","185","186","187","188"],"import React, { Component } from \"react\";\r\nimport { Menu, Icon, Button } from \"antd\";\r\nimport { logoutUser } from \"../../actions/authActions\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { NavLink, withRouter } from \"react-router-dom\";\r\n\r\nconst SubMenu = Menu.SubMenu;\r\nconst MenuItemGroup = Menu.ItemGroup;\r\nclass RightMenu extends Component {\r\n  onLogoutClick = (e) => {\r\n    e.preventDefault();\r\n    this.props.logoutUser();\r\n  };\r\n  render() {\r\n    const { user } = this.props.auth;\r\n\r\n    return (\r\n      <Menu mode=\"vertical\">\r\n        <Menu.Item key=\"mail\">\r\n          <NavLink onClick={this.onLogoutClick} to=\"/login\">\r\n            Logout\r\n          </NavLink>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"app\">\r\n          <a href=\"\">Hello {user.name}</a>\r\n        </Menu.Item>\r\n      </Menu>\r\n    );\r\n  }\r\n}\r\nRightMenu.propTypes = {\r\n  logoutUser: PropTypes.func.isRequired,\r\n  auth: PropTypes.object.isRequired,\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  auth: state.auth,\r\n});\r\nexport default connect(mapStateToProps, { logoutUser })(RightMenu);\r\n","C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\components\\layout\\RightMenu.js",["189","190","191"],"import React, { Component } from \"react\";\r\nimport { Menu, Icon } from \"antd\";\r\nimport { logoutUser } from \"../../actions/authActions\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst SubMenu = Menu.SubMenu;\r\nconst MenuItemGroup = Menu.ItemGroup;\r\nclass RightMenu extends Component {\r\n  onLogoutClick = (e) => {\r\n    e.preventDefault();\r\n    this.props.logoutUser();\r\n  };\r\n  render() {\r\n    return (\r\n      <Menu mode=\"vertical\">\r\n        <Menu.Item key=\"mail\" id=\"rightmenu1\">\r\n          <Link to=\"/login\">Login</Link>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"app\" id=\"rightmenu2\">\r\n          <Link to=\"/register\">Register</Link>\r\n        </Menu.Item>\r\n      </Menu>\r\n    );\r\n  }\r\n}\r\nRightMenu.propTypes = {\r\n  logoutUser: PropTypes.func.isRequired,\r\n  auth: PropTypes.object.isRequired,\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  auth: state.auth,\r\n});\r\nexport default connect(mapStateToProps, { logoutUser })(RightMenu);\r\n","C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\actions\\types.js",[],"C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\actions\\tenantActions.js",[],"C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\actions\\errorActions.js",[],"C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\components\\layout\\LeftMenu.js",["192","193","194","195","196","197","198"],"import React, { Component } from \"react\";\r\nimport { Menu, Icon, Dropdown, Button } from \"antd\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport MenuItem from \"antd/lib/menu/MenuItem\";\r\n\r\nconst SubMenu = Menu.SubMenu;\r\nconst MenuItemGroup = Menu.ItemGroup;\r\n\r\nconst CreateAuditMenu = (\r\n  <Menu>\r\n    <Menu.Item key=\"fbchecklist\">\r\n      <NavLink to=\"/checklist\">FB Audit List</NavLink>\r\n    </Menu.Item>\r\n\r\n    <Menu.Item key=\"nonfbchecklist\">\r\n      <NavLink to=\"/ChecklistNonFB\">Non-FB Audit List</NavLink>\r\n    </Menu.Item>\r\n  </Menu>\r\n);\r\n\r\nclass StaffLeftMenu extends Component {\r\n  render() {\r\n    return (\r\n      <Menu mode=\"vertical\">\r\n        <Menu.Item key=\"audits\">\r\n          <NavLink to=\"/auditlist\">Audits</NavLink>\r\n        </Menu.Item>\r\n\r\n        {/* <SubMenu key=\"sub1\" title={<span>Create Audit</span>}>\r\n          <Menu.Item key=\"fbchecklist\">\r\n            <NavLink to=\"/checklistFB\">FB Audit List</NavLink>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"nonfbchecklist\">\r\n            <NavLink to=\"/checklistNonFB\">Non-FB Audit List</NavLink>\r\n          </Menu.Item>\r\n        </SubMenu> */}\r\n\r\n        <Menu.Item key=\"createtenant\">\r\n          <NavLink to=\"/createtenant\">Create Tenant</NavLink>\r\n        </Menu.Item>\r\n\r\n        <Menu.Item key=\"directory\">\r\n          <NavLink to=\"/directory\">Directory</NavLink>\r\n        </Menu.Item>\r\n\r\n        <Menu.Item key=\"viewaudit\">\r\n          <NavLink to=\"/viewaudit\">View Audit</NavLink>\r\n        </Menu.Item>\r\n      </Menu>\r\n    );\r\n  }\r\n}\r\n\r\nclass TenantLeftMenu extends Component {\r\n  render() {\r\n    return (\r\n      <Menu mode=\"vertical\">\r\n        <Menu.Item key=\"tenanthome\">\r\n          <NavLink to=\"/tenant\">Tenant Home</NavLink>\r\n        </Menu.Item>\r\n\r\n        <Menu.Item key=\"editaudit\">\r\n          <NavLink to=\"/tenant/editaudit\">Edit Audit</NavLink>\r\n        </Menu.Item>\r\n      </Menu>\r\n    );\r\n  }\r\n}\r\n\r\nclass LeftMenu extends Component {\r\n  render() {\r\n    if (this.props.auth.user.usertype === \"staff\") {\r\n      return <StaffLeftMenu />;\r\n    } else if (this.props.auth.user.usertype === \"tenant\") {\r\n      return <TenantLeftMenu />;\r\n    } else return <div></div>;\r\n  }\r\n}\r\n\r\nLeftMenu.propTypes = {\r\n  auth: PropTypes.object.isRequired,\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  auth: state.auth,\r\n});\r\nexport default connect(mapStateToProps)(LeftMenu);\r\n","C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\reducers\\index.js",[],"C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\reducers\\tenantReducer.js",[],"C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\reducers\\messageReducer.js",[],"C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\reducers\\authReducer.js",[],"C:\\Users\\ASUS\\Desktop\\singhealth2.0\\client\\src\\reducers\\errorReducer.js",[],{"ruleId":"199","replacedBy":"200"},{"ruleId":"201","replacedBy":"202"},{"ruleId":"203","severity":1,"message":"204","line":6,"column":8,"nodeType":"205","messageId":"206","endLine":6,"endColumn":17},{"ruleId":"203","severity":1,"message":"207","line":1,"column":17,"nodeType":"205","messageId":"206","endLine":1,"endColumn":26},{"ruleId":"203","severity":1,"message":"208","line":2,"column":10,"nodeType":"205","messageId":"206","endLine":2,"endColumn":14},{"ruleId":"203","severity":1,"message":"207","line":1,"column":17,"nodeType":"205","messageId":"206","endLine":1,"endColumn":26},{"ruleId":"203","severity":1,"message":"208","line":2,"column":10,"nodeType":"205","messageId":"206","endLine":2,"endColumn":14},{"ruleId":"203","severity":1,"message":"209","line":4,"column":3,"nodeType":"205","messageId":"206","endLine":4,"endColumn":10},{"ruleId":"203","severity":1,"message":"210","line":17,"column":18,"nodeType":"205","messageId":"206","endLine":17,"endColumn":25},{"ruleId":"203","severity":1,"message":"211","line":1,"column":28,"nodeType":"205","messageId":"206","endLine":1,"endColumn":36},{"ruleId":"203","severity":1,"message":"212","line":4,"column":17,"nodeType":"205","messageId":"206","endLine":4,"endColumn":20},{"ruleId":"203","severity":1,"message":"213","line":4,"column":22,"nodeType":"205","messageId":"206","endLine":4,"endColumn":27},{"ruleId":"203","severity":1,"message":"214","line":5,"column":10,"nodeType":"205","messageId":"206","endLine":5,"endColumn":19},{"ruleId":"203","severity":1,"message":"215","line":6,"column":64,"nodeType":"205","messageId":"206","endLine":6,"endColumn":70},{"ruleId":"203","severity":1,"message":"216","line":8,"column":17,"nodeType":"205","messageId":"206","endLine":8,"endColumn":28},{"ruleId":"217","severity":1,"message":"218","line":19,"column":7,"nodeType":"219","endLine":24,"endColumn":8},{"ruleId":"217","severity":1,"message":"220","line":97,"column":15,"nodeType":"219","endLine":97,"endColumn":18},{"ruleId":"203","severity":1,"message":"221","line":2,"column":8,"nodeType":"205","messageId":"206","endLine":2,"endColumn":13},{"ruleId":"203","severity":1,"message":"222","line":10,"column":10,"nodeType":"205","messageId":"206","endLine":10,"endColumn":22},{"ruleId":"203","severity":1,"message":"209","line":4,"column":3,"nodeType":"205","messageId":"206","endLine":4,"endColumn":10},{"ruleId":"203","severity":1,"message":"223","line":18,"column":8,"nodeType":"205","messageId":"206","endLine":18,"endColumn":13},{"ruleId":"203","severity":1,"message":"208","line":2,"column":10,"nodeType":"205","messageId":"206","endLine":2,"endColumn":14},{"ruleId":"217","severity":1,"message":"220","line":29,"column":33,"nodeType":"219","endLine":29,"endColumn":36},{"ruleId":"217","severity":1,"message":"220","line":39,"column":33,"nodeType":"219","endLine":39,"endColumn":36},{"ruleId":"203","severity":1,"message":"224","line":9,"column":31,"nodeType":"205","messageId":"206","endLine":9,"endColumn":39},{"ruleId":"203","severity":1,"message":"225","line":1,"column":17,"nodeType":"205","messageId":"206","endLine":1,"endColumn":25},{"ruleId":"203","severity":1,"message":"208","line":2,"column":10,"nodeType":"205","messageId":"206","endLine":2,"endColumn":14},{"ruleId":"203","severity":1,"message":"226","line":6,"column":31,"nodeType":"205","messageId":"206","endLine":6,"endColumn":38},{"ruleId":"203","severity":1,"message":"227","line":6,"column":48,"nodeType":"205","messageId":"206","endLine":6,"endColumn":55},{"ruleId":"203","severity":1,"message":"228","line":7,"column":24,"nodeType":"205","messageId":"206","endLine":7,"endColumn":36},{"ruleId":"203","severity":1,"message":"229","line":7,"column":38,"nodeType":"205","messageId":"206","endLine":7,"endColumn":50},{"ruleId":"203","severity":1,"message":"230","line":9,"column":41,"nodeType":"205","messageId":"206","endLine":9,"endColumn":46},{"ruleId":"199","replacedBy":"200"},{"ruleId":"201","replacedBy":"202"},{"ruleId":"203","severity":1,"message":"231","line":2,"column":16,"nodeType":"205","messageId":"206","endLine":2,"endColumn":20},{"ruleId":"203","severity":1,"message":"232","line":2,"column":22,"nodeType":"205","messageId":"206","endLine":2,"endColumn":28},{"ruleId":"203","severity":1,"message":"233","line":6,"column":19,"nodeType":"205","messageId":"206","endLine":6,"endColumn":29},{"ruleId":"203","severity":1,"message":"234","line":8,"column":7,"nodeType":"205","messageId":"206","endLine":8,"endColumn":14},{"ruleId":"203","severity":1,"message":"235","line":9,"column":7,"nodeType":"205","messageId":"206","endLine":9,"endColumn":20},{"ruleId":"217","severity":1,"message":"218","line":26,"column":11,"nodeType":"219","endLine":26,"endColumn":22},{"ruleId":"203","severity":1,"message":"231","line":2,"column":16,"nodeType":"205","messageId":"206","endLine":2,"endColumn":20},{"ruleId":"203","severity":1,"message":"234","line":8,"column":7,"nodeType":"205","messageId":"206","endLine":8,"endColumn":14},{"ruleId":"203","severity":1,"message":"235","line":9,"column":7,"nodeType":"205","messageId":"206","endLine":9,"endColumn":20},{"ruleId":"203","severity":1,"message":"231","line":2,"column":16,"nodeType":"205","messageId":"206","endLine":2,"endColumn":20},{"ruleId":"203","severity":1,"message":"236","line":2,"column":22,"nodeType":"205","messageId":"206","endLine":2,"endColumn":30},{"ruleId":"203","severity":1,"message":"232","line":2,"column":32,"nodeType":"205","messageId":"206","endLine":2,"endColumn":38},{"ruleId":"203","severity":1,"message":"237","line":6,"column":8,"nodeType":"205","messageId":"206","endLine":6,"endColumn":16},{"ruleId":"203","severity":1,"message":"234","line":8,"column":7,"nodeType":"205","messageId":"206","endLine":8,"endColumn":14},{"ruleId":"203","severity":1,"message":"235","line":9,"column":7,"nodeType":"205","messageId":"206","endLine":9,"endColumn":20},{"ruleId":"203","severity":1,"message":"238","line":11,"column":7,"nodeType":"205","messageId":"206","endLine":11,"endColumn":22},"no-native-reassign",["239"],"no-negated-in-lhs",["240"],"no-unused-vars","'Recaptcha' is defined but never used.","Identifier","unusedVar","'Component' is defined but never used.","'Link' is defined but never used.","'Divider' is defined but never used.","'display' is defined but never used.","'TextArea' is defined but never used.","'Tag' is defined but never used.","'Space' is defined but never used.","'getAudits' is defined but never used.","'submit' is defined but never used.","'ColumnGroup' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'axios' is defined but never used.","'FormProvider' is defined but never used.","'store' is defined but never used.","'Checkbox' is defined but never used.","'ReactDOM' is defined but never used.","'Message' is defined but never used.","'message' is defined but never used.","'UserOutlined' is defined but never used.","'LockOutlined' is defined but never used.","'Alert' is defined but never used.","'Icon' is defined but never used.","'Button' is defined but never used.","'withRouter' is defined but never used.","'SubMenu' is assigned a value but never used.","'MenuItemGroup' is assigned a value but never used.","'Dropdown' is defined but never used.","'MenuItem' is defined but never used.","'CreateAuditMenu' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]