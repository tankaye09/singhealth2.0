[{"C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\index.js":"1","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\reportWebVitals.js":"2","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\App.js":"3","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\layout\\Navbar.js":"4","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\layout\\LeftMenu.js":"5","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\layout\\RightMenu.js":"6","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\auth\\Login.js":"7","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\auth\\Register.js":"8","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\store.js":"9","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\utils\\setAuthToken.js":"10","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\actions\\authActions.js":"11","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\dashboard\\Dashboard.js":"12","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\private-route\\PrivateRoute.js":"13","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\actions\\types.js":"14","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\reducers\\index.js":"15","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\reducers\\errorReducer.js":"16","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\reducers\\authReducer.js":"17","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\Audit-list.js":"18","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\Directory.js":"19","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\auth\\RegisterTenant.js":"20","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\Checklist.js":"21","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\layout\\RightMenuLoggedIn.js":"22","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\data\\AuditData.ts":"23","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\data\\StoreData.ts":"24","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\ChecklistNonFB.js":"25","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\actions\\auditActions.js":"26","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\photo\\PhotoPop.js":"27","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\actions\\photoActions.js":"28","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\data\\questionsData.js":"29"},{"size":500,"mtime":499162500000,"results":"30","hashOfConfig":"31"},{"size":362,"mtime":499162500000,"results":"32","hashOfConfig":"31"},{"size":2410,"mtime":1616683193905,"results":"33","hashOfConfig":"31"},{"size":1889,"mtime":1616680756595,"results":"34","hashOfConfig":"31"},{"size":1268,"mtime":1616683193910,"results":"35","hashOfConfig":"31"},{"size":960,"mtime":1616682751994,"results":"36","hashOfConfig":"31"},{"size":3481,"mtime":1616682751989,"results":"37","hashOfConfig":"31"},{"size":5320,"mtime":1616682751991,"results":"38","hashOfConfig":"31"},{"size":418,"mtime":1615042085090,"results":"39","hashOfConfig":"31"},{"size":346,"mtime":1615042085091,"results":"40","hashOfConfig":"31"},{"size":1784,"mtime":1616682751986,"results":"41","hashOfConfig":"31"},{"size":1556,"mtime":1615042085085,"results":"42","hashOfConfig":"31"},{"size":615,"mtime":1615042085086,"results":"43","hashOfConfig":"31"},{"size":139,"mtime":1615042085081,"results":"44","hashOfConfig":"31"},{"size":214,"mtime":1615042085089,"results":"45","hashOfConfig":"31"},{"size":317,"mtime":1615042085089,"results":"46","hashOfConfig":"31"},{"size":655,"mtime":1615042085088,"results":"47","hashOfConfig":"31"},{"size":2759,"mtime":1616680756582,"results":"48","hashOfConfig":"31"},{"size":2198,"mtime":1616680756587,"results":"49","hashOfConfig":"31"},{"size":5470,"mtime":1616571586542,"results":"50","hashOfConfig":"31"},{"size":14666,"mtime":1616683193907,"results":"51","hashOfConfig":"31"},{"size":1096,"mtime":1616682751995,"results":"52","hashOfConfig":"31"},{"size":1353,"mtime":1616680756599,"results":"53","hashOfConfig":"31"},{"size":1168,"mtime":1616680756601,"results":"54","hashOfConfig":"31"},{"size":6326,"mtime":1616683193909,"results":"55","hashOfConfig":"31"},{"size":472,"mtime":1616682876804,"results":"56","hashOfConfig":"31"},{"size":4073,"mtime":1616682876811,"results":"57","hashOfConfig":"31"},{"size":484,"mtime":1616682876805,"results":"58","hashOfConfig":"31"},{"size":9685,"mtime":1616683293777,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"n2tzlt",{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"62"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"62"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"62"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"119","messages":"120","errorCount":3,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\index.js",[],["130","131"],"C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\reportWebVitals.js",[],"C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\App.js",[],"C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\layout\\Navbar.js",[],"C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\layout\\LeftMenu.js",["132","133","134","135","136","137"],"import React, { Component } from \"react\";\r\nimport { Menu, Icon, Dropdown, Button } from \"antd\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport MenuItem from \"antd/lib/menu/MenuItem\";\r\n\r\nconst SubMenu = Menu.SubMenu;\r\nconst MenuItemGroup = Menu.ItemGroup;\r\n\r\nconst CreateAuditMenu = (\r\n  <Menu>\r\n    <Menu.Item key=\"fbchecklist\">\r\n      <NavLink to=\"/checklist\">FB Audit List</NavLink>\r\n    </Menu.Item>\r\n\r\n    <Menu.Item key=\"nonfbchecklist\">\r\n      <NavLink to=\"/ChecklistNonFB\">Non-FB Audit List</NavLink>\r\n    </Menu.Item>\r\n\r\n  </Menu>\r\n)\r\n\r\nclass LeftMenu extends Component {\r\n  render() {\r\n    return (\r\n      <Menu mode=\"horizontal\">\r\n\r\n        <Menu.Item key=\"audits\">\r\n          <NavLink to=\"/auditlist\">Audits</NavLink>\r\n        </Menu.Item>\r\n\r\n\r\n        <SubMenu key=\"sub1\" title={<span>Create Audit</span>}>\r\n        <Menu.Item key=\"fbchecklist\">\r\n      <NavLink to=\"/checklistFB\">FB Audit List</NavLink>\r\n    </Menu.Item>\r\n    <Menu.Item key=\"nonfbchecklist\">\r\n      <NavLink to=\"/checklistNonFB\">Non-FB Audit List</NavLink>\r\n    </Menu.Item>\r\n          </SubMenu>\r\n\r\n\r\n        <Menu.Item key=\"directory\">\r\n          <NavLink to=\"/directory\">Directory</NavLink>\r\n        </Menu.Item>\r\n\r\n      </Menu>\r\n    );\r\n  }\r\n}\r\nexport default LeftMenu;\r\n\r\n\r\n\r\n","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\layout\\RightMenu.js",["138","139","140","141","142","143"],"import React, { Component } from \"react\";\r\nimport { Menu, Icon } from \"antd\";\r\nimport { logoutUser } from \"../../actions/authActions\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst SubMenu = Menu.SubMenu;\r\nconst MenuItemGroup = Menu.ItemGroup;\r\nclass RightMenu extends Component {\r\n  onLogoutClick = (e) => {\r\n    e.preventDefault();\r\n    this.props.logoutUser();\r\n  };\r\n  render() {\r\n    const { user } = this.props.auth;\r\n\r\n    return (\r\n      <Menu mode=\"horizontal\">\r\n        <Menu.Item key=\"mail\">\r\n          <a href=\"\">Login</a>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"app\">\r\n          <a href=\"\">Register</a>\r\n        </Menu.Item>\r\n      </Menu>\r\n    );\r\n  }\r\n}\r\nRightMenu.propTypes = {\r\n  logoutUser: PropTypes.func.isRequired,\r\n  auth: PropTypes.object.isRequired,\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  auth: state.auth,\r\n});\r\nexport default connect(mapStateToProps, { logoutUser })(RightMenu);\r\n","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\auth\\Login.js",["144"],"import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { loginUser } from \"../../actions/authActions\";\r\nimport classnames from \"classnames\";\r\n\r\nimport { Form, Input, Button, Checkbox } from \"antd\";\r\nimport { UserOutlined, LockOutlined } from \"@ant-design/icons\";\r\n\r\nclass Login extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      email: \"\",\r\n      password: \"\",\r\n      errors: {},\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // If logged in and user navigates to Login page, should redirect them to dashboard\r\n    if (this.props.auth.isAuthenticated) {\r\n      this.props.history.push(\"/auditlist\");\r\n    }\r\n  }\r\n  // might be deprecated\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.auth.isAuthenticated) {\r\n      this.props.history.push(\"/auditlist\"); // push user to dashboard when they login\r\n    }\r\n    if (nextProps.errors) {\r\n      this.setState({\r\n        errors: nextProps.errors,\r\n      });\r\n    }\r\n  }\r\n  onChange = (e) => {\r\n    this.setState({ [e.target.id]: e.target.value });\r\n  };\r\n  onFinish = (values) => {\r\n    console.log(values);\r\n    const userData = {\r\n      email: values.email,\r\n      password: values.password,\r\n    };\r\n    this.props.loginUser(userData); // since we handle the redirect within our component, we don't need to pass in this.props.history as a parameter\r\n  };\r\n  render() {\r\n    const { errors } = this.state;\r\n    return (\r\n      <Form\r\n        onFinish={this.onFinish}\r\n        name=\"normal_login\"\r\n        className=\"login-register-form\"\r\n      >\r\n        <Form.Item\r\n          name=\"email\"\r\n          rules={[{ required: true, message: \"Please input your Email!\" }]}\r\n        >\r\n          <Input\r\n            prefix={<UserOutlined className=\"site-form-item-icon\" />}\r\n            placeholder=\"Email\"\r\n            onChange={this.onChange}\r\n            value={this.state.email}\r\n            error={errors.email}\r\n            id=\"email\"\r\n            type=\"email\"\r\n            className={classnames(\"\", {\r\n              invalid: errors.email || errors.emailnotfound,\r\n            })}\r\n          />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          name=\"password\"\r\n          rules={[{ required: true, message: \"Please input your Password!\" }]}\r\n        >\r\n          <Input\r\n            prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n            placeholder=\"Password\"\r\n            onChange={this.onChange}\r\n            value={this.state.password}\r\n            error={errors.password}\r\n            id=\"password\"\r\n            type=\"password\"\r\n            className={classnames(\"\", {\r\n              invalid: errors.password || errors.passwordincorrect,\r\n            })}\r\n          />\r\n        </Form.Item>\r\n\r\n        <Form.Item>\r\n          <Button\r\n            type=\"primary\"\r\n            htmlType=\"submit\"\r\n            className=\"login-register-form-button\"\r\n          >\r\n            Log in\r\n          </Button>\r\n          Or if you are a new staff member,{\" \"}\r\n          <Link to=\"/Register\">register here!</Link>\r\n        </Form.Item>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\nLogin.propTypes = {\r\n  loginUser: PropTypes.func.isRequired,\r\n  auth: PropTypes.object.isRequired,\r\n  errors: PropTypes.object.isRequired,\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  auth: state.auth,\r\n  errors: state.errors,\r\n});\r\nexport default connect(mapStateToProps, { loginUser })(Login);\r\n","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\auth\\Register.js",["145","146"],"import React, { Component } from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { registerUser } from \"../../actions/authActions\";\r\nimport classnames from \"classnames\";\r\nimport { Form, Input, Button, Checkbox } from \"antd\";\r\nimport { MailOutlined, UserOutlined, LockOutlined } from \"@ant-design/icons\";\r\n\r\nclass Register extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      name: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n      password2: \"\",\r\n      errors: {},\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // If loggied in and user navigates to Register page, should redirect them to dashboad\r\n    if (this.props.auth.isAuthenticaed) {\r\n      this.props.history.push(\"/dashboard\"); // Push new entry into history stack, ie redirecting the user to another route\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.errors) {\r\n      this.setState({\r\n        errors: nextProps.errors,\r\n      });\r\n    }\r\n  }\r\n\r\n  onChange = (e) => {\r\n    this.setState({ [e.target.id]: e.target.value });\r\n  };\r\n  onFinish = (values) => {\r\n    const newUser = {\r\n      name: values.name,\r\n      email: values.email,\r\n      password: values.password,\r\n      password2: values.password2,\r\n    };\r\n    console.log(newUser);\r\n    this.props.registerUser(newUser, this.props.history);\r\n  };\r\n\r\n  render() {\r\n    const { errors } = this.state;\r\n    return (\r\n      <Form\r\n        name=\"normal_login\"\r\n        className=\"login-register-form\"\r\n        onFinish={this.onFinish}\r\n      >\r\n        <Form.Item\r\n          name=\"name\"\r\n          rules={[{ required: true, message: \"Please input your Name!\" }]}\r\n        >\r\n          <Input\r\n            prefix={<UserOutlined className=\"site-form-item-icon\" />}\r\n            placeholder=\"Name\"\r\n            onChange={this.onChange}\r\n            value={this.state.name}\r\n            error={errors.name}\r\n            id=\"name\"\r\n            type=\"text\"\r\n            // className={classnames(\"\", {\r\n            // invalid: errors.name,\r\n            // })}\r\n          />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          name=\"email\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              type: \"email\",\r\n              message: \"Please input a valid Email!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input\r\n            prefix={<MailOutlined className=\"site-form-item-icon\" />}\r\n            placeholder=\"Email\"\r\n            onChange={this.onChange}\r\n            value={this.state.email}\r\n            error={errors.email}\r\n            id=\"email\"\r\n            type=\"email\"\r\n            // className={classnames(\"\", {\r\n            //   invalid: errors.email,\r\n            // })}\r\n          />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          name=\"password\"\r\n          rules={[{ required: true, message: \"Please input your Password!\" }]}\r\n        >\r\n          <Input\r\n            prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n            placeholder=\"Password\"\r\n            onChange={this.onChange}\r\n            value={this.state.password}\r\n            error={errors.password}\r\n            id=\"password\"\r\n            type=\"password\"\r\n            // className={classnames(\"\", {\r\n            //   invalid: errors.password,\r\n            // })}\r\n          />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          name=\"password2\"\r\n          dependencies={[\"password\"]}\r\n          hasFeedback\r\n          rules={[\r\n            { required: true, message: \"Passwords do not match!\" },\r\n            ({ getFieldValue }) => ({\r\n              validator(_, value) {\r\n                if (!value || getFieldValue(\"password\") === value) {\r\n                  return Promise.resolve();\r\n                }\r\n\r\n                return Promise.reject(\r\n                  new Error(\"The two passwords that you entered do not match!\")\r\n                );\r\n              },\r\n            }),\r\n          ]}\r\n        >\r\n          <Input\r\n            prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n            placeholder=\"Confirm Password\"\r\n            onChange={this.onChange}\r\n            value={this.state.password2}\r\n            error={errors.password2}\r\n            id=\"password2\"\r\n            type=\"password\"\r\n            // className={classnames(\"\", {\r\n            // invalid: errors.password2,\r\n            // })}\r\n          />\r\n        </Form.Item>\r\n\r\n        <Form.Item>\r\n          <Button\r\n            type=\"primary\"\r\n            htmlType=\"submit\"\r\n            className=\"login-register-form-button\"\r\n          >\r\n            Register\r\n          </Button>\r\n          Or <Link to=\"/Login\">Login here</Link>\r\n        </Form.Item>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n// Props stands for properties and is being used for passing data from one component to another\r\nRegister.propTypes = {\r\n  registerUser: PropTypes.func.isRequired,\r\n  auth: PropTypes.object.isRequired,\r\n  errors: PropTypes.object.isRequired,\r\n};\r\n\r\n// Get state from Redux and map it to props\r\nconst mapStateToProps = (state) => ({\r\n  auth: state.auth, // allows us to call this.props.auth\r\n  errors: state.errors, // allows us to call this.props.errors\r\n});\r\n\r\nexport default connect(mapStateToProps, { registerUser })(withRouter(Register));\r\n","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\store.js",[],"C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\utils\\setAuthToken.js",[],"C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\actions\\authActions.js",[],"C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\dashboard\\Dashboard.js",[],"C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\private-route\\PrivateRoute.js",[],"C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\actions\\types.js",[],"C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\reducers\\index.js",[],"C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\reducers\\errorReducer.js",[],"C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\reducers\\authReducer.js",[],"C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\Audit-list.js",["147","148","149","150"],"import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { Table, Tag, Space } from \"antd\";\r\nimport { getAudits } from \"../data/AuditData.ts\";\r\n\r\nconst { Column, ColumnGroup } = Table;\r\n\r\nconst Audit = (props) => (\r\n  <tr>\r\n    <td>{props.audit.username}</td>\r\n    <td>{props.audit.image}</td>\r\n    <td>{props.audit.notes}</td>\r\n    <td>{props.audit.tags}</td>\r\n    <td>{props.audit.date.substring(0, 10)}</td>\r\n    <td>\r\n      <Link to={\"/edit/\" + props.audit._id}>edit</Link> |\r\n      <a\r\n        href=\"#\"\r\n        onClick={() => {\r\n          props.deleteAudit(props.audit._id);\r\n        }}\r\n      >\r\n        delete\r\n      </a>\r\n    </td>\r\n  </tr>\r\n);\r\n\r\nexport default class AuditList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.deleteAudit = this.deleteAudit.bind(this);\r\n\r\n    this.state = { audits: [] };\r\n  }\r\n\r\n  componentDidMount() {\r\n    axios\r\n      .get(\"http://localhost:5000/audits\")\r\n      .then((response) => {\r\n        this.setState({ audits: response.data });\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  deleteAudit(id) {\r\n    axios\r\n      .delete(\"http://localhost:5000/audits/\" + id)\r\n      .then((res) => console.log(res.data));\r\n    this.setState({\r\n      audits: this.state.audits.filter((el) => el._id !== id),\r\n    });\r\n  }\r\n\r\n  auditList() {\r\n    return this.state.audits.map((currentaudit) => {\r\n      return (\r\n        <Audit\r\n          audit={currentaudit}\r\n          deleteAudit={this.deleteAudit}\r\n          key={currentaudit._id}\r\n        />\r\n      );\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"table\">\r\n        <Table\r\n          dataSource={data}\r\n          title={() => <div className=\"table-title\">Audits</div>}\r\n        >\r\n          <Column title=\"Username\" dataIndex=\"username\" key=\"username\" />\r\n          <Column\r\n            title=\"Image\"\r\n            dataIndex=\"image\"\r\n            key=\"image\"\r\n            render={(text, record) => (\r\n              <a>\r\n                <td onClick={() => window.open(text, \"_blank\")}>View Image</td>\r\n              </a>\r\n            )}\r\n          />\r\n          <Column title=\"Notes\" dataIndex=\"notes\" key=\"notes\" />\r\n          <Column title=\"Date\" dataIndex=\"date\" key=\"date\" />\r\n          <Column\r\n            title=\"Tags\"\r\n            dataIndex=\"tags\"\r\n            key=\"tags\"\r\n            render={(tags) => (\r\n              <>\r\n                {tags.map((tag) => (\r\n                  <Tag color=\"blue\" key={tag}>\r\n                    {tag}\r\n                  </Tag>\r\n                ))}\r\n              </>\r\n            )}\r\n          />\r\n        </Table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst data = getAudits(\"Pamela\");\r\n","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\Directory.js",["151","152","153"],"import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Table } from \"antd\";\r\nimport { getData } from \"../data/StoreData.ts\";\r\n\r\nconst { Column, ColumnGroup } = Table;\r\n\r\nexport default class Directory extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  componentDidMount() {\r\n    //code runs before the page loads\r\n    axios.get(\"http://localhost:5000/users/\").then((response) => {\r\n      if (response.data.length > 0) {\r\n        this.setState({\r\n          users: response.data.map((user) => user.username),\r\n          username: response.data[0].username, //set username as the first username in the database\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div class=\"table\">\r\n        <Table\r\n          // columns={columns}\r\n          dataSource={data}\r\n          title={() => <div className=\"table-title\">CGH</div>}\r\n          size=\"middle\"\r\n          pagination={{ position: \"bottomLeft\" }}\r\n        >\r\n          <Column\r\n            title=\"Store Name\"\r\n            dataIndex=\"name\"\r\n            key=\"name\"\r\n            render={(text, record) => (\r\n              <a>\r\n                <td onClick={() => window.open(record.image, \"_blank\")}>\r\n                  {text}\r\n                </td>\r\n              </a>\r\n            )}\r\n          />\r\n          <Column title=\"Location\" dataIndex=\"location\" key=\"location\" />\r\n          <Column title=\"Terms\" dataIndex=\"terms\" key=\"terms\" />\r\n          <Column title=\"Expiry\" dataIndex=\"expiry\" key=\"expiry\" />\r\n        </Table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// const columns = [\r\n//     {\r\n//         title: 'Store Name',\r\n//         dataIndex: 'name',\r\n//         key: 'name',\r\n//         render: (text, record) => <a>\r\n//             <td onClick={() => window.open(text, \"_blank\")} /> {text} </a>,\r\n//     },\r\n//     {\r\n//         title: 'Location',\r\n//         dataIndex: 'location',\r\n//         key: 'location',\r\n//     },\r\n//     {\r\n//         title: 'Terms',\r\n//         dataIndex: 'terms',\r\n//         key: 'terms',\r\n//     },\r\n//     {\r\n//         title: 'Expiry',\r\n//         dataIndex: 'expiry',\r\n//         key: 'expiry',\r\n//     },\r\n// ];\r\n\r\nconst data = getData(\"\");\r\n","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\auth\\RegisterTenant.js",["154","155","156","157","158"],"import React, { Component } from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { registerUser } from \"../../actions/authActions\";\r\nimport classnames from \"classnames\";\r\nimport { Form, Input, Button, Checkbox, Select } from \"antd\";\r\nimport { MailOutlined, UserOutlined, LockOutlined } from \"@ant-design/icons\";\r\n\r\n// TODO: this should be taken from db\r\nconst institutions = [\r\n  { label: \"CGH\", value: \"CGH\" },\r\n  { label: \"SGH\", value: \"SGH\" },\r\n  { label: \"KKH\", value: \"KKH\" },\r\n];\r\n\r\nclass Register extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      email: \"\",\r\n      address: \"\",\r\n      institution: \"\",\r\n      auditor: \"\",\r\n      errors: {},\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // If loggied in and user navigates to Register page, should redirect them to dashboad\r\n    if (this.props.auth.isAuthenticaed) {\r\n      this.props.history.push(\"/dashboard\"); // Push new entry into history stack, ie redirecting the user to another route\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.errors) {\r\n      this.setState({\r\n        errors: nextProps.errors,\r\n      });\r\n    }\r\n  }\r\n\r\n  onChange = (e) => {\r\n    this.setState({ [e.target.id]: e.target.value });\r\n  };\r\n\r\n  onDropdownChange = (e, { value }) => this.setState({ value });\r\n\r\n  // TODO create password method\r\n  createPassword() {\r\n    return \"password\";\r\n  }\r\n\r\n  // TODO send email to tenant with login details\r\n\r\n  onFinish = (values) => {\r\n    const newUser = {\r\n      email: values.email,\r\n      address: values.address,\r\n      institution: values.institution,\r\n      auditor: values.auditor,\r\n      password: this.createPassword(),\r\n    };\r\n    console.log(newUser);\r\n    // this.props.registerUser(newUser, this.props.history);\r\n  };\r\n\r\n  render() {\r\n    const { user } = this.props.auth;\r\n    const { errors } = this.state;\r\n    const layout = {\r\n      labelCol: { span: 3 },\r\n    };\r\n\r\n    return (\r\n      <Form\r\n        {...layout}\r\n        name=\"normal_login\"\r\n        className=\"login-register-form\"\r\n        onFinish={this.onFinish}\r\n        initialValues={{\r\n          auditor: user.name,\r\n        }}\r\n      >\r\n        <h1>Create a Tenant Account</h1>\r\n\r\n        {/* No name, replace with id for annonymity */}\r\n\r\n        <Form.Item\r\n          label=\"Email\"\r\n          name=\"email\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              type: \"email\",\r\n              message: \"Please input a valid Email!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input\r\n            placeholder=\"Email\"\r\n            onChange={this.onChange}\r\n            value={this.state.email}\r\n            error={errors.email}\r\n            id=\"email\"\r\n            type=\"email\"\r\n            // className={classnames(\"\", {\r\n            //   invalid: errors.email,\r\n            // })}\r\n          />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label=\"Address\"\r\n          name=\"address\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              type: \"string\",\r\n              message: \"Please input a valid Address!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input\r\n            placeholder=\"Address\"\r\n            onChange={this.onChange}\r\n            value={this.state.address}\r\n            error={errors.address}\r\n            id=\"address\"\r\n            type=\"address\"\r\n            // className={classnames(\"\", {\r\n            //   invalid: errors.email,\r\n            // })}\r\n          />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label=\"Institution\"\r\n          name=\"institution\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please select an institution!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Select\r\n            className=\"dropdown\"\r\n            icon={MailOutlined}\r\n            placeholder=\"Institution\"\r\n            options={institutions}\r\n            onChange={this.onDropdownChange}\r\n            id=\"institution\"\r\n            type=\"institution\"\r\n            value={this.state.institution}\r\n            error={errors.institution}\r\n          />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label=\"Auditor\"\r\n          name=\"auditor\"\r\n          rules={[{ required: true, message: \"Please input name of Auditor!\" }]}\r\n        >\r\n          <Input\r\n            placeholder=\"Auditor\"\r\n            onChange={this.onChange}\r\n            value={this.state.auditor}\r\n            error={errors.auditor}\r\n            id=\"auditor\"\r\n            type=\"auditor\"\r\n          />\r\n        </Form.Item>\r\n\r\n        <Form.Item>\r\n          <Button\r\n            type=\"primary\"\r\n            htmlType=\"submit\"\r\n            className=\"login-register-form-button\"\r\n          >\r\n            Create Tenant\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n// Props stands for properties and is being used for passing data from one component to another\r\nRegister.propTypes = {\r\n  registerUser: PropTypes.func.isRequired,\r\n  auth: PropTypes.object.isRequired,\r\n  errors: PropTypes.object.isRequired,\r\n};\r\n\r\n// Get state from Redux and map it to props\r\nconst mapStateToProps = (state) => ({\r\n  auth: state.auth, // allows us to call this.props.auth\r\n  errors: state.errors, // allows us to call this.props.errors\r\n});\r\n\r\nexport default connect(mapStateToProps, { registerUser })(withRouter(Register));\r\n","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\Checklist.js",["159","160"],"import \"../App.css\";\r\nimport { Collapse, Divider, List, Input, Checkbox, Button, Modal } from \"antd\";\r\nimport React, { Component } from \"react\";\r\nimport importJSON from \"../data/questionsDict.json\";\r\nimport PhotoPop from \"./photo/PhotoPop.js\"\r\nimport { submit, display } from \"../actions/auditActions.js\"\r\nimport { FB } from '../data/questionsData'\r\nconst Fb = importJSON.fb;\r\nconst { Panel } = Collapse;\r\n\r\n\r\nvar prof_cat_size = FB.Professionalism.length + FB.Staff_Hygiene.length;\r\nvar housekeeping_cat_size = FB.General_Environment_Cleanliness.length + FB.Hand_Hygiene_Facilities.length;\r\nvar food_cat_size = FB.Storage_Food_Refrigerator_Warmer.length + FB.Storage_Preparation_Food.length\r\nvar health_cat_size = FB.Food.length + FB.Beverage.length;\r\nvar safety_cat_size = FB.General_Safety.length + FB.Electrical_Safety.length + FB.Fire_Emergency_Safety.length;\r\n\r\n\r\n\r\nclass Checklist extends Component {\r\n  state = {\r\n    type: \"FB\",\r\n    checked: false,\r\n    items: [],\r\n    visible: false,\r\n    visible2: false,\r\n    profcount: 0,\r\n    gc_count: 0,\r\n    food_count: 0,\r\n    health_count: 0,\r\n    safety_count: 0,\r\n    total_score: 0,\r\n  };\r\n\r\n  componentWillMount = () => {\r\n    this.selectedCheckboxes = new Set();\r\n  }\r\n\r\n  toggleCheckbox = label => {\r\n    if (this.selectedCheckboxes.has(label)) {\r\n      this.selectedCheckboxes.delete(label);\r\n    } else {\r\n      this.selectedCheckboxes.add(label);\r\n    }\r\n  }\r\n\r\n  handleFormSubmit = formSubmitEvent => {\r\n    formSubmitEvent.preventDefault();\r\n\r\n    for (const checkbox of this.selectedCheckboxes) {\r\n      console.log(checkbox, 'is selected.');\r\n    }\r\n  }\r\n\r\n  //for professionalism and staff hygiene cat\r\n  createprofCheckbox = label => (\r\n    <Checkbox\r\n      label={label}\r\n      handleCheckboxChange={this.toggleCheckbox}\r\n      key={label}\r\n      onChange={e => this.handleprofCheckCount(e)}\r\n    />\r\n  )\r\n  handleprofCheckCount = (e) => {\r\n    const { checked, type } = e.target;\r\n    if (type === \"checkbox\" && checked === true) {\r\n      this.setState(state => state.profcount++)\r\n    } else {\r\n      this.setState(state => state.profcount--)\r\n    }\r\n  }\r\n  //for housekeeping and general cleanliness cat\r\n  creategcCheckbox = label => (\r\n    <Checkbox\r\n      label={label}\r\n      handleCheckboxChange={this.toggleCheckbox}\r\n      key={label}\r\n      onChange={e => this.handlegcCheckCount(e)}\r\n    />\r\n  )\r\n  handlegcCheckCount = (e) => {\r\n    const { checked, type } = e.target;\r\n    if (type === \"checkbox\" && checked === true) {\r\n      this.setState(state => state.gc_count++)\r\n    } else {\r\n      this.setState(state => state.gc_count--)\r\n    }\r\n  }\r\n  //for food hygiene cat\r\n  createfoodCheckbox = label => (\r\n    <Checkbox\r\n      label={label}\r\n      handleCheckboxChange={this.toggleCheckbox}\r\n      key={label}\r\n      onChange={e => this.handlefoodCheckCount(e)}\r\n    />\r\n  )\r\n  handlefoodCheckCount = (e) => {\r\n    const { checked, type } = e.target;\r\n    if (type === \"checkbox\" && checked === true) {\r\n      this.setState(state => state.food_count++)\r\n    } else {\r\n      this.setState(state => state.food_count--)\r\n    }\r\n  }\r\n\r\n  updateItems = () => {\r\n    display((data) => {\r\n      // console.log(data);\r\n      this.setState({ ...this.state, items: data });\r\n    });\r\n  }\r\n\r\n  //for healthier choice cat \r\n  createhealthCheckbox = label => (\r\n    <Checkbox\r\n      label={label}\r\n      handleCheckboxChange={this.toggleCheckbox}\r\n      key={label}\r\n      onChange={e => this.handlehealthCheckCount(e)}\r\n    />\r\n  )\r\n  handlehealthCheckCount = (e) => {\r\n    const { checked, type } = e.target;\r\n    if (type === \"checkbox\" && checked === true) {\r\n      this.setState(state => state.health_count++)\r\n    } else {\r\n      this.setState(state => state.health_count--)\r\n    }\r\n  };\r\n\r\n  submitAudit = () => {\r\n    submit({\r\n      type: \"FB\",\r\n      profcount: Math.round(this.state.profcount / 2),\r\n      gc_count: Math.round(this.state.gc_count / 2),\r\n      food_count: Math.round(this.state.food_count / 2),\r\n      health_count: Math.round(this.state.health_count / 2),\r\n      safety_count: Math.round(this.state.safety_count / 2),\r\n      total_score: Math.round(20 / 2 / (safety_cat_size) * (this.state.safety_count)\r\n        + 15 / 2 / (health_cat_size) * (this.state.health_count)\r\n        + 35 / 2 / (food_cat_size) * (this.state.food_count)\r\n        + 20 / 2 / (housekeeping_cat_size) * (this.state.gc_count)\r\n        + 10 / 2 / (prof_cat_size) * (this.state.profcount)),\r\n    });\r\n    this.showModal2();\r\n  }\r\n\r\n  showModal = () => {\r\n    this.setState({\r\n      visible: true,\r\n    });\r\n  };\r\n\r\n  showModal2 = () => {\r\n    this.setState({\r\n      visible2: true,\r\n    });\r\n  };\r\n\r\n  handleOk = e => {\r\n    console.log(e);\r\n    this.setState({\r\n      visible: false,\r\n    });\r\n  };\r\n\r\n  handleOk2 = e => {\r\n    console.log(e);\r\n    this.setState({\r\n      visible2: false,\r\n      visible: false,\r\n    });\r\n  };\r\n\r\n  handleCancel = e => {\r\n    console.log(e);\r\n    this.setState({\r\n      visible: false,\r\n    });\r\n  };\r\n\r\n  //for workplace safety cat\r\n  createsafetyCheckbox = label => (\r\n    <Checkbox\r\n      label={label}\r\n      handleCheckboxChange={this.toggleCheckbox}\r\n      key={label}\r\n      onChange={e => this.handlesafetyCheckCount(e)}\r\n    />\r\n  )\r\n  handlesafetyCheckCount = (e) => {\r\n    const { checked, type } = e.target;\r\n    if (type === \"checkbox\" && checked === true) {\r\n      this.setState(state => state.safety_count++)\r\n    } else {\r\n      this.setState(state => state.safety_count--)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    console.log(this.state.items);\r\n    return (\r\n      <>\r\n        <h1 className=\"start\">F&B Checklist</h1>\r\n\r\n        <Divider />\r\n\r\n        <div>\r\n          <Collapse accordion defaultActiveKey=\"1\" >\r\n\r\n            <Panel header=\"Professionalism & Staff Hygiene (10%)\" key=\"1\" className=\"bg-orange text-white\">\r\n              <Collapse accordion defaultActiveKey=\"1\" >\r\n                <Panel header=\"Professionalism\" key=\"1\" className=\"bg-orange text-white\">\r\n                  <List\r\n                    dataSource={FB.Professionalism} // Questions\r\n                    renderItem={(item) => (\r\n                      <List.Item>\r\n                        <div className=\"create-audit-row\">{item}</div>\r\n                        {this.createprofCheckbox()}\r\n                      </List.Item>\r\n                    )}\r\n                  />\r\n                </Panel>\r\n                <Panel header=\"Staff Hygiene\" key=\"2\" className=\"bg-orange text-white\">\r\n                  <List\r\n                    dataSource={FB.Staff_Hygiene} // Questions\r\n                    renderItem={(item) => (\r\n                      <List.Item>\r\n                        <div className=\"create-audit-row\">{item}</div>\r\n                        <div>{this.createprofCheckbox()}</div>\r\n                      </List.Item>\r\n                    )}\r\n                  />\r\n                </Panel>\r\n              </Collapse>\r\n              <div class=\"pt-10 font-bold text-right\">Score: {Math.round(10 / 2 / (prof_cat_size) * (this.state.profcount))}/10</div>\r\n            </Panel>\r\n\r\n            <Panel header=\"Housekeeping & General Cleanliness (20%)\" key=\"2\" className=\"bg-orange text-white\">\r\n              <Collapse accordion defaultActiveKey=\"1\" >\r\n                <Panel header=\"General Environment Cleanness\" key=\"1\" className=\"bg-orange text-white\">\r\n                  <List\r\n                    dataSource={FB.General_Environment_Cleanliness} // Questions\r\n                    renderItem={(item) => (\r\n                      <List.Item>\r\n                        <div className=\"create-audit-row\">{item}</div>\r\n                        <div>{this.creategcCheckbox()}</div>\r\n                      </List.Item>\r\n                    )}\r\n                  />\r\n                </Panel>\r\n                <Panel header=\"Hand Hygiene Facilities\" key=\"2\" className=\"bg-orange text-white\">\r\n                  <List\r\n                    dataSource={FB.Hand_Hygiene_Facilities} // Questions\r\n                    renderItem={(item) => (\r\n                      <List.Item>\r\n                        <div className=\"create-audit-row\">{item}</div>\r\n                        <div>{this.creategcCheckbox()}</div>\r\n                      </List.Item>\r\n                    )}\r\n                  />\r\n                </Panel>\r\n              </Collapse>\r\n              <div class=\"pt-10 font-bold text-right\">Score: {Math.round(20 / 2 / (housekeeping_cat_size) * (this.state.gc_count))}/20</div>\r\n            </Panel>\r\n\r\n            <Panel header=\"Food Hygiene (35%)\" key=\"3\" className=\"bg-orange text-white\">\r\n              <Collapse accordion defaultActiveKey=\"1\">\r\n                <Panel header=\"Storage & Preparation of Food\" key=\"1\" className=\"bg-orange text-white\">\r\n                  <List\r\n                    dataSource={FB.Storage_Preparation_Food} // Questions\r\n                    renderItem={(item) => (\r\n                      <List.Item>\r\n                        <div className=\"create-audit-row\">{item}</div>\r\n                        <div>{this.createfoodCheckbox()}</div>\r\n                      </List.Item>\r\n                    )}\r\n                  />\r\n                </Panel>\r\n                <Panel header=\"Storage of Food in Refrigerator/ Warmer\" key=\"2\" className=\"bg-orange text-white\">\r\n                  <List\r\n                    dataSource={FB.Storage_Food_Refrigerator_Warmer} // Questions\r\n                    renderItem={(item) => (\r\n                      <List.Item>\r\n                        <div className=\"create-audit-row\">{item}</div>\r\n                        <div>{this.createfoodCheckbox()}</div>\r\n                      </List.Item>\r\n                    )}\r\n                  />\r\n                </Panel>\r\n              </Collapse>\r\n              <div class=\"pt-10 font-bold text-right\">Score: {Math.round(35 / 2 / (food_cat_size) * (this.state.food_count))}/35</div>\r\n            </Panel>\r\n\r\n            <Panel header=\"Healthier Choice in line with HPB’s Healthy Eating’s Initiative (15%)\" key=\"4\" className=\"bg-orange text-white\">\r\n              <Collapse accordion defaultActiveKey=\"1\" >\r\n                <Panel header=\"Food\" key=\"1\" className=\"bg-orange text-white\">\r\n                  <List\r\n                    dataSource={FB.Food} // Questions\r\n                    renderItem={(item) => (\r\n                      <List.Item>\r\n                        <div className=\"create-audit-row\">{item}</div>\r\n                        {this.createhealthCheckbox()}\r\n                      </List.Item>\r\n                    )}\r\n                  />\r\n                </Panel>\r\n                <Panel header=\"Beverage\" key=\"2\" className=\"bg-orange text-white\">\r\n                  <List\r\n                    dataSource={FB.Beverage} // Questions\r\n                    renderItem={(item) => (\r\n                      <List.Item>\r\n                        <div className=\"create-audit-row\">{item}</div>\r\n                        <div>{this.createhealthCheckbox()}</div>\r\n                      </List.Item>\r\n                    )}\r\n                  />\r\n                </Panel>\r\n              </Collapse>\r\n              <div class=\"pt-10 font-bold text-right\">Score: {Math.round(15 / 2 / (health_cat_size) * (this.state.health_count))}/15</div>\r\n            </Panel>\r\n\r\n            <Panel header=\"Workplace Safety & Health (20%)\" key=\"5\" className=\"bg-orange text-white\">\r\n              <Collapse accordion defaultActiveKey=\"1\" >\r\n                <Panel header=\"General Safety\" key=\"1\" className=\"bg-orange text-white\">\r\n                  <List\r\n                    dataSource={FB.General_Safety} // Questions\r\n                    renderItem={(item) => (\r\n                      <List.Item>\r\n                        <div className=\"create-audit-row\">{item}</div>\r\n                        {this.createsafetyCheckbox()}\r\n                      </List.Item>\r\n                    )}\r\n                  />\r\n                </Panel>\r\n                <Panel header=\"Fire & Emergency Safety\" key=\"2\" className=\"bg-orange text-white\">\r\n                  <List\r\n                    dataSource={FB.Fire_Emergency_Safety} // Questions\r\n                    renderItem={(item) => (\r\n                      <List.Item>\r\n                        <div className=\"create-audit-row\">{item}</div>\r\n                        <div>{this.createsafetyCheckbox()}</div>\r\n                      </List.Item>\r\n                    )}\r\n                  />\r\n                </Panel>\r\n                <Panel header=\"Electrical Safety\" key=\"3\" className=\"bg-orange text-white\">\r\n                  <List\r\n                    dataSource={FB.Electrical_Safety} // Questions\r\n                    renderItem={(item) => (\r\n                      <List.Item>\r\n                        <div className=\"create-audit-row\">{item}</div>\r\n                        <div>{this.createsafetyCheckbox()}</div>\r\n                      </List.Item>\r\n                    )}\r\n                  />\r\n                </Panel>\r\n              </Collapse>\r\n              <div class=\"pt-10 font-bold text-right\">Score: {Math.round(20 / 2 / (safety_cat_size) * (this.state.safety_count))}/20</div>\r\n            </Panel>\r\n          </Collapse>\r\n        </div>\r\n\r\n        <div class=\"pt-10 font-bold text-centre\">Total Score:{Math.round(20 / 2 / (safety_cat_size) * (this.state.safety_count)\r\n          + 15 / 2 / (health_cat_size) * (this.state.health_count)\r\n          + 35 / 2 / (food_cat_size) * (this.state.food_count)\r\n          + 20 / 2 / (housekeeping_cat_size) * (this.state.gc_count)\r\n          + 10 / 2 / (prof_cat_size) * (this.state.profcount))} </div>\r\n        <Button type=\"primary\" onClick={this.showModal}>\r\n          Upload Photo\r\n        </Button>\r\n        <Modal\r\n          title=\"Upload Photo\"\r\n          visible={this.state.visible}\r\n          onOk={this.handleOk}\r\n          onCancel={this.handleCancel}\r\n          okButtonProps={{ disabled: true }}\r\n          cancelButtonProps={{ disabled: false }}\r\n        >\r\n          <PhotoPop />\r\n        </Modal>\r\n        <Button onClick={() => this.submitAudit()} className=\"submit-button\" type=\"primary\" htmlType=\"submit\">\r\n          SUBMIT\r\n        </Button>\r\n        {/* <Button onClick={() => this.updateItems()} className=\"submit-button\" type=\"primary\" htmlType=\"submit\">\r\n          TEST\r\n        </Button> */}\r\n        <Modal\r\n          title=\"\"\r\n          visible={this.state.visible2}\r\n          onOk={this.handleOk2}\r\n          okButtonProps={{ disabled: false }}\r\n          cancelButtonProps={{ disabled: true, visible: false, }}\r\n        >\r\n          <p>Audit Uploaded!</p>\r\n        </Modal>\r\n      </>\r\n    )\r\n\r\n\r\n  }\r\n}\r\nexport default Checklist;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\layout\\RightMenuLoggedIn.js",["161","162","163","164","165","166","167"],"import React, { Component } from \"react\";\r\nimport { Menu, Icon, Button } from \"antd\";\r\nimport { logoutUser } from \"../../actions/authActions\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\n\r\nconst SubMenu = Menu.SubMenu;\r\nconst MenuItemGroup = Menu.ItemGroup;\r\nclass RightMenu extends Component {\r\n  onLogoutClick = (e) => {\r\n    e.preventDefault();\r\n    this.props.logoutUser();\r\n  };\r\n  render() {\r\n    const { user } = this.props.auth;\r\n\r\n    return (\r\n      <Menu mode=\"horizontal\">\r\n        <Menu.Item key=\"mail\">\r\n          <Button onClick={this.onLogoutClick} type=\"text\">\r\n            Logout\r\n          </Button>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"app\">\r\n          <a href=\"\">Name of user</a>\r\n        </Menu.Item>\r\n      </Menu>\r\n    );\r\n  }\r\n}\r\nRightMenu.propTypes = {\r\n  logoutUser: PropTypes.func.isRequired,\r\n  auth: PropTypes.object.isRequired,\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  auth: state.auth,\r\n});\r\nexport default connect(mapStateToProps, { logoutUser })(RightMenu);\r\n","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\data\\AuditData.ts",[],["168","169"],"C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\data\\StoreData.ts",[],"C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\ChecklistNonFB.js",["170","171","172","173","174"],"import \"../App.css\";\r\nimport { Collapse, Divider, List, Input, Checkbox, Button, Modal } from \"antd\";\r\nimport React, { Component } from \"react\";\r\nimport importJSON from \"../data/questionsDict.json\";\r\nimport PhotoPop from \"./photo/PhotoPop.js\"\r\nimport { submit } from \"../actions/auditActions.js\"\r\nconst nonFb = importJSON.non_fb;\r\nconst { Panel } = Collapse;\r\n\r\n// TODO: Take score from json file => Update the score, replace the json file\r\n\r\nclass ChecklistNonFB extends Component {\r\n  // componentWillMount = () => {\r\n  //   this.selectedCheckboxes = new Set();\r\n  // };\r\n\r\n  // toggleCheckbox = (label) => {\r\n  //   if (this.selectedCheckboxes.has(label)) {\r\n  //     this.selectedCheckboxes.delete(label);\r\n  //   } else {\r\n  //     this.selectedCheckboxes.add(label);\r\n  //   }\r\n  // };\r\n\r\n  // handleFormSubmit = (formSubmitEvent) => {\r\n  //   formSubmitEvent.preventDefault();\r\n\r\n  //   for (const checkbox of this.selectedCheckboxes) {\r\n  //     console.log(checkbox, \"is selected.\");\r\n  //   }\r\n  // };\r\n\r\n  onFinish = () => {\r\n    var newState = [];\r\n    for (var i = 0; i < this.state.catCounts.length; i++) {\r\n      newState.push(this.state.catCounts[i] / 2);\r\n    }\r\n    const submitData = {\r\n      catCounts: newState,\r\n    };\r\n\r\n    console.log(submitData);\r\n  };\r\n\r\n  submitAudit = () => {\r\n    submit({\r\n      type: \"Non-FB\",\r\n      catCounts: this.state.catCounts,\r\n      total_score: catCounts[0] + catCounts[1] + catCounts[2],\r\n    });\r\n    this.showModal2();\r\n  }\r\n\r\n  showModal = () => {\r\n    this.setState({\r\n      visible: true,\r\n    });\r\n  };\r\n\r\n  showModal2 = () => {\r\n    this.setState({\r\n      visible2: true,\r\n    });\r\n  };\r\n\r\n  handleOk = e => {\r\n    console.log(e);\r\n    this.setState({\r\n      visible: false,\r\n    });\r\n  };\r\n\r\n  handleOk2 = e => {\r\n    console.log(e);\r\n    this.setState({\r\n      visible2: false,\r\n      visible: false,\r\n    });\r\n  };\r\n\r\n  handleCancel = e => {\r\n    console.log(e);\r\n    this.setState({\r\n      visible: false,\r\n    });\r\n  };\r\n\r\n  createCheckbox = (label, catIndex) => (\r\n    <Checkbox\r\n      label={label}\r\n      // handleCheckboxChange={this.toggleCheckbox}\r\n      key={label}\r\n      onChange={(e) => this.handleCount(e, catIndex)}\r\n    />\r\n  );\r\n\r\n  // not exactly dynamic\r\n  state = {\r\n    type: \"Non-FB\",\r\n    checked: false,\r\n    catCounts: [0, 0, 0],\r\n    // counts[0]: for Professionalism & Staff Hygiene (20%), \r\n    //counts[1]: for Housekeeping & General Cleanliness (40%)\r\n    //counts[2]: for Workplace Safety & Health (40%)\r\n    total_score: 0,\r\n  };\r\n  handleCount = (e, catIndex) => {\r\n    const { checked, type } = e.target;\r\n    switch (catIndex) {\r\n      case 0:\r\n        if (type === \"checkbox\" && checked === true) {\r\n          this.setState((state) => state.catCounts[0]++);\r\n        } else {\r\n          this.setState((state) => state.catCounts[0]--);\r\n        }\r\n        break;\r\n      case 1:\r\n        if (type === \"checkbox\" && checked === true) {\r\n          this.setState((state) => state.catCounts[1]++);\r\n        } else {\r\n          this.setState((state) => state.catCounts[1]--);\r\n        }\r\n        break;\r\n      case 2:\r\n        if (type === \"checkbox\" && checked === true) {\r\n          this.setState((state) => state.catCounts[2]++);\r\n        } else {\r\n          this.setState((state) => state.catCounts[2]--);\r\n        }\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"panels\">\r\n        {nonFb.map((cat, catIndex) => {\r\n          // var catScore = cat.score;\r\n          return (\r\n            // Category\r\n            <Collapse defaultActiveKey={[\"1\"]}>\r\n              <Panel\r\n                header={<div catIndex={catIndex}>{cat.name}</div>}\r\n                key={catIndex + 1}\r\n                className=\"bg-orange\"\r\n              >\r\n                <div catIndex={catIndex}>\r\n                  {cat.subcategories.map((subCat, subCatIndex) => {\r\n                    return (\r\n                      // SubCategory\r\n                      <Collapse defaultActiveKey={[\"1\"]}>\r\n                        <Panel\r\n                          header={\r\n                            <div subCatIndex={subCatIndex}>{subCat.name}</div>\r\n                          }\r\n                          key={subCatIndex + 1}\r\n                          className=\"bg-orange\"\r\n                        >\r\n                          <List\r\n                            dataSource={subCat.questions} // Questions\r\n                            renderItem={(item) => (\r\n                              <List.Item>\r\n                                <div className=\"create-audit-row\">{item}</div>\r\n                                <div>{this.createCheckbox(item, catIndex)}</div>\r\n                              </List.Item>\r\n                            )}\r\n                          />\r\n                        </Panel>\r\n                      </Collapse>\r\n                    );\r\n                  })}\r\n                </div>\r\n                <div>Score: {this.state.catCounts[catIndex] / 2}</div>\r\n              </Panel>\r\n            </Collapse>\r\n          );\r\n        })}\r\n        <Button\r\n          className=\"submit-button\"\r\n          type=\"primary\"\r\n          onClick={this.onFinish}\r\n        >\r\n          SUBMIT\r\n        </Button>\r\n        <Button type=\"primary\" onClick={this.showModal}>\r\n          Upload Photo\r\n        </Button>\r\n        <Modal\r\n          title=\"Upload Photo\"\r\n          visible={this.state.visible}\r\n          onOk={this.handleOk}\r\n          onCancel={this.handleCancel}\r\n          okButtonProps={{ disabled: true }}\r\n          cancelButtonProps={{ disabled: false }}\r\n        >\r\n          <PhotoPop />\r\n        </Modal>\r\n        <Button onClick={() => this.submitAudit()} className=\"submit-button\" type=\"primary\" htmlType=\"submit\">\r\n          SUBMIT\r\n        </Button>\r\n        {/* <Button onClick={() => this.updateItems()} className=\"submit-button\" type=\"primary\" htmlType=\"submit\">\r\n          TEST\r\n        </Button> */}\r\n        <Modal\r\n          title=\"\"\r\n          visible={this.state.visible2}\r\n          onOk={this.handleOk2}\r\n          okButtonProps={{ disabled: false }}\r\n          cancelButtonProps={{ disabled: true, visible: false, }}\r\n        >\r\n          <p>Audit Uploaded!</p>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ChecklistNonFB;","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\actions\\auditActions.js",[],"C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\photo\\PhotoPop.js",[],"C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\actions\\photoActions.js",[],"C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\data\\questionsData.js",[],{"ruleId":"175","replacedBy":"176"},{"ruleId":"177","replacedBy":"178"},{"ruleId":"179","severity":1,"message":"180","line":2,"column":16,"nodeType":"181","messageId":"182","endLine":2,"endColumn":20},{"ruleId":"179","severity":1,"message":"183","line":2,"column":22,"nodeType":"181","messageId":"182","endLine":2,"endColumn":30},{"ruleId":"179","severity":1,"message":"184","line":2,"column":32,"nodeType":"181","messageId":"182","endLine":2,"endColumn":38},{"ruleId":"179","severity":1,"message":"185","line":4,"column":8,"nodeType":"181","messageId":"182","endLine":4,"endColumn":16},{"ruleId":"179","severity":1,"message":"186","line":7,"column":7,"nodeType":"181","messageId":"182","endLine":7,"endColumn":20},{"ruleId":"179","severity":1,"message":"187","line":9,"column":7,"nodeType":"181","messageId":"182","endLine":9,"endColumn":22},{"ruleId":"179","severity":1,"message":"180","line":2,"column":16,"nodeType":"181","messageId":"182","endLine":2,"endColumn":20},{"ruleId":"179","severity":1,"message":"188","line":7,"column":7,"nodeType":"181","messageId":"182","endLine":7,"endColumn":14},{"ruleId":"179","severity":1,"message":"186","line":8,"column":7,"nodeType":"181","messageId":"182","endLine":8,"endColumn":20},{"ruleId":"179","severity":1,"message":"189","line":15,"column":13,"nodeType":"181","messageId":"182","endLine":15,"endColumn":17},{"ruleId":"190","severity":1,"message":"191","line":20,"column":11,"nodeType":"192","endLine":20,"endColumn":22},{"ruleId":"190","severity":1,"message":"191","line":23,"column":11,"nodeType":"192","endLine":23,"endColumn":22},{"ruleId":"179","severity":1,"message":"193","line":8,"column":31,"nodeType":"181","messageId":"182","endLine":8,"endColumn":39},{"ruleId":"179","severity":1,"message":"194","line":6,"column":8,"nodeType":"181","messageId":"182","endLine":6,"endColumn":18},{"ruleId":"179","severity":1,"message":"193","line":7,"column":31,"nodeType":"181","messageId":"182","endLine":7,"endColumn":39},{"ruleId":"179","severity":1,"message":"195","line":4,"column":22,"nodeType":"181","messageId":"182","endLine":4,"endColumn":27},{"ruleId":"179","severity":1,"message":"196","line":7,"column":17,"nodeType":"181","messageId":"182","endLine":7,"endColumn":28},{"ruleId":"190","severity":1,"message":"191","line":18,"column":7,"nodeType":"192","endLine":23,"endColumn":8},{"ruleId":"190","severity":1,"message":"197","line":83,"column":15,"nodeType":"192","endLine":83,"endColumn":18},{"ruleId":"179","severity":1,"message":"196","line":6,"column":17,"nodeType":"181","messageId":"182","endLine":6,"endColumn":28},{"ruleId":"198","severity":1,"message":"199","line":9,"column":3,"nodeType":"200","messageId":"201","endLine":11,"endColumn":4},{"ruleId":"190","severity":1,"message":"197","line":40,"column":15,"nodeType":"192","endLine":40,"endColumn":18},{"ruleId":"179","severity":1,"message":"202","line":2,"column":10,"nodeType":"181","messageId":"182","endLine":2,"endColumn":14},{"ruleId":"179","severity":1,"message":"194","line":6,"column":8,"nodeType":"181","messageId":"182","endLine":6,"endColumn":18},{"ruleId":"179","severity":1,"message":"193","line":7,"column":31,"nodeType":"181","messageId":"182","endLine":7,"endColumn":39},{"ruleId":"179","severity":1,"message":"203","line":8,"column":24,"nodeType":"181","messageId":"182","endLine":8,"endColumn":36},{"ruleId":"179","severity":1,"message":"204","line":8,"column":38,"nodeType":"181","messageId":"182","endLine":8,"endColumn":50},{"ruleId":"179","severity":1,"message":"205","line":2,"column":35,"nodeType":"181","messageId":"182","endLine":2,"endColumn":40},{"ruleId":"179","severity":1,"message":"206","line":8,"column":7,"nodeType":"181","messageId":"182","endLine":8,"endColumn":9},{"ruleId":"179","severity":1,"message":"180","line":2,"column":16,"nodeType":"181","messageId":"182","endLine":2,"endColumn":20},{"ruleId":"179","severity":1,"message":"202","line":6,"column":10,"nodeType":"181","messageId":"182","endLine":6,"endColumn":14},{"ruleId":"179","severity":1,"message":"207","line":6,"column":16,"nodeType":"181","messageId":"182","endLine":6,"endColumn":26},{"ruleId":"179","severity":1,"message":"188","line":8,"column":7,"nodeType":"181","messageId":"182","endLine":8,"endColumn":14},{"ruleId":"179","severity":1,"message":"186","line":9,"column":7,"nodeType":"181","messageId":"182","endLine":9,"endColumn":20},{"ruleId":"179","severity":1,"message":"189","line":16,"column":13,"nodeType":"181","messageId":"182","endLine":16,"endColumn":17},{"ruleId":"190","severity":1,"message":"191","line":26,"column":11,"nodeType":"192","endLine":26,"endColumn":22},{"ruleId":"175","replacedBy":"176"},{"ruleId":"177","replacedBy":"178"},{"ruleId":"179","severity":1,"message":"208","line":2,"column":20,"nodeType":"181","messageId":"182","endLine":2,"endColumn":27},{"ruleId":"179","severity":1,"message":"205","line":2,"column":35,"nodeType":"181","messageId":"182","endLine":2,"endColumn":40},{"ruleId":"209","severity":2,"message":"210","line":49,"column":20,"nodeType":"181","messageId":"211","endLine":49,"endColumn":29},{"ruleId":"209","severity":2,"message":"210","line":49,"column":35,"nodeType":"181","messageId":"211","endLine":49,"endColumn":44},{"ruleId":"209","severity":2,"message":"210","line":49,"column":50,"nodeType":"181","messageId":"211","endLine":49,"endColumn":59},"no-native-reassign",["212"],"no-negated-in-lhs",["213"],"no-unused-vars","'Icon' is defined but never used.","Identifier","unusedVar","'Dropdown' is defined but never used.","'Button' is defined but never used.","'MenuItem' is defined but never used.","'MenuItemGroup' is assigned a value but never used.","'CreateAuditMenu' is assigned a value but never used.","'SubMenu' is assigned a value but never used.","'user' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Checkbox' is defined but never used.","'classnames' is defined but never used.","'Space' is defined but never used.","'ColumnGroup' is assigned a value but never used.","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'Link' is defined but never used.","'UserOutlined' is defined but never used.","'LockOutlined' is defined but never used.","'Input' is defined but never used.","'Fb' is assigned a value but never used.","'withRouter' is defined but never used.","'Divider' is defined but never used.","no-undef","'catCounts' is not defined.","undef","no-global-assign","no-unsafe-negation"]