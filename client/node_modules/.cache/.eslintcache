[{"C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\index.js":"1","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\reportWebVitals.js":"2","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\App.js":"3","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\layout\\Navbar.js":"4","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\layout\\LeftMenu.js":"5","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\layout\\RightMenu.js":"6","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\auth\\Login.js":"7","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\auth\\Register.js":"8","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\store.js":"9","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\utils\\setAuthToken.js":"10","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\actions\\authActions.js":"11","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\dashboard\\Dashboard.js":"12","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\actions\\types.js":"13","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\reducers\\index.js":"14","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\reducers\\errorReducer.js":"15","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\reducers\\authReducer.js":"16","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\Checklist.js":"17","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\layout\\RightMenuLoggedIn.js":"18","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\data\\AuditData.ts":"19","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\data\\StoreData.ts":"20","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\ChecklistNonFB.js":"21","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\actions\\auditActions.js":"22","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\photo\\PhotoPop.js":"23","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\actions\\photoActions.js":"24","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\data\\questionsData.js":"25","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\private-route\\StaffRoute.js":"26","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\private-route\\TenantRoute.js":"27","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\tenant\\TenantHome.js":"28","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\tenant\\EditAudit.js":"29","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\TenantList.js":"30","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\AuditList.js":"31","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\reducers\\messageReducer.js":"32","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\MessageDisplay.js":"33","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\actions\\errorActions.js":"34","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\auth\\CreateTenant.js":"35","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\actions\\tenantActions.js":"36","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\reducers\\tenantReducer.js":"37","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\ViewAudit.js":"38","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\ViewAuditTenant.js":"39","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\auth\\ResetPassword.js":"40"},{"size":500,"mtime":499162500000,"results":"41","hashOfConfig":"42"},{"size":362,"mtime":499162500000,"results":"43","hashOfConfig":"42"},{"size":3320,"mtime":1618840315822,"results":"44","hashOfConfig":"42"},{"size":2008,"mtime":1618721841948,"results":"45","hashOfConfig":"42"},{"size":2180,"mtime":1618724879218,"results":"46","hashOfConfig":"42"},{"size":1014,"mtime":1617248893153,"results":"47","hashOfConfig":"42"},{"size":6159,"mtime":1618843323136,"results":"48","hashOfConfig":"42"},{"size":8650,"mtime":1618723006835,"results":"49","hashOfConfig":"42"},{"size":418,"mtime":1618841129469,"results":"50","hashOfConfig":"42"},{"size":346,"mtime":1615042085091,"results":"51","hashOfConfig":"42"},{"size":4900,"mtime":1618849208050,"results":"52","hashOfConfig":"42"},{"size":1556,"mtime":1615042085085,"results":"53","hashOfConfig":"42"},{"size":335,"mtime":1617873215632,"results":"54","hashOfConfig":"42"},{"size":367,"mtime":1617869718833,"results":"55","hashOfConfig":"42"},{"size":383,"mtime":1617785633533,"results":"56","hashOfConfig":"42"},{"size":655,"mtime":1617780063882,"results":"57","hashOfConfig":"42"},{"size":13196,"mtime":1618666820939,"results":"58","hashOfConfig":"42"},{"size":1104,"mtime":1618504475746,"results":"59","hashOfConfig":"42"},{"size":1353,"mtime":1616680756599,"results":"60","hashOfConfig":"42"},{"size":1168,"mtime":1616680756601,"results":"61","hashOfConfig":"42"},{"size":12750,"mtime":1618666820929,"results":"62","hashOfConfig":"42"},{"size":3708,"mtime":1618819090773,"results":"63","hashOfConfig":"42"},{"size":4160,"mtime":1617790766858,"results":"64","hashOfConfig":"42"},{"size":484,"mtime":1616683440095,"results":"65","hashOfConfig":"42"},{"size":9685,"mtime":1616683293777,"results":"66","hashOfConfig":"42"},{"size":839,"mtime":1617186663232,"results":"67","hashOfConfig":"42"},{"size":916,"mtime":1617186927393,"results":"68","hashOfConfig":"42"},{"size":7943,"mtime":1618724710122,"results":"69","hashOfConfig":"42"},{"size":268,"mtime":1617191722548,"results":"70","hashOfConfig":"42"},{"size":8570,"mtime":1618849656495,"results":"71","hashOfConfig":"42"},{"size":8564,"mtime":1618818679561,"results":"72","hashOfConfig":"42"},{"size":439,"mtime":1617786448369,"results":"73","hashOfConfig":"42"},{"size":2087,"mtime":1617910676884,"results":"74","hashOfConfig":"42"},{"size":231,"mtime":1617786537162,"results":"75","hashOfConfig":"42"},{"size":7761,"mtime":1618721995912,"results":"76","hashOfConfig":"42"},{"size":1363,"mtime":1618668642231,"results":"77","hashOfConfig":"42"},{"size":399,"mtime":1617908956499,"results":"78","hashOfConfig":"42"},{"size":10955,"mtime":1618736373257,"results":"79","hashOfConfig":"42"},{"size":11075,"mtime":1618736334842,"results":"80","hashOfConfig":"42"},{"size":3139,"mtime":1618846755875,"results":"81","hashOfConfig":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},"n2tzlt",{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"84"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"84"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"84"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"84"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"84"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"84"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"84"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"84"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"141"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"141"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"141"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"84"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"84"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"84"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"160","messages":"161","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"84"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"84"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"84"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"84"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"84"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"84"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"84"},"C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\index.js",[],["187","188"],"C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\reportWebVitals.js",[],"C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\App.js",[],"C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\layout\\Navbar.js",[],"C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\layout\\LeftMenu.js",["189","190","191","192","193","194","195"],"import React, { Component } from \"react\";\r\nimport { Menu, Icon, Dropdown, Button } from \"antd\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport MenuItem from \"antd/lib/menu/MenuItem\";\r\n\r\nconst SubMenu = Menu.SubMenu;\r\nconst MenuItemGroup = Menu.ItemGroup;\r\n\r\nconst CreateAuditMenu = (\r\n  <Menu>\r\n    <Menu.Item key=\"fbchecklist\">\r\n      <NavLink to=\"/checklist\">FB Audit List</NavLink>\r\n    </Menu.Item>\r\n\r\n    <Menu.Item key=\"nonfbchecklist\">\r\n      <NavLink to=\"/ChecklistNonFB\">Non-FB Audit List</NavLink>\r\n    </Menu.Item>\r\n  </Menu>\r\n);\r\n\r\nclass StaffLeftMenu extends Component {\r\n  render() {\r\n    return (\r\n      <Menu mode=\"vertical\">\r\n        <Menu.Item key=\"audits\">\r\n          <NavLink to=\"/auditlist\">Audits</NavLink>\r\n        </Menu.Item>\r\n\r\n        {/* <SubMenu key=\"sub1\" title={<span>Create Audit</span>}>\r\n          <Menu.Item key=\"fbchecklist\">\r\n            <NavLink to=\"/checklistFB\">FB Audit List</NavLink>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"nonfbchecklist\">\r\n            <NavLink to=\"/checklistNonFB\">Non-FB Audit List</NavLink>\r\n          </Menu.Item>\r\n        </SubMenu> */}\r\n\r\n        <Menu.Item key=\"createtenant\">\r\n          <NavLink to=\"/createtenant\">Create Tenant</NavLink>\r\n        </Menu.Item>\r\n\r\n        <Menu.Item key=\"directory\">\r\n          <NavLink to=\"/directory\">Directory</NavLink>\r\n        </Menu.Item>\r\n      </Menu>\r\n    );\r\n  }\r\n}\r\n\r\nclass TenantLeftMenu extends Component {\r\n  render() {\r\n    return (\r\n      <Menu mode=\"vertical\">\r\n        <Menu.Item key=\"tenanthome\">\r\n          <NavLink to=\"/tenant\">Tenant Home</NavLink>\r\n        </Menu.Item>\r\n      </Menu>\r\n    );\r\n  }\r\n}\r\n\r\nclass LeftMenu extends Component {\r\n  render() {\r\n    if (this.props.auth.user.usertype === \"staff\") {\r\n      return <StaffLeftMenu />;\r\n    } else if (this.props.auth.user.usertype === \"tenant\") {\r\n      return <TenantLeftMenu />;\r\n    } else return <div></div>;\r\n  }\r\n}\r\n\r\nLeftMenu.propTypes = {\r\n  auth: PropTypes.object.isRequired,\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  auth: state.auth,\r\n});\r\nexport default connect(mapStateToProps)(LeftMenu);\r\n","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\layout\\RightMenu.js",["196","197","198"],"import React, { Component } from \"react\";\r\nimport { Menu, Icon } from \"antd\";\r\nimport { logoutUser } from \"../../actions/authActions\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst SubMenu = Menu.SubMenu;\r\nconst MenuItemGroup = Menu.ItemGroup;\r\nclass RightMenu extends Component {\r\n  onLogoutClick = (e) => {\r\n    e.preventDefault();\r\n    this.props.logoutUser();\r\n  };\r\n  render() {\r\n    return (\r\n      <Menu mode=\"vertical\">\r\n        <Menu.Item key=\"mail\" id=\"rightmenu1\">\r\n          <Link to=\"/login\">Login</Link>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"app\" id=\"rightmenu2\">\r\n          <Link to=\"/register\">Register</Link>\r\n        </Menu.Item>\r\n      </Menu>\r\n    );\r\n  }\r\n}\r\nRightMenu.propTypes = {\r\n  logoutUser: PropTypes.func.isRequired,\r\n  auth: PropTypes.object.isRequired,\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  auth: state.auth,\r\n});\r\nexport default connect(mapStateToProps, { logoutUser })(RightMenu);\r\n","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\auth\\Login.js",["199","200","201"],"import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { loginUser } from \"../../actions/authActions\";\r\nimport classnames from \"classnames\";\r\nimport Recaptcha from \"react-recaptcha\";\r\n\r\nimport { Form, Input, Button, Checkbox, Layout } from \"antd\";\r\nimport { UserOutlined, LockOutlined } from \"@ant-design/icons\";\r\n\r\nconst { Header, Footer, Sider, Content } = Layout;\r\n\r\n// TEST TEAM: for testing change to false\r\n// DEV TEAM: for dev change to true\r\nconst recaptchaOn = false;\r\n\r\nclass Login extends Component {\r\n  constructor() {\r\n    super();\r\n    this.verifyCallback = this.verifyCallback.bind(this);\r\n    this.state = {\r\n      isVerified: false,\r\n      email: \"\",\r\n      password: \"\",\r\n      usertypebool: false,\r\n      errors: {},\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // If logged in and user navigates to Login page, should redirect them to dashboard\r\n    if (this.props.auth.isAuthenticated) {\r\n      if (this.props.auth.user.usertype === \"staff\") {\r\n        this.props.history.push(\"/auditlist\");\r\n      } else if (this.props.auth.user.usertype === \"tenant\") {\r\n        this.props.history.push(\"/tenant\");\r\n      }\r\n    }\r\n    if (!recaptchaOn) {\r\n      this.setState({\r\n        isVerified: true,\r\n      });\r\n    }\r\n  }\r\n  // might be deprecated\r\n  UNSAFE_componentWillReceiveProps(nextProps) {\r\n    if (nextProps.auth.isAuthenticated) {\r\n      if (this.props.auth.user.usertype === \"staff\") {\r\n        this.props.history.push(\"/auditlist\"); // push staff to auditlist when they login\r\n      } else if (this.props.auth.user.usertype === \"tenant\") {\r\n        this.props.history.push(\"/tenant\");\r\n      }\r\n    }\r\n    if (nextProps.errors) {\r\n      this.setState({\r\n        errors: nextProps.errors,\r\n      });\r\n    }\r\n  }\r\n\r\n  onChange = (e) => {\r\n    this.setState({ [e.target.id]: e.target.value });\r\n  };\r\n\r\n  onCheckboxChange = (e) => {\r\n    this.setState({ usertypebool: !this.state.usertypebool });\r\n  };\r\n\r\n  onFinish = (values) => {\r\n    // console.log(values);\r\n    // Process checkbox boolean to usertype string\r\n    if (!this.state.isVerified) {\r\n      alert(\"Please verify you are human\");\r\n    } else {\r\n      window.recaptcha = null;\r\n      var { usertype } = \"\";\r\n      if (this.state.usertypebool) {\r\n        usertype = \"staff\";\r\n      } else {\r\n        usertype = \"tenant\";\r\n      }\r\n      const userData = {\r\n        email: values.email,\r\n        password: values.password,\r\n        usertype: usertype,\r\n      };\r\n      console.log(values);\r\n\r\n      this.props.loginUser(userData, this.props.history); // since we handle the redirect within our component, we don't need to pass in this.props.history as a parameter\r\n    }\r\n  };\r\n\r\n  recaptchaLoaded() {\r\n    console.log(\"captcha loaded\");\r\n  }\r\n\r\n  verifyCallback(response) {\r\n    if (response) {\r\n      this.setState({ isVerified: true });\r\n    }\r\n  }\r\n  render() {\r\n    const { errors } = this.state;\r\n    return (\r\n      <Layout>\r\n        <h2>Welcome to SingHealth Audit</h2>\r\n        <p>Enter your email and password to log in </p>\r\n        <Content>\r\n          <Form\r\n            onFinish={this.onFinish}\r\n            name=\"normal_login\"\r\n            className=\"login-register-form\"\r\n          >\r\n            <Form.Item\r\n              name=\"email\"\r\n              rules={[{ required: true, message: \"Please input your Email!\" }]}\r\n            >\r\n              <Input\r\n                prefix={<UserOutlined className=\"site-form-item-icon\" />}\r\n                placeholder=\"Email\"\r\n                onChange={this.onChange}\r\n                value={this.state.email}\r\n                error={errors.email}\r\n                id=\"email\"\r\n                type=\"email\"\r\n                className={classnames(\"\", {\r\n                  invalid: errors.email || errors.emailnotfound,\r\n                })}\r\n              />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n              name=\"password\"\r\n              rules={[\r\n                { required: true, message: \"Please input your Password!\" },\r\n              ]}\r\n            >\r\n              <Input\r\n                prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n                placeholder=\"Password\"\r\n                onChange={this.onChange}\r\n                value={this.state.password}\r\n                error={errors.password}\r\n                id=\"password\"\r\n                type=\"password\"\r\n                className={classnames(\"\", {\r\n                  invalid: errors.password || errors.passwordincorrect,\r\n                })}\r\n              />\r\n            </Form.Item>\r\n\r\n            <Form.Item name=\"usertypebool\">\r\n              <Checkbox\r\n                onChange={this.onCheckboxChange}\r\n                value={this.state.usertypebool}\r\n                error={errors.usertypebool}\r\n                id=\"usertypebool\"\r\n              >\r\n                Singhealth Staff Member?\r\n              </Checkbox>\r\n            </Form.Item>\r\n\r\n            <Form.Item>\r\n              <Button\r\n                id=\"login-button\"\r\n                type=\"primary\"\r\n                htmlType=\"submit\"\r\n                className=\"login-register-form-button\"\r\n              >\r\n                Log in\r\n              </Button>\r\n              <p></p>\r\n              <p>\r\n                Forgot password?\r\n                <Link to=\"/resetPassword\"> Click here </Link>to reset it\r\n              </p>\r\n              New staff member? <Link to=\"/Register\">Register here!</Link>\r\n            </Form.Item>\r\n          </Form>\r\n          <Recaptcha\r\n            sitekey=\"6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI\"\r\n            render=\"explicit\"\r\n            onloadCallback={console.log(\"onloadCallback\")}\r\n            verifyCallback={this.verifyCallback}\r\n          />\r\n        </Content>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\nLogin.propTypes = {\r\n  loginUser: PropTypes.func.isRequired,\r\n  auth: PropTypes.object.isRequired,\r\n  errors: PropTypes.object.isRequired,\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  auth: state.auth,\r\n  errors: state.errors,\r\n});\r\nexport default connect(mapStateToProps, { loginUser })(Login);\r\n","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\auth\\Register.js",["202","203","204","205"],"import React, { Component } from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport Recaptcha from \"react-recaptcha\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { registerUser } from \"../../actions/authActions\";\r\nimport classnames from \"classnames\";\r\nimport { getStaffKey } from \"../../actions/authActions\";\r\nimport { Form, Input, Button, Layout, Select } from \"antd\";\r\nimport {\r\n  MailOutlined,\r\n  UserOutlined,\r\n  LockOutlined,\r\n  SketchOutlined,\r\n} from \"@ant-design/icons\";\r\nimport institutionsData from \"../../data/institutions.json\";\r\n\r\nconst { Header, Footer, Sider, Content } = Layout;\r\n\r\n// TEST TEAM: for testing change to false\r\n// DEV TEAM: for dev change to true\r\nconst recaptchaOn = false;\r\n\r\nconst institutions = institutionsData;\r\n\r\nclass Register extends Component {\r\n  constructor() {\r\n    super();\r\n    this.verifyCallback = this.verifyCallback.bind(this);\r\n    this.state = {\r\n      isVerified: false,\r\n      name: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n      password2: \"\",\r\n      institution: \"\",\r\n      staffkey: \"\",\r\n      dbstaffkey: \"\",\r\n      errors: {},\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // If loggied in and user navigates to Register page, should redirect them to dashboad\r\n    if (this.props.auth.isAuthenticaed) {\r\n      this.props.history.push(\"/dashboard\"); // Push new entry into history stack, ie redirecting the user to another route\r\n    }\r\n    if (!recaptchaOn) {\r\n      this.setState({\r\n        isVerified: true,\r\n      });\r\n    }\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps) {\r\n    if (nextProps.errors) {\r\n      this.setState({\r\n        errors: nextProps.errors,\r\n      });\r\n    }\r\n  }\r\n\r\n  onChange = (e) => {\r\n    this.setState({ [e.target.id]: e.target.value });\r\n  };\r\n\r\n  onDropdownChange = (e, { value }) => this.setState({ value });\r\n\r\n  onFinish = (values) => {\r\n    if (!this.state.isVerified) {\r\n      alert(\"Please verify you are human\");\r\n    } else {\r\n      window.recaptcha = null;\r\n      getStaffKey((data) => {\r\n        // console.log(\"data is: \", data);\r\n        this.setState({ ...this.state, dbstaffkey: data });\r\n        // console.log(\"dbstaffkey is: \", this.state.dbstaffkey);\r\n        if (this.state.staffkey === this.state.dbstaffkey) {\r\n          const newUser = {\r\n            name: values.name,\r\n            email: values.email,\r\n            password: values.password,\r\n            password2: values.password2,\r\n            institution: values.institution,\r\n            usertype: \"staff\",\r\n          };\r\n          this.props.registerUser(newUser, this.props.history);\r\n        } else {\r\n          alert(\"Staff Key is incorrect!\");\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  verifyCallback(response) {\r\n    if (response) {\r\n      this.setState({ isVerified: true });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { errors } = this.state;\r\n    return (\r\n      <Layout>\r\n        <h2>Staff Registration Form</h2>\r\n        <Form\r\n          name=\"normal_login\"\r\n          className=\"login-register-form\"\r\n          title=\"Register\"\r\n          onFinish={this.onFinish}\r\n        >\r\n          <Form.Item\r\n            name=\"name\"\r\n            rules={[{ required: true, message: \"Please input your Name!\" }]}\r\n          >\r\n            <Input\r\n              prefix={<UserOutlined className=\"site-form-item-icon\" />}\r\n              placeholder=\"Name\"\r\n              onChange={this.onChange}\r\n              value={this.state.name}\r\n              error={errors.name}\r\n              id=\"name\"\r\n              type=\"text\"\r\n              // className={classnames(\"\", {\r\n              // invalid: errors.name,\r\n              // })}\r\n            />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            name=\"email\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                type: \"email\",\r\n                message: \"Please input a valid Email!\",\r\n              },\r\n            ]}\r\n          >\r\n            <Input\r\n              prefix={<MailOutlined className=\"site-form-item-icon\" />}\r\n              placeholder=\"Email\"\r\n              onChange={this.onChange}\r\n              value={this.state.email}\r\n              error={errors.email}\r\n              id=\"email\"\r\n              type=\"email\"\r\n              // className={classnames(\"\", {\r\n              //   invalid: errors.email,\r\n              // })}\r\n            />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            name=\"password\"\r\n            rules={[{ required: true, message: \"Please input your Password!\" }]}\r\n          >\r\n            <Input\r\n              prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n              placeholder=\"Password\"\r\n              onChange={this.onChange}\r\n              value={this.state.password}\r\n              error={errors.password}\r\n              id=\"password\"\r\n              type=\"password\"\r\n              // className={classnames(\"\", {\r\n              //   invalid: errors.password,\r\n              // })}\r\n            />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            name=\"password2\"\r\n            dependencies={[\"password\"]}\r\n            hasFeedback\r\n            rules={[\r\n              { required: true, message: \"Passwords do not match!\" },\r\n              ({ getFieldValue }) => ({\r\n                validator(_, value) {\r\n                  if (!value || getFieldValue(\"password\") === value) {\r\n                    return Promise.resolve();\r\n                  }\r\n\r\n                  return Promise.reject(\r\n                    new Error(\r\n                      \"The two passwords that you entered do not match!\"\r\n                    )\r\n                  );\r\n                },\r\n              }),\r\n            ]}\r\n          >\r\n            <Input\r\n              prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n              placeholder=\"Confirm Password\"\r\n              onChange={this.onChange}\r\n              value={this.state.password2}\r\n              error={errors.password2}\r\n              id=\"password2\"\r\n              type=\"password\"\r\n              // className={classnames(\"\", {\r\n              // invalid: errors.password2,\r\n              // })}\r\n            />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            name=\"staffkey\"\r\n            rules={[\r\n              { required: true, message: \"Please input your staff key!\" },\r\n            ]}\r\n          >\r\n            <Input\r\n              prefix={<SketchOutlined className=\"site-form-item-icon\" />}\r\n              placeholder=\"Staff Key\"\r\n              onChange={this.onChange}\r\n              value={this.state.staffkey}\r\n              error={errors.staffkey}\r\n              id=\"staffkey\"\r\n              type=\"staffkey\"\r\n              className={classnames(\"\", {\r\n                invalid: errors.key || errors.keyincorrect,\r\n              })}\r\n            />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            name=\"institution\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Please select an institution!\",\r\n              },\r\n            ]}\r\n          >\r\n            <Select\r\n              showSearch\r\n              className=\"dropdown\"\r\n              icon={MailOutlined}\r\n              placeholder=\"Institution\"\r\n              options={institutions}\r\n              onChange={this.onDropdownChange}\r\n              id=\"institution\"\r\n              type=\"institution\"\r\n              value={this.state.institution}\r\n              error={errors.institution}\r\n            />\r\n          </Form.Item>\r\n\r\n          <Form.Item>\r\n            <Button\r\n              type=\"primary\"\r\n              htmlType=\"submit\"\r\n              className=\"login-register-form-button\"\r\n            >\r\n              Register\r\n            </Button>\r\n            Or <Link to=\"/Login\">Login here</Link>\r\n          </Form.Item>\r\n        </Form>\r\n        <Recaptcha\r\n          sitekey=\"6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI\"\r\n          render=\"explicit\"\r\n          onloadCallback={console.log(\"onloadCallback\")}\r\n          verifyCallback={this.verifyCallback}\r\n        />\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n// Props stands for properties and is being used for passing data from one component to another\r\nRegister.propTypes = {\r\n  registerUser: PropTypes.func.isRequired,\r\n  auth: PropTypes.object.isRequired,\r\n  errors: PropTypes.object.isRequired,\r\n};\r\n\r\n// Get state from Redux and map it to props\r\nconst mapStateToProps = (state) => ({\r\n  auth: state.auth, // allows us to call this.props.auth\r\n  errors: state.errors, // allows us to call this.props.errors\r\n});\r\n\r\nexport default connect(mapStateToProps, { registerUser })(withRouter(Register));\r\n","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\store.js",[],"C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\utils\\setAuthToken.js",[],"C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\actions\\authActions.js",[],"C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\dashboard\\Dashboard.js",[],["206","207"],"C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\actions\\types.js",[],"C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\reducers\\index.js",[],"C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\reducers\\errorReducer.js",[],"C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\reducers\\authReducer.js",[],"C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\Checklist.js",["208","209"],"import \"../App.css\";\r\nimport {\r\n  Collapse,\r\n  Divider,\r\n  List,\r\n  Input,\r\n  Checkbox,\r\n  Button,\r\n  Modal,\r\n  Form,\r\n  DatePicker,\r\n} from \"antd\";\r\nimport React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport importJSON from \"../data/questionsDict.json\";\r\nimport { submit, display } from \"../actions/auditActions.js\";\r\nimport dateformat from \"dateformat\";\r\nimport store from \"../store\";\r\nconst fileUpload = require(\"fuctbase64\");\r\nconst Fb = importJSON.fb;\r\nconst { Panel } = Collapse;\r\nconst { TextArea } = Input;\r\n\r\n// const layout = {\r\n//   labelCol: {\r\n//     span: 8,\r\n//   },\r\n//   wrapperCol: {\r\n//     span: 16,\r\n//   },\r\n// };\r\n\r\nconst mapDispatchToProps = {\r\n  submit,\r\n};\r\n\r\n// TODO: Take score from json file => Update the score, replace the json file\r\n\r\nclass Checklist extends Component {\r\n  // not exactly dynamic\r\n  state = {\r\n    tenantInfo: {},\r\n    type: \"FB\",\r\n    auditor: store.getState().auth.user.name,\r\n    auditorId: store.getState().auth.user.id,\r\n    checked: false,\r\n    catCounts: [0, 0, 0, 0, 0], // counts[0]: for Professionalism & Staff Hygiene (10%), counts[1]: for Housekeeping & General Cleanliness (20%)\r\n    total_score: 0,\r\n    image: null,\r\n    tempImageBase64: [],\r\n    tempImageCaption: null,\r\n    date: null,\r\n    rectifyDate: null,\r\n    comment: null,\r\n    location: \"\",\r\n    visibleForm: false,\r\n    visibleConfirm: false,\r\n    visibleAudit: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    console.log(\"props: \", this.props.tenantInfo);\r\n    if (typeof this.props.tenantInfo !== \"undefined\") {\r\n      this.setState({ tenantInfo: this.props.tenantInfo.record });\r\n    }\r\n  }\r\n\r\n  submitAudit = () => {\r\n    // console.log(this.state);\r\n    this.props.submit({\r\n      type: \"FB\",\r\n      auditor: store.getState().auth.user.name,\r\n      auditorId: store.getState().auth.user.id,\r\n      catCounts: this.state.catCounts,\r\n      total_score:\r\n        (this.state.catCounts[0] +\r\n          this.state.catCounts[1] +\r\n          this.state.catCounts[2] +\r\n          this.state.catCounts[3] +\r\n          this.state.catCounts[4]) /\r\n        2,\r\n      image: this.state.image,\r\n      date: this.state.date,\r\n      comment: this.state.comment,\r\n      rectifyDate: this.state.rectifyDate,\r\n      location: this.props.tenantInfo.record.address,\r\n      tenantID: this.props.tenantInfo.record._id,\r\n      institution: this.props.tenantInfo.record.institution,\r\n    });\r\n    this.showAuditModal();\r\n    window.scrollTo(0, 0); // Scroll to top\r\n  };\r\n\r\n  onChange = (e) => {\r\n    this.setState({ [e.target.id]: e.target.value });\r\n  };\r\n\r\n  onChangeComment = (comment) => {\r\n    this.setState({\r\n      comment: [\r\n        {\r\n          content: comment.nativeEvent.explicitOriginalTarget.value,\r\n          date: dateformat(Date().toString(), \"yyyy-mm-dd'T'HH:MM:ss.sssZ\"),\r\n          author: store.getState().auth.user.name,\r\n        },\r\n      ],\r\n    });\r\n  };\r\n\r\n  onChangeCaption = (caption) => {\r\n    console.log(this.state);\r\n    this.setState({\r\n      tempImageCaption: caption.nativeEvent.explicitOriginalTarget.value,\r\n    });\r\n  };\r\n\r\n  onChangeDate = (date, dateString) => {\r\n    this.setState({\r\n      date: dateformat(date._d.toString(), \"yyyy-mm-dd'T'HH:MM:ss.sssZ\"),\r\n    });\r\n  };\r\n\r\n  onChangeRectifyDate = (rectifyDate, dateString) => {\r\n    this.setState({\r\n      rectifyDate: dateformat(\r\n        rectifyDate._d.toString(),\r\n        \"yyyy-mm-dd'T'HH:MM:ss.sssZ\"\r\n      ),\r\n    });\r\n  };\r\n\r\n  fileSelectedHandler = (event) => {\r\n    console.log(event.target.files[0]);\r\n    fileUpload(event).then((data) => {\r\n      console.log(\"base64: \", data.base64);\r\n      this.setState({\r\n        // image: [{ \"base64\": data.base64, \"date\": dateformat(Date().toString(), \"yyyy-mm-dd'T'HH:MM:ss.sssZ\"), \"caption\": \"\" }]\r\n        tempImageBase64: [\r\n          {\r\n            base64: data.base64,\r\n            date: dateformat(Date().toString(), \"yyyy-mm-dd'T'HH:MM:ss.sssZ\"),\r\n          },\r\n        ],\r\n      });\r\n    });\r\n  };\r\n\r\n  showAuditModal = () => {\r\n    this.setState({\r\n      visibleAudit: true,\r\n    });\r\n  };\r\n\r\n  showFormModal = () => {\r\n    this.setState({\r\n      visibleForm: true,\r\n    });\r\n  };\r\n\r\n  showConfirmModal = () => {\r\n    this.setState({\r\n      visibleConfirm: true,\r\n    });\r\n  };\r\n\r\n  handleAuditOk = (e) => {\r\n    console.log(e);\r\n    this.setState({\r\n      visibleAudit: false,\r\n    });\r\n  };\r\n\r\n  handleFormOk = (e) => {\r\n    console.log(e);\r\n    this.showConfirmModal();\r\n  };\r\n\r\n  handleUploadOk = (e) => {\r\n    console.log(e);\r\n    console.log(this.state);\r\n    this.setState({\r\n      image: [\r\n        {\r\n          base64: this.state.tempImageBase64[0].base64,\r\n          date: this.state.tempImageBase64[0].date,\r\n          caption: this.state.tempImageCaption,\r\n          uploader: \"auditor\",\r\n        },\r\n      ],\r\n      visibleConfirm: false,\r\n    });\r\n  };\r\n\r\n  handleCancel = (e) => {\r\n    console.log(e);\r\n    this.setState({\r\n      visibleForm: false,\r\n    });\r\n  };\r\n\r\n  createCheckbox = (label, catIndex) => (\r\n    <Checkbox\r\n      label={label}\r\n      // handleCheckboxChange={this.toggleCheckbox}\r\n      key={label}\r\n      onChange={(e) => this.handleCount(e, catIndex)}\r\n    />\r\n  );\r\n  //// for food hygiene cat\r\n  // createfoodCheckbox = (label) => (\r\n  //   <Checkbox\r\n  //     label={label}\r\n  //     handleCheckboxChange={this.toggleCheckbox}\r\n  //     key={label}\r\n  //     onChange={(e) => this.handlefoodCheckCount(e)}\r\n  //   />\r\n  // );\r\n  // handlefoodCheckCount = (e) => {\r\n  //   const { checked, type } = e.target;\r\n  //   if (type === \"checkbox\" && checked === true) {\r\n  //     this.setState((state) => state.food_count++);\r\n  //   } else {\r\n  //     this.setState((state) => state.food_count--);\r\n  //   }\r\n  // };\r\n\r\n  handleCount = (e, catIndex) => {\r\n    const { checked, type } = e.target;\r\n    switch (catIndex) {\r\n      case 0:\r\n        if (type === \"checkbox\" && checked === true) {\r\n          this.setState((state) => state.catCounts[0]++);\r\n        } else {\r\n          this.setState((state) => state.catCounts[0]--);\r\n        }\r\n        break;\r\n      case 1:\r\n        if (type === \"checkbox\" && checked === true) {\r\n          this.setState((state) => state.catCounts[1]++);\r\n        } else {\r\n          this.setState((state) => state.catCounts[1]--);\r\n        }\r\n        break;\r\n      case 2:\r\n        if (type === \"checkbox\" && checked === true) {\r\n          this.setState((state) => state.catCounts[2]++);\r\n        } else {\r\n          this.setState((state) => state.catCounts[2]--);\r\n        }\r\n        break;\r\n      case 3:\r\n        if (type === \"checkbox\" && checked === true) {\r\n          this.setState((state) => state.catCounts[3]++);\r\n        } else {\r\n          this.setState((state) => state.catCounts[3]--);\r\n        }\r\n        break;\r\n      case 4:\r\n        if (type === \"checkbox\" && checked === true) {\r\n          this.setState((state) => state.catCounts[4]++);\r\n        } else {\r\n          this.setState((state) => state.catCounts[4]--);\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    // console.log(this.state.tenantInfo);\r\n    const rectifyLabel = (\r\n      <div>If there are no non-compliances, put {<b>today's</b>} date</div>\r\n    );\r\n    return (\r\n      <div className=\"table\">\r\n        <h3>\r\n          F&B Audit for Tenant at Address:{\" \"}\r\n          <b>\r\n            {typeof this.state.tenantInfo !== \"undefined\"\r\n              ? this.state.tenantInfo.address\r\n              : \"\"}\r\n          </b>\r\n        </h3>\r\n\r\n        <Form\r\n          // {...layout}\r\n          name=\"FB Checklist\"\r\n          className=\"login-register-form\"\r\n          onFinish={this.onFinish}\r\n        >\r\n          <Form.Item\r\n            name=\"date\"\r\n            rules={[{ required: true, message: \"Date of Incident\" }]}\r\n          >\r\n            <DatePicker\r\n              className=\"auditDate\"\r\n              placeholder=\"Date\"\r\n              onChange={this.onChangeDate}\r\n            />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            name=\"recitfyDate\"\r\n            label={rectifyLabel}\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Please enter the timeframe to rectify non-compliance\",\r\n              },\r\n            ]}\r\n          >\r\n            <DatePicker\r\n              className=\"auditDate\"\r\n              placeholder=\"Rectification Deadline\"\r\n              onChange={this.onChangeRectifyDate}\r\n            />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            name=\"Comment\"\r\n            rules={[{ required: true, message: \"Description\" }]}\r\n          >\r\n            <TextArea\r\n              placeholder=\"Notes or Comments\"\r\n              onChange={this.onChangeComment}\r\n              value={this.state.comment}\r\n              id=\"comment\"\r\n              type=\"comment\"\r\n              rows={4}\r\n            />\r\n          </Form.Item>\r\n        </Form>\r\n\r\n        <Button\r\n          type=\"dashed\"\r\n          className=\"submit-button\"\r\n          onClick={this.showFormModal}\r\n        >\r\n          Upload Photo\r\n        </Button>\r\n\r\n        {Fb.map((cat, catIndex) => {\r\n          // var catScore = cat.score;\r\n          return (\r\n            // Category\r\n            <Collapse defaultActiveKey={[\"1\"]}>\r\n              <Panel\r\n                header={<div catIndex={catIndex}>{cat.name}</div>}\r\n                key={catIndex + 1}\r\n                className=\"bg-orange\"\r\n              >\r\n                <div catIndex={catIndex}>\r\n                  {cat.subcategories.map((subCat, subCatIndex) => {\r\n                    return (\r\n                      // SubCategory\r\n                      <Collapse defaultActiveKey={[\"1\"]}>\r\n                        <Panel\r\n                          header={\r\n                            <div subCatIndex={subCatIndex}>{subCat.name}</div>\r\n                          }\r\n                          key={subCatIndex + 1}\r\n                          className=\"bg-orange\"\r\n                        >\r\n                          <List\r\n                            dataSource={subCat.questions} // Questions\r\n                            renderItem={(item) => (\r\n                              <List.Item>\r\n                                <div className=\"checklist-item\">\r\n                                  <div className=\"create-audit-row\">{item}</div>\r\n                                  <div className=\"checklist-checkbox\">\r\n                                    {this.createCheckbox(item, catIndex)}\r\n                                  </div>\r\n                                </div>\r\n                              </List.Item>\r\n                            )}\r\n                          />\r\n                        </Panel>\r\n                      </Collapse>\r\n                    );\r\n                  })}\r\n                </div>\r\n                <div>Score: {this.state.catCounts[catIndex] / 2}</div>\r\n              </Panel>\r\n            </Collapse>\r\n          );\r\n        })}\r\n        <b>\r\n          Total Score:{\" \"}\r\n          <span className=\"total_score\">\r\n            {(this.state.catCounts[0] +\r\n              this.state.catCounts[1] +\r\n              this.state.catCounts[2] +\r\n              this.state.catCounts[3] +\r\n              this.state.catCounts[4]) /\r\n              2}\r\n          </span>\r\n        </b>\r\n\r\n        <Modal\r\n          title=\"Upload Photo\"\r\n          visible={this.state.visibleForm}\r\n          onOk={this.handleFormOk}\r\n          onCancel={this.handleCancel}\r\n          okButtonProps={{ disabled: false }}\r\n          cancelButtonProps={{ disabled: false }}\r\n        >\r\n          <Form\r\n            name=\"photo_upload\"\r\n            className=\"photo-upload\"\r\n            onFinish={this.onFinish}\r\n          >\r\n            <Form.Item>\r\n              <Input type=\"file\" onChange={this.fileSelectedHandler} />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n              name=\"caption\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Description\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input\r\n                placeholder=\"Caption\"\r\n                onChange={this.onChangeCaption}\r\n                value={this.state.caption}\r\n                id=\"caption\"\r\n                type=\"caption\"\r\n              />\r\n            </Form.Item>\r\n          </Form>\r\n\r\n          <Modal\r\n            title=\"Upload Confirm\"\r\n            destroyOnClose={true}\r\n            visible={this.state.visibleConfirm}\r\n            onOk={this.handleUploadOk}\r\n            okButtonProps={{ disabled: false }}\r\n            cancelButtonProps={{ disabled: true, visible: false }}\r\n          >\r\n            <p>Photo Added!</p>\r\n          </Modal>\r\n        </Modal>\r\n        <Button\r\n          className=\"submit-button\"\r\n          type=\"primary\"\r\n          onClick={() => this.submitAudit()}\r\n        >\r\n          SUBMIT\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nChecklist.propTypes = {\r\n  tenantInfo: PropTypes.object.isRequired,\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  tenantInfo: state.tenantInfo,\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Checklist);\r\n","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\layout\\RightMenuLoggedIn.js",["210","211","212","213","214","215"],"import React, { Component } from \"react\";\r\nimport { Menu, Icon, Button } from \"antd\";\r\nimport { logoutUser } from \"../../actions/authActions\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { NavLink, withRouter } from \"react-router-dom\";\r\n\r\nconst SubMenu = Menu.SubMenu;\r\nconst MenuItemGroup = Menu.ItemGroup;\r\nclass RightMenu extends Component {\r\n  onLogoutClick = (e) => {\r\n    e.preventDefault();\r\n    this.props.logoutUser();\r\n  };\r\n  render() {\r\n    const { user } = this.props.auth;\r\n\r\n    return (\r\n      <Menu mode=\"vertical\">\r\n        <Menu.Item key=\"mail\">\r\n          <NavLink onClick={this.onLogoutClick} to=\"/login\">\r\n            Logout\r\n          </NavLink>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"app\">\r\n          <a href=\"\">Hello {user.name}</a>\r\n        </Menu.Item>\r\n      </Menu>\r\n    );\r\n  }\r\n}\r\nRightMenu.propTypes = {\r\n  logoutUser: PropTypes.func.isRequired,\r\n  auth: PropTypes.object.isRequired,\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  auth: state.auth,\r\n});\r\nexport default connect(mapStateToProps, { logoutUser })(RightMenu);\r\n","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\data\\AuditData.ts",[],["216","217"],"C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\data\\StoreData.ts",[],["218","219"],"C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\ChecklistNonFB.js",["220"],"import \"../App.css\";\r\nimport {\r\n  Collapse,\r\n  Divider,\r\n  DatePicker,\r\n  Form,\r\n  List,\r\n  Input,\r\n  Checkbox,\r\n  Button,\r\n  Modal,\r\n} from \"antd\";\r\nimport React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport importJSON from \"../data/questionsDict.json\";\r\nimport { submit } from \"../actions/auditActions.js\";\r\nimport dateformat from \"dateformat\";\r\nimport store from \"../store\";\r\nconst fileUpload = require(\"fuctbase64\");\r\nconst nonFb = importJSON.non_fb;\r\nconst { Panel } = Collapse;\r\nconst { TextArea } = Input;\r\n\r\n// const layout = {\r\n//   labelCol: {\r\n//     span: 8,\r\n//   },\r\n//   wrapperCol: {\r\n//     span: 16,\r\n//   },\r\n// };\r\n\r\nconst mapDispatchToProps = {\r\n  submit,\r\n};\r\n\r\n// TODO: Take score from json file => Update the score, replace the json file\r\n\r\nclass ChecklistNonFB extends Component {\r\n  // not exactly dynamic\r\n  state = {\r\n    tenantInfo: {},\r\n    type: \"Non-FB\",\r\n    auditor: store.getState().auth.user.name,\r\n    auditorId: store.getState().auth.user.id,\r\n    checked: false,\r\n    catCounts: [0, 0, 0],\r\n    // counts[0]: for Professionalism & Staff Hygiene (20%),\r\n    //counts[1]: for Housekeeping & General Cleanliness (40%)\r\n    //counts[2]: for Workplace Safety & Health (40%)\r\n    total_score: 0,\r\n    image: null,\r\n    tempImageBase64: [],\r\n    tempImageCaption: null,\r\n    date: null,\r\n    rectifyDate: null,\r\n    comment: null,\r\n    location: \"\",\r\n    visibleForm: false,\r\n    visibleConfirm: false,\r\n    visibleAudit: false,\r\n  };\r\n  componentDidMount() {\r\n    console.log(\"props: \", this.props.tenantInfo);\r\n    if (typeof this.props.tenantInfo !== \"undefined\") {\r\n      this.setState({ tenantInfo: this.props.tenantInfo.record });\r\n    }\r\n  }\r\n\r\n  submitAudit = () => {\r\n    // console.log(this.state);\r\n    // console.log(typeof this.state.date);\r\n    // console.log(typeof this.props.tenantInfo.record._id);\r\n    this.props.submit({\r\n      type: \"Non-FB\",\r\n      auditor: store.getState().auth.user.name,\r\n      auditorId: store.getState().auth.user.id,\r\n      catCounts: this.state.catCounts,\r\n      total_score:\r\n        (this.state.catCounts[0] +\r\n          this.state.catCounts[1] +\r\n          this.state.catCounts[2]) /\r\n        2,\r\n      image: this.state.image,\r\n      date: this.state.date,\r\n      rectifyDate: this.state.rectifyDate,\r\n      comment: this.state.comment,\r\n      location: this.props.tenantInfo.record.address,\r\n      tenantID: this.props.tenantInfo.record._id,\r\n      institution: this.props.tenantInfo.record.institution,\r\n    });\r\n    this.showAuditModal();\r\n    window.scrollTo(0, 0); // Scroll to top\r\n  };\r\n\r\n  onChange = (e) => {\r\n    this.setState({ [e.target.id]: e.target.value });\r\n  };\r\n\r\n  onChangeComment = (comment) => {\r\n    this.setState({\r\n      comment: [\r\n        {\r\n          content: comment.nativeEvent.explicitOriginalTarget.value,\r\n          date: dateformat(Date().toString(), \"yyyy-mm-dd'T'HH:MM:ss.sssZ\"),\r\n          author: store.getState().auth.user.name,\r\n        },\r\n      ],\r\n    });\r\n  };\r\n\r\n  onChangeCaption = (caption) => {\r\n    console.log(this.state);\r\n    this.setState({\r\n      tempImageCaption: caption.nativeEvent.explicitOriginalTarget.value,\r\n    });\r\n  };\r\n\r\n  onChangeDate = (date, dateString) => {\r\n    this.setState({\r\n      date: dateformat(date._d.toString(), \"yyyy-mm-dd'T'HH:MM:ss.sssZ\"),\r\n    });\r\n  };\r\n\r\n  onChangeRectifyDate = (rectifyDate, dateString) => {\r\n    this.setState({\r\n      rectifyDate: dateformat(\r\n        rectifyDate._d.toString(),\r\n        \"yyyy-mm-dd'T'HH:MM:ss.sssZ\"\r\n      ),\r\n    });\r\n  };\r\n\r\n  showFormModal = () => {\r\n    this.setState({\r\n      visibleForm: true,\r\n    });\r\n  };\r\n\r\n  showAuditModal = () => {\r\n    this.setState({\r\n      visibleAudit: true,\r\n    });\r\n  };\r\n\r\n  showConfirmModal = () => {\r\n    this.setState({\r\n      visibleConfirm: true,\r\n    });\r\n  };\r\n\r\n  handleFormOk = (e) => {\r\n    console.log(e);\r\n    this.showConfirmModal();\r\n  };\r\n\r\n  handleAuditOk = (e) => {\r\n    console.log(e);\r\n    this.setState({\r\n      visibleAudit: false,\r\n    });\r\n  };\r\n\r\n  handleCancel = (e) => {\r\n    console.log(e);\r\n    this.setState({\r\n      visibleForm: false,\r\n    });\r\n  };\r\n\r\n  handleUploadOk = (e) => {\r\n    console.log(e);\r\n    console.log(this.state);\r\n    this.setState({\r\n      image: [\r\n        {\r\n          base64: this.state.tempImageBase64[0].base64,\r\n          date: this.state.tempImageBase64[0].date,\r\n          caption: this.state.tempImageCaption,\r\n          uploader: \"auditor\",\r\n        },\r\n      ],\r\n      visibleConfirm: false,\r\n    });\r\n  };\r\n\r\n  createCheckbox = (label, catIndex) => (\r\n    <Checkbox\r\n      label={label}\r\n      // handleCheckboxChange={this.toggleCheckbox}\r\n      key={label}\r\n      onChange={(e) => this.handleCount(e, catIndex)}\r\n    />\r\n  );\r\n\r\n  fileSelectedHandler = (event) => {\r\n    console.log(event.target.files[0]);\r\n    fileUpload(event).then((data) => {\r\n      console.log(\"base64: \", data.base64);\r\n      this.setState({\r\n        // image: [{ \"base64\": data.base64, \"date\": dateformat(Date().toString(), \"yyyy-mm-dd'T'HH:MM:ss.sssZ\"), \"caption\": \"\" }]\r\n        tempImageBase64: [\r\n          {\r\n            base64: data.base64,\r\n            date: dateformat(Date().toString(), \"yyyy-mm-dd'T'HH:MM:ss.sssZ\"),\r\n          },\r\n        ],\r\n      });\r\n    });\r\n  };\r\n\r\n  handleCount = (e, catIndex) => {\r\n    const { checked, type } = e.target;\r\n    switch (catIndex) {\r\n      case 0:\r\n        if (type === \"checkbox\" && checked === true) {\r\n          this.setState((state) => state.catCounts[0]++);\r\n        } else {\r\n          this.setState((state) => state.catCounts[0]--);\r\n        }\r\n        break;\r\n      case 1:\r\n        if (type === \"checkbox\" && checked === true) {\r\n          this.setState((state) => state.catCounts[1]++);\r\n        } else {\r\n          this.setState((state) => state.catCounts[1]--);\r\n        }\r\n        break;\r\n      case 2:\r\n        if (type === \"checkbox\" && checked === true) {\r\n          this.setState((state) => state.catCounts[2]++);\r\n        } else {\r\n          this.setState((state) => state.catCounts[2]--);\r\n        }\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const rectifyLabel = (\r\n      <div>If there are no non-compliances, put {<b>today's</b>} date</div>\r\n    );\r\n    return (\r\n      <div className=\"table\">\r\n        <h3>\r\n          Non-F&B Audit for Tenant at Address:{\" \"}\r\n          <b>\r\n            {typeof this.state.tenantInfo !== \"undefined\"\r\n              ? this.state.tenantInfo.address\r\n              : \"\"}\r\n          </b>\r\n        </h3>\r\n\r\n        <Form\r\n          // {...layout}\r\n          name=\"Non-FB Checklist\"\r\n          className=\"login-register-form\"\r\n          onFinish={this.onFinish}\r\n        >\r\n          <Form.Item\r\n            name=\"date\"\r\n            label=\"Audit Start Date\"\r\n            rules={[{ required: true, message: \"Date of Incident\" }]}\r\n          >\r\n            <DatePicker\r\n              className=\"auditDate\"\r\n              placeholder=\"Audit Date\"\r\n              onChange={this.onChangeDate}\r\n            />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            name=\"recitfyDate\"\r\n            label={rectifyLabel}\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Please enter the timeframe to rectify non-compliance\",\r\n              },\r\n            ]}\r\n          >\r\n            <DatePicker\r\n              className=\"auditDate\"\r\n              placeholder=\"Rectification Deadline\"\r\n              onChange={this.onChangeRectifyDate}\r\n            />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            name=\"Comment\"\r\n            label=\"Notes or Comments\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"PLease enter some notes or comments about the audit\",\r\n              },\r\n            ]}\r\n          >\r\n            <TextArea\r\n              placeholder=\"Notes or Comments\"\r\n              onChange={this.onChangeComment}\r\n              value={this.state.comment}\r\n              id=\"comment\"\r\n              type=\"comment\"\r\n              rows={4}\r\n            />\r\n          </Form.Item>\r\n        </Form>\r\n\r\n        <Button\r\n          type=\"dashed\"\r\n          className=\"submit-button\"\r\n          onClick={this.showFormModal}\r\n        >\r\n          Upload Photo\r\n        </Button>\r\n\r\n        <div className=\"panels\">\r\n          {nonFb.map((cat, catIndex) => {\r\n            // var catScore = cat.score;\r\n            return (\r\n              // Category\r\n              <Collapse defaultActiveKey={[\"1\"]}>\r\n                <Panel\r\n                  header={<div catIndex={catIndex}>{cat.name}</div>}\r\n                  key={catIndex + 1}\r\n                  className=\"bg-orange\"\r\n                >\r\n                  <div catIndex={catIndex}>\r\n                    {cat.subcategories.map((subCat, subCatIndex) => {\r\n                      return (\r\n                        // SubCategory\r\n                        <Collapse defaultActiveKey={[\"1\"]}>\r\n                          <Panel\r\n                            header={\r\n                              <div subCatIndex={subCatIndex}>{subCat.name}</div>\r\n                            }\r\n                            key={subCatIndex + 1}\r\n                            className=\"bg-orange\"\r\n                          >\r\n                            <List\r\n                              dataSource={subCat.questions} // Questions\r\n                              renderItem={(item) => (\r\n                                <List.Item>\r\n                                  <div className=\"checklist-item\">\r\n                                    <div className=\"create-audit-row\">\r\n                                      {item}\r\n                                    </div>\r\n                                    <div className=\"checklist-checkbox\">\r\n                                      {this.createCheckbox(item, catIndex)}\r\n                                    </div>\r\n                                  </div>\r\n                                </List.Item>\r\n                              )}\r\n                            />\r\n                          </Panel>\r\n                        </Collapse>\r\n                      );\r\n                    })}\r\n                  </div>\r\n                  <div>Score: {this.state.catCounts[catIndex] / 2}</div>\r\n                </Panel>\r\n              </Collapse>\r\n            );\r\n          })}\r\n          <b>\r\n            Total Score:{\" \"}\r\n            <span className=\"total_score\">\r\n              {(this.state.catCounts[0] +\r\n                this.state.catCounts[1] +\r\n                this.state.catCounts[2]) /\r\n                2}\r\n            </span>\r\n          </b>\r\n\r\n          <Modal\r\n            title=\"Upload Photo\"\r\n            visible={this.state.visibleForm}\r\n            onOk={this.handleFormOk}\r\n            onCancel={this.handleCancel}\r\n            okButtonProps={{ disabled: false }}\r\n            cancelButtonProps={{ disabled: false }}\r\n          >\r\n            <Form\r\n              name=\"photo_upload\"\r\n              className=\"photo-upload\"\r\n              onFinish={this.onFinish}\r\n            >\r\n              <Form.Item>\r\n                <Input type=\"file\" onChange={this.fileSelectedHandler} />\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                name=\"caption\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Description\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Input\r\n                  placeholder=\"Caption\"\r\n                  onChange={this.onChangeCaption}\r\n                  value={this.state.caption}\r\n                  id=\"caption\"\r\n                  type=\"caption\"\r\n                />\r\n              </Form.Item>\r\n            </Form>\r\n            <Modal\r\n              title=\"Upload Confirm\"\r\n              destroyOnClose={true}\r\n              visible={this.state.visibleConfirm}\r\n              onOk={this.handleUploadOk}\r\n              okButtonProps={{ disabled: false }}\r\n              cancelButtonProps={{ disabled: true, visible: false }}\r\n            >\r\n              <p>Photo Added!</p>\r\n            </Modal>\r\n          </Modal>\r\n          <Button\r\n            onClick={() => this.submitAudit()}\r\n            className=\"submit-button\"\r\n            type=\"primary\"\r\n            htmlType=\"submit\"\r\n          >\r\n            SUBMIT\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nChecklistNonFB.propTypes = {\r\n  tenantInfo: PropTypes.object.isRequired,\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  tenantInfo: state.tenantInfo,\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ChecklistNonFB);\r\n","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\actions\\auditActions.js",["221"],"import { getAllByPlaceholderText } from \"@testing-library/dom\";\r\nimport axios from \"axios\";\r\nimport { GET_ERRORS, GET_MESSAGE } from \"./types\";\r\n\r\nexport const submit = (data) => (dispatch) => {\r\n  console.log(\"submit\", data);\r\n  let promise = new Promise((resolve, reject) => {\r\n    axios\r\n      .post(\"/api/audits/add\", data)\r\n      .then(() => {\r\n        dispatch({\r\n          type: GET_MESSAGE,\r\n          payload: \"Audit Created\",\r\n        });\r\n        resolve(data);\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"in the error\");\r\n        dispatch({\r\n          type: GET_ERRORS,\r\n          payload: error.response.data,\r\n        });\r\n        reject(\"Audit Submission Failed\");\r\n      });\r\n  });\r\n\r\n  promise\r\n    .then((message) => {\r\n      sendEmail(message);\r\n    })\r\n    .catch((message) => {\r\n      console.log(message);\r\n    });\r\n};\r\n\r\nexport const display = (onDataReceived) => (dispatch) => {\r\n  axios\r\n    .get(\"/api/audits\")\r\n    .then((response) => {\r\n      const data = response.data;\r\n      // console.log(data);\r\n      // console.log(data.length);\r\n      onDataReceived(data);\r\n    })\r\n    .catch((err) =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data,\r\n      })\r\n    );\r\n};\r\n\r\nexport const updateAudit = (data) => {\r\n  console.log(\"Update audit: \", data);\r\n  let promise = new Promise((resolve, reject) => {\r\n    axios\r\n      .put(\"/api/audits/update\", data)\r\n      .then(() => {\r\n        resolve(data);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        reject(\"Update Audit failed\");\r\n      });\r\n  });\r\n\r\n  // send email notification\r\n  promise\r\n    .then((message) => {\r\n      sendEmailAuditUpdate(message);\r\n    })\r\n    .catch((message) => {\r\n      console.log(message);\r\n    });\r\n};\r\n\r\nexport const updateAuditImage = (data) => {\r\n  console.log(data);\r\n  axios.put(\"/api/audits/updateImage\", data).catch((error) => {\r\n    console.log(error);\r\n  });\r\n};\r\n\r\nexport const deleteAudit = (data) => {\r\n  console.log(data);\r\n  return axios\r\n    .post(\"/api/audits\", data)\r\n    .then((res) => console.log(\"audit deleted success\"))\r\n    .catch((error) => {\r\n      console.log(error);\r\n    });\r\n};\r\n\r\nexport const sendEmail = (data) => (dispatch) => {\r\n  console.log(\"In send email\");\r\n  axios\r\n    .post(\"/api/sendemail/audit\", data)\r\n    .then((res) => {\r\n      console.log(\"email sent success\");\r\n      dispatch({\r\n        type: GET_MESSAGE,\r\n        payload: \"Email Sent to Tenant\",\r\n      });\r\n    })\r\n    .catch((err) => {\r\n      console.log(\"email sent failed, err: \", err);\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: \"Email Sent Failed\",\r\n      });\r\n    });\r\n};\r\n\r\nexport const sendEmailAuditUpdate = (data) => (dispatch) => {\r\n  console.log(\"In send email\");\r\n  axios\r\n    .post(\"/api/sendemail/auditupdate\", data)\r\n    .then((res) => {\r\n      console.log(\"email sent success\");\r\n      dispatch({\r\n        type: GET_MESSAGE,\r\n        payload: \"Email Notification Sent\",\r\n      });\r\n    })\r\n    .catch((err) => {\r\n      console.log(\"email sent failed, err: \", err);\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: \"Email Sent Failed\",\r\n      });\r\n    });\r\n};\r\n\r\nexport const sendEmailReminder = (data) => (dispatch) => {\r\n  console.log(\"In send email\");\r\n  return axios\r\n    .post(\"/api/sendemail/reminder\", data)\r\n    .then((res) => {\r\n      console.log(\"email sent success\");\r\n      dispatch({\r\n        type: GET_MESSAGE,\r\n        payload: \"Email Reminder Sent to Tenant\",\r\n      });\r\n    })\r\n    .catch((err) => {\r\n      console.log(\"email sent failed, err: \", err);\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: \"Email Sent Failed\",\r\n      });\r\n    });\r\n};\r\n","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\photo\\PhotoPop.js",["222"],"import React, { Component } from \"react\";\r\nimport { Button, Input, Form, Modal, DatePicker } from \"antd\";\r\nimport { uploadPhoto } from \"../../actions/photoActions\";\r\nconst fileUpload = require('fuctbase64');\r\n\r\nexport default class PhotoPop extends Component {\r\n    state = {\r\n        image: null,\r\n        date: null,\r\n        description: \"\",\r\n        location: \"\",\r\n        photo: null,\r\n        visible: false,\r\n    }\r\n\r\n    fileSelectedHandler = event => {\r\n        // console.log(event.target.files[0]);\r\n        fileUpload(event)\r\n            .then((data) => {\r\n                // console.log(\"base64: \", data.base64);\r\n                this.setState({\r\n                    image: data.base64\r\n                })\r\n            })\r\n    }\r\n\r\n    onChange = (e) => {\r\n        this.setState({ [e.target.id]: e.target.value });\r\n    };\r\n\r\n    onChangeDate = (date, dateString) => {\r\n        this.setState({ date: date });\r\n    };\r\n\r\n\r\n    upload = (values) => {\r\n        // console.log(values);\r\n        this.showModal2();\r\n    }\r\n\r\n    showModal = () => {\r\n        this.setState({\r\n            visible: true,\r\n        });\r\n    };\r\n\r\n    showModal2 = () => {\r\n        this.setState({\r\n            visible2: true,\r\n        });\r\n    };\r\n\r\n    handleUploadOk = e => {\r\n        console.log(e);\r\n        this.setState({\r\n            visible: false,\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Form\r\n                    name=\"photo_upload\"\r\n                    className=\"photo-upload\"\r\n                    onFinish={this.onFinish}\r\n                >\r\n                    <Form.Item>\r\n                        <Input type=\"file\" onChange={this.fileSelectedHandler} />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        name=\"date\"\r\n                        rules={[{ required: true, message: \"Date of Incident\" }]}\r\n                    >\r\n                        <DatePicker\r\n                            placeholder=\"Date\"\r\n                            onChange={this.onChangeDate}\r\n                        />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        name=\"description\"\r\n                        rules={[\r\n                            {\r\n                                required: true,\r\n                                message: \"Description\",\r\n                            },\r\n                        ]}\r\n                    >\r\n                        <Input\r\n                            placeholder=\"Description\"\r\n                            onChange={this.onChange}\r\n                            value={this.state.description}\r\n                            id=\"description\"\r\n                            type=\"description\"\r\n                        />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        name=\"location\"\r\n                        rules={[{ required: true, message: \"Location of Incident\" }]}\r\n                    >\r\n                        <Input\r\n                            placeholder=\"Location\"\r\n                            onChange={this.onChange}\r\n                            value={this.state.location}\r\n                            id=\"location\"\r\n                            type=\"location\"\r\n                        />\r\n                    </Form.Item>\r\n                </Form>\r\n                <Form>\r\n                    <Button\r\n                        type=\"primary\"\r\n                        htmlType=\"submit\"\r\n                        className=\"upload-photo-button\"\r\n                        onClick={() => { this.upload(this.state); }}\r\n                    >\r\n                        Upload\r\n                    </Button>\r\n                </Form>\r\n                <Modal\r\n                    title=\"\"\r\n                    visible={this.state.visible2}\r\n                    onOk={this.handleUploadOk}\r\n                    okButtonProps={{ disabled: false }}\r\n                    cancelButtonProps={{ disabled: true, visible: false, }}\r\n                >\r\n                    <p>Photo Uploaded!</p>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}",["223","224"],"C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\actions\\photoActions.js",[],"C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\data\\questionsData.js",[],"C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\private-route\\StaffRoute.js",["225","226"],"import React, { Component } from \"react\";\r\nimport { Link, Route, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst StaffRoute = ({ component: Component, auth, ...rest }) => (\r\n  <Route\r\n    {...rest}\r\n    render={(props) =>\r\n      auth.isAuthenticated === true ? (\r\n        auth.user.usertype === \"staff\" ? ( // check for staff usertype\r\n          <Component {...props} />\r\n        ) : (\r\n          <div>\r\n            <h1>Sorry, you are not authorised to view this page</h1>\r\n          </div>\r\n        )\r\n      ) : (\r\n        <Redirect to=\"/login\" />\r\n      )\r\n    }\r\n  />\r\n);\r\n\r\nStaffRoute.propTypes = {\r\n  auth: PropTypes.object.isRequired,\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  auth: state.auth,\r\n});\r\nexport default connect(mapStateToProps)(StaffRoute);\r\n","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\private-route\\TenantRoute.js",["227","228"],"import React, { Component } from \"react\";\r\nimport { Link, Route, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst TenantRoute = ({ component: Component, auth, ...rest }) => (\r\n  <Route\r\n    {...rest}\r\n    render={(props) =>\r\n      auth.isAuthenticated === true ? (\r\n        auth.user.usertype === \"tenant\" ? ( // check for tenant usertype, maybe can change such that both tenant and staff can view tenant pages\r\n          <Component {...props} />\r\n        ) : (\r\n          <div>\r\n            <h1>Sorry, you are not authorised to view this page</h1>\r\n          </div>\r\n        )\r\n      ) : (\r\n        <Redirect to=\"/login\" />\r\n      )\r\n    }\r\n  />\r\n);\r\n\r\nTenantRoute.propTypes = {\r\n  auth: PropTypes.object.isRequired,\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  auth: state.auth,\r\n});\r\nexport default connect(mapStateToProps)(TenantRoute);\r\n","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\tenant\\TenantHome.js",["229","230","231","232","233"],"import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { NavLink, useHistory } from \"react-router-dom\";\r\nimport { Table, Input, Space, Button } from \"antd\";\r\nimport { display } from \"../../actions/auditActions.js\";\r\nimport { setSelectedTenant, getTenant } from \"../../actions/tenantActions\";\r\nimport Highlighter from \"react-highlight-words\";\r\nimport { SearchOutlined } from \"@ant-design/icons\";\r\nimport { connect } from \"react-redux\";\r\nimport store from \"../../store.js\";\r\nimport PropTypes from \"prop-types\";\r\nimport moment from \"moment\";\r\nconst { Column, ColumnGroup } = Table;\r\n\r\n// const Audit = (props) => (\r\n//   <tr>\r\n//     <td>{props.audit.username}</td>\r\n//     <td>{props.audit.image}</td>\r\n//     <td>{props.audit.notes}</td>\r\n//     <td>{props.audit.tags}</td>\r\n//     <td>{props.audit.date.substring(0, 10)}</td>\r\n//     <td>\r\n//       <Link to={\"/edit/\" + props.audit._id}>edit</Link> |\r\n//       <a\r\n//         href=\"#\"\r\n//         onClick={() => {\r\n//           props.deleteAudit(props.audit._id);\r\n//         }}\r\n//       >\r\n//         delete\r\n//       </a>\r\n//     </td>\r\n//   </tr>\r\n// );\r\n\r\nclass TenantHome extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.deleteAudit = this.deleteAudit.bind(this);\r\n    this.state = {\r\n      audits: [],\r\n      actualAudits: [],\r\n      tenantId: \"\",\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log(\"Mounted: \", store.getState().auth.user.id);\r\n    getTenant((data) => {\r\n      for (var i = 0; i < data.length; i++) {\r\n        if (data[i].userId === store.getState().auth.user.id) {\r\n          this.setState(\r\n            { tenantId: data[i]._id },\r\n            console.log(data[i]._id),\r\n            this.props.display((displayData) => {\r\n              // console.log(\"displayData is: \", displayData);\r\n              var tempList = [];\r\n              for (var i = 0; i < displayData.length; i++) {\r\n                // console.log(displayData[i].tenantID);\r\n                if (displayData[i].tenantID === this.state.tenantId) {\r\n                  tempList.push(displayData[i]);\r\n                }\r\n              }\r\n              // console.log(tempList);\r\n              this.setState({ actualAudits: tempList });\r\n            })\r\n          );\r\n        }\r\n      }\r\n    });\r\n\r\n    // this.auditList();\r\n  }\r\n\r\n  getColumnSearchProps = (dataIndex) => ({\r\n    filterDropdown: ({\r\n      setSelectedKeys,\r\n      selectedKeys,\r\n      confirm,\r\n      clearFilters,\r\n    }) => (\r\n      <div style={{ padding: 8 }}>\r\n        <Input\r\n          ref={(node) => {\r\n            this.searchInput = node;\r\n          }}\r\n          placeholder={`Search ${dataIndex}`}\r\n          value={selectedKeys[0]}\r\n          onChange={(e) =>\r\n            setSelectedKeys(e.target.value ? [e.target.value] : [])\r\n          }\r\n          onPressEnter={() =>\r\n            this.handleSearch(selectedKeys, confirm, dataIndex)\r\n          }\r\n          style={{ width: 188, marginBottom: 8, display: \"block\" }}\r\n        />\r\n        <Space>\r\n          <Button\r\n            type=\"primary\"\r\n            onClick={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\r\n            icon={<SearchOutlined />}\r\n            size=\"small\"\r\n            style={{ width: 90 }}\r\n          >\r\n            Search\r\n          </Button>\r\n          <Button\r\n            onClick={() => this.handleReset(clearFilters)}\r\n            size=\"small\"\r\n            style={{ width: 90 }}\r\n          >\r\n            Reset\r\n          </Button>\r\n          <Button\r\n            type=\"link\"\r\n            size=\"small\"\r\n            onClick={() => {\r\n              confirm({ closeDropdown: false });\r\n              this.setState({\r\n                searchText: selectedKeys[0],\r\n                searchedColumn: dataIndex,\r\n              });\r\n            }}\r\n          >\r\n            Filter\r\n          </Button>\r\n        </Space>\r\n      </div>\r\n    ),\r\n    filterIcon: (filtered) => (\r\n      <SearchOutlined style={{ color: filtered ? \"#1890ff\" : \"#a35709\" }} />\r\n    ),\r\n    onFilter: (value, record) =>\r\n      record[dataIndex]\r\n        ? record[dataIndex]\r\n            .toString()\r\n            .toLowerCase()\r\n            .includes(value.toLowerCase())\r\n        : \"\",\r\n    onFilterDropdownVisibleChange: (visible) => {\r\n      if (visible) {\r\n        setTimeout(() => this.searchInput.select(), 100);\r\n      }\r\n    },\r\n    render: (text) =>\r\n      this.state.searchedColumn === dataIndex ? (\r\n        <Highlighter\r\n          highlightStyle={{ backgroundColor: \"#ffc069\", padding: 0 }}\r\n          searchWords={[this.state.searchText]}\r\n          autoEscape\r\n          textToHighlight={text ? text.toString() : \"\"}\r\n        />\r\n      ) : (\r\n        text\r\n      ),\r\n  });\r\n\r\n  handleSearch = (selectedKeys, confirm, dataIndex) => {\r\n    confirm();\r\n    this.setState({\r\n      searchText: selectedKeys[0],\r\n      searchedColumn: dataIndex,\r\n    });\r\n  };\r\n\r\n  handleReset = (clearFilters) => {\r\n    clearFilters();\r\n    this.setState({ searchText: \"\" });\r\n  };\r\n\r\n  deleteAudit(id) {\r\n    axios\r\n      .delete(\"http://localhost:5000/audits/\" + id)\r\n      .then((res) => console.log(res.data));\r\n    this.setState({\r\n      audits: this.state.audits.filter((el) => el._id !== id),\r\n    });\r\n  }\r\n\r\n  onViewClick = (record) => {\r\n    //pass to redux\r\n    this.props.setSelectedTenant({ record });\r\n    //if FB, go to FB | if non-FB go to non-FB\r\n    this.props.history.push(\"/viewaudittenant\");\r\n    // this.props.tenantInfo = record;\r\n    console.log({ record });\r\n  };\r\n\r\n  // auditList() {\r\n  //   for (var i = 0; i < this.state.audits.length; i++) {\r\n  //     console.log(this.state.audits[i]);\r\n  //     if (this.state.audits[i].tenantID == \"606d8d37f1c72db7882af5c4\") {\r\n  //       this.state.actualAudits.push(this.state.audits[i]);\r\n  //     }\r\n  //   }\r\n  //   return this.state.actualAudits.map((currentaudit) => {\r\n  //     return (\r\n  //       <Audit\r\n  //         audit={currentaudit}\r\n  //         deleteAudit={this.deleteAudit}\r\n  //         key={currentaudit._id}\r\n  //       />\r\n  //     );\r\n  //   });\r\n  // }\r\n\r\n  render() {\r\n    const columns = [\r\n      {\r\n        title: \"Date\",\r\n        dataIndex: \"date\",\r\n        key: \"date\",\r\n        fixed: \"left\",\r\n        width: \"150\",\r\n        sorter: (a, b) => {\r\n          if (a.date > b.date) return 1;\r\n          else return -1;\r\n        },\r\n        defaultSortOrder: \"descend\",\r\n        ...this.getColumnSearchProps(\"date\"),\r\n        render: (text) =>\r\n          moment(text, \"YYYY-MM-DDTHH:mm:ss.SSS\").format(\"DD/MM/YYYY\"),\r\n      },\r\n      {\r\n        title: \"Score\",\r\n        dataIndex: \"total_score\",\r\n        key: \"total_score\",\r\n        fixed: \"left\",\r\n        width: \"150\",\r\n        sorter: (a, b) => {\r\n          if (a.score > b.score) return 1;\r\n          else return -1;\r\n        },\r\n      },\r\n      {\r\n        title: \"Action\",\r\n        dataIndex: \"\",\r\n        key: \"x\",\r\n        fixed: \"right\",\r\n        width: \"20%\",\r\n        render: (record) => (\r\n          <div>\r\n            <Button\r\n              className=\"action-buttons\"\r\n              size=\"small\"\r\n              onClick={() => this.onViewClick(record)}\r\n            >\r\n              View\r\n              <br />\r\n              Audit\r\n            </Button>\r\n          </div>\r\n        ),\r\n      },\r\n    ];\r\n    return (\r\n      <div className=\"table\">\r\n        <Table\r\n          columns={columns}\r\n          dataSource={this.state.actualAudits}\r\n          rowClassName={(record) => (record.total_score < 95 ? \"red\" : \"green\")}\r\n          title={() => <div className=\"table-title\">Your Audits</div>}\r\n          scroll={{ x: 400 }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nTenantHome.propTypes = {\r\n  setSelectedTenant: PropTypes.func.isRequired,\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  userID: state.auth.user.id,\r\n});\r\nexport default connect(mapStateToProps, {\r\n  setSelectedTenant,\r\n  getTenant,\r\n  display,\r\n})(TenantHome);\r\n","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\tenant\\EditAudit.js",[],["234","235"],"C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\TenantList.js",["236","237","238"],"C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\AuditList.js",["239","240","241","242"],"import React, { Component, TextArea } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { Input, Table, Button, Layout, Space } from \"antd\";\r\nimport { connect } from \"react-redux\";\r\nimport moment from \"moment\";\r\nimport Highlighter from \"react-highlight-words\";\r\nimport { SearchOutlined } from \"@ant-design/icons\";\r\nimport { setSelectedTenant, getTenants } from \"../actions/tenantActions\";\r\nimport { sendEmailReminder } from \"../actions/auditActions\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { display } from \"../actions/auditActions.js\";\r\n\r\nconst { Column, ColumnGroup } = Table;\r\n\r\nconst Audit = (props) => (\r\n  <tr>\r\n    <td>{props.audit.username}</td>\r\n    <td>{props.audit.image}</td>\r\n    <td>{props.audit.notes}</td>\r\n    <td>{props.audit.tags}</td>\r\n    <td>{props.audit.date.substring(0, 10)}</td>\r\n    <td>\r\n      <Link to={\"/edit/\" + props.audit._id}>edit</Link> |\r\n      <a\r\n        href=\"#\"\r\n        onClick={() => {\r\n          props.deleteAudit(props.audit._id);\r\n        }}\r\n      >\r\n        delete\r\n      </a>\r\n    </td>\r\n  </tr>\r\n);\r\n\r\nconst mapDispatchToProps = {\r\n  display,\r\n  sendEmailReminder,\r\n  setSelectedTenant,\r\n  getTenants,\r\n};\r\n\r\nclass AuditList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.deleteAudit = this.deleteAudit.bind(this);\r\n    this.state = { audits: [] };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // axios\r\n    //   .get(\"http://localhost:5000/api/audits\")\r\n    //   .then((response) => {\r\n    //     this.setState({ audits: response.data });\r\n    //     console.log(response.data);\r\n    //   })\r\n    //   .catch((error) => {\r\n    //     console.log(error);\r\n    //   });\r\n    this.props.display((data) => {\r\n      console.log(data);\r\n      for (var i = 0; i < data.length; i++) {\r\n        if (data[i].type === \"Non-FB\") {\r\n          data[i].total_score = ((data[i].total_score / 34) * 100).toFixed(2);\r\n        } else {\r\n          data[i].total_score = ((data[i].total_score / 96) * 100).toFixed(2);\r\n        }\r\n      }\r\n      this.setState({ audits: data });\r\n    });\r\n  }\r\n\r\n  onViewClick = (record) => {\r\n    //pass to redux\r\n    this.props.setSelectedTenant({ record });\r\n    //if FB, go to FB | if non-FB go to non-FB\r\n    this.props.history.push(\"/viewaudit\");\r\n    // this.props.tenantInfo = record;\r\n    console.log({ record });\r\n  };\r\n\r\n  onReminderClick = (record) => {\r\n    console.log({ record });\r\n    this.props.sendEmailReminder({ record });\r\n  };\r\n\r\n  deleteAudit(id) {\r\n    axios\r\n      .delete(\"http://localhost:5000/audits/\" + id)\r\n      .then((res) => console.log(res.data));\r\n    this.setState({\r\n      audits: this.state.audits.filter((el) => el._id !== id),\r\n    });\r\n  }\r\n\r\n  auditList() {\r\n    return this.state.audits.map((currentaudit) => {\r\n      return (\r\n        <Audit\r\n          audit={currentaudit}\r\n          deleteAudit={this.deleteAudit}\r\n          key={currentaudit._id}\r\n        />\r\n      );\r\n    });\r\n  }\r\n\r\n  getColumnSearchProps = (dataIndex) => ({\r\n    filterDropdown: ({\r\n      setSelectedKeys,\r\n      selectedKeys,\r\n      confirm,\r\n      clearFilters,\r\n    }) => (\r\n      <div style={{ padding: 8 }}>\r\n        <Input\r\n          ref={(node) => {\r\n            this.searchInput = node;\r\n          }}\r\n          placeholder={`Search ${dataIndex}`}\r\n          value={selectedKeys[0]}\r\n          onChange={(e) =>\r\n            setSelectedKeys(e.target.value ? [e.target.value] : [])\r\n          }\r\n          onPressEnter={() =>\r\n            this.handleSearch(selectedKeys, confirm, dataIndex)\r\n          }\r\n          style={{ width: 188, marginBottom: 8, display: \"block\" }}\r\n        />\r\n        <Space>\r\n          <Button\r\n            type=\"primary\"\r\n            onClick={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\r\n            icon={<SearchOutlined />}\r\n            size=\"small\"\r\n            style={{ width: 90 }}\r\n          >\r\n            Search\r\n          </Button>\r\n          <Button\r\n            onClick={() => this.handleReset(clearFilters)}\r\n            size=\"small\"\r\n            style={{ width: 90 }}\r\n          >\r\n            Reset\r\n          </Button>\r\n          <Button\r\n            type=\"link\"\r\n            size=\"small\"\r\n            onClick={() => {\r\n              confirm({ closeDropdown: false });\r\n              this.setState({\r\n                searchText: selectedKeys[0],\r\n                searchedColumn: dataIndex,\r\n              });\r\n            }}\r\n          >\r\n            Filter\r\n          </Button>\r\n        </Space>\r\n      </div>\r\n    ),\r\n    filterIcon: (filtered) => (\r\n      <SearchOutlined style={{ color: filtered ? \"#1890ff\" : \"#a35709\" }} />\r\n    ),\r\n    onFilter: (value, record) =>\r\n      record[dataIndex]\r\n        ? record[dataIndex]\r\n            .toString()\r\n            .toLowerCase()\r\n            .includes(value.toLowerCase())\r\n        : \"\",\r\n    onFilterDropdownVisibleChange: (visible) => {\r\n      if (visible) {\r\n        setTimeout(() => this.searchInput.select(), 100);\r\n      }\r\n    },\r\n    render: (text) =>\r\n      this.state.searchedColumn === dataIndex ? (\r\n        <Highlighter\r\n          highlightStyle={{ backgroundColor: \"#ffc069\", padding: 0 }}\r\n          searchWords={[this.state.searchText]}\r\n          autoEscape\r\n          textToHighlight={text ? text.toString() : \"\"}\r\n        />\r\n      ) : (\r\n        text\r\n      ),\r\n  });\r\n\r\n  handleSearch = (selectedKeys, confirm, dataIndex) => {\r\n    confirm();\r\n    this.setState({\r\n      searchText: selectedKeys[0],\r\n      searchedColumn: dataIndex,\r\n    });\r\n  };\r\n\r\n  handleReset = (clearFilters) => {\r\n    clearFilters();\r\n    this.setState({ searchText: \"\" });\r\n  };\r\n\r\n  render() {\r\n    // if (this.state.audits.length > 0) {\r\n    //   console.log(\"before: \", this.state.audits[0].date);\r\n    //   const someDate = moment(this.state.audits[0].date);\r\n    //   console.log(\"after: \", someDate);\r\n    // }\r\n    const columns = [\r\n      {\r\n        title: \"Addr.\",\r\n        dataIndex: \"location\",\r\n        key: \"location\",\r\n        width: \"20%\",\r\n        ...this.getColumnSearchProps(\"location\"),\r\n      },\r\n      {\r\n        title: \"Tenant ID\",\r\n        dataIndex: \"tenantID\",\r\n        key: \"itenantID\",\r\n        width: \"20%\",\r\n        ...this.getColumnSearchProps(\"tenantID\"),\r\n      },\r\n      {\r\n        title: \"Inst.\",\r\n        dataIndex: \"institution\",\r\n        key: \"institution\",\r\n        width: \"15%\",\r\n        ...this.getColumnSearchProps(\"institution\"),\r\n      },\r\n      {\r\n        title: \"Date\",\r\n        dataIndex: \"date\",\r\n        key: \"date\",\r\n        width: \"15%\",\r\n        sorter: (a, b) => {\r\n          if (a.date > b.date) return 1;\r\n          else return -1;\r\n        },\r\n        defaultSortOrder: \"descend\",\r\n        ...this.getColumnSearchProps(\"date\"),\r\n        render: (text) =>\r\n          moment(text, \"YYYY-MM-DDTHH:mm:ss.SSS\").format(\"DD/MM/YYYY\"),\r\n      },\r\n      {\r\n        title: \"Type\",\r\n        dataIndex: \"type\",\r\n        key: \"type\",\r\n        width: \"10%\",\r\n        ...this.getColumnSearchProps(\"type\"),\r\n      },\r\n      {\r\n        title: \"Audit Score\",\r\n        dataIndex: \"total_score\",\r\n        key: \"total_score\",\r\n        fixed: \"right\",\r\n        width: \"10%\",\r\n        sorter: (a, b) => {\r\n          if (a.score > b.score) return 1;\r\n          else return -1;\r\n        },\r\n      },\r\n      {\r\n        title: \"Action\",\r\n        dataIndex: \"\",\r\n        key: \"x\",\r\n        fixed: \"right\",\r\n        width: \"10%\",\r\n        render: (record) => (\r\n          <div>\r\n            <Button\r\n              className=\"action-buttons\"\r\n              size=\"small\"\r\n              onClick={() => this.onViewClick(record)}\r\n            >\r\n              View\r\n            </Button>\r\n            <Button\r\n              className=\"action-buttons\"\r\n              size=\"small\"\r\n              onClick={() => this.onReminderClick(record)}\r\n            >\r\n              Reminder\r\n            </Button>\r\n          </div>\r\n        ),\r\n      },\r\n    ];\r\n\r\n    return (\r\n      <Layout>\r\n        <div className=\"table\">\r\n          <h3>Your Audits</h3>\r\n          <Table\r\n            rowClassName={(record) =>\r\n              record.total_score < 95 ? \"red\" : \"green\"\r\n            }\r\n            columns={columns}\r\n            dataSource={this.state.audits}\r\n            scroll={{ x: 800, y: 300 }}\r\n          />\r\n        </div>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\nAuditList.propTypes = {\r\n  setSelectedTenant: PropTypes.func.isRequired,\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  userID: state.auth.user.id,\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AuditList);\r\n","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\reducers\\messageReducer.js",[],"C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\MessageDisplay.js",[],"C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\actions\\errorActions.js",[],"C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\auth\\CreateTenant.js",["243","244","245","246","247","248","249","250"],"import React, { ReactDOM, Component } from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { registerTenant, sendEmail } from \"../../actions/authActions\";\r\nimport { Form, Input, Button, Message, Select, Layout } from \"antd\";\r\nimport { MailOutlined, UserOutlined, LockOutlined } from \"@ant-design/icons\";\r\nimport institutionsData from \"../../data/institutions.json\";\r\nimport tenantData from \"../../data/tenantTypes.json\";\r\n\r\nconst { Header, Footer, Sider, Content } = Layout;\r\n\r\n// TODO: this should be taken from db\r\nconst institutions = institutionsData;\r\nconst tenantTypes = tenantData;\r\n\r\nclass CreateTenant extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      name: \"\",\r\n      type: \"\",\r\n      email: \"\",\r\n      address: \"\",\r\n      institution: \"\",\r\n      auditor: \"\",\r\n      errors: {},\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // If loggied in and user navigates to Register page, should redirect them to dashboad\r\n    if (this.props.auth.isAuthenticaed) {\r\n      this.props.history.push(\"/dashboard\"); // Push new entry into history stack, ie redirecting the user to another route\r\n    }\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps) {\r\n    if (nextProps.errors) {\r\n      this.setState({\r\n        errors: nextProps.errors,\r\n      });\r\n    }\r\n  }\r\n\r\n  onChange = (e) => {\r\n    this.setState({ [e.target.id]: e.target.value });\r\n  };\r\n\r\n  onDropdownChange = (e, { value }) => this.setState({ value });\r\n\r\n  // TODO send email to tenant with login details\r\n  onFinish = (values) => {\r\n    const newUser = {\r\n      name: values.name,\r\n      type: values.type,\r\n      email: values.email,\r\n      address: values.address,\r\n      institution: values.institution,\r\n      auditor: values.auditor,\r\n    };\r\n    console.log(\"newUser: \", newUser);\r\n    this.props.registerTenant(newUser, this.props.history);\r\n    // this.props.sendEmail(newUser);\r\n    window.scrollTo(0, 0); // Scroll to top\r\n  };\r\n\r\n  render() {\r\n    const { user } = this.props.auth;\r\n    const { errors } = this.state;\r\n    const layout = {\r\n      labelCol: { span: 3 },\r\n    };\r\n    return (\r\n      <Layout>\r\n        <h2\r\n          style={{\r\n            background: \"#fff5bd\",\r\n            width: \"98%\",\r\n            \"margin-bottom\": \"auto\",\r\n          }}\r\n        >\r\n          Create a Tenant Account\r\n        </h2>\r\n        <Content>\r\n          <Form\r\n            {...layout}\r\n            name=\"normal_login\"\r\n            className=\"login-register-form\"\r\n            onFinish={this.onFinish}\r\n            initialValues={{\r\n              auditor: user.name,\r\n            }}\r\n          >\r\n            {/* No name, replace with id for annonymity */}\r\n\r\n            <Form.Item\r\n              label=\"Tenant Name\"\r\n              name=\"name\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  type: \"string\",\r\n                  message: \"Please input a valid Name!\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input\r\n                placeholder=\"Tenant Name\"\r\n                onChange={this.onChange}\r\n                value={this.state.name}\r\n                error={errors.name}\r\n                id=\"name\"\r\n                type=\"name\"\r\n                // className={classnames(\"\", {\r\n                //   invalid: errors.email,\r\n                // })}\r\n              />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n              label=\"Type\"\r\n              name=\"type\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Please select F&B or non-F&B!\",\r\n                },\r\n              ]}\r\n            >\r\n              <Select\r\n                showSearch\r\n                className=\"dropdown\"\r\n                placeholder=\"F&B or Non-F&B\"\r\n                options={tenantTypes}\r\n                onChange={this.onDropdownChange}\r\n                id=\"type\"\r\n                type=\"type\"\r\n                value={this.state.type}\r\n                error={errors.type}\r\n              />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n              label=\"Email\"\r\n              name=\"email\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  type: \"email\",\r\n                  message: \"Please input a valid Email!\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input\r\n                placeholder=\"Email\"\r\n                onChange={this.onChange}\r\n                value={this.state.email}\r\n                error={errors.email}\r\n                id=\"email\"\r\n                type=\"email\"\r\n                // className={classnames(\"\", {\r\n                //   invalid: errors.email,\r\n                // })}\r\n              />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n              label=\"Address\"\r\n              name=\"address\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  type: \"string\",\r\n                  message: \"Please input a valid Address!\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input\r\n                placeholder=\"Address\"\r\n                onChange={this.onChange}\r\n                value={this.state.address}\r\n                error={errors.address}\r\n                id=\"address\"\r\n                type=\"address\"\r\n                // className={classnames(\"\", {\r\n                //   invalid: errors.email,\r\n                // })}\r\n              />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n              label=\"Institution\"\r\n              name=\"institution\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Please select an institution!\",\r\n                },\r\n              ]}\r\n            >\r\n              <Select\r\n                showSearch\r\n                className=\"dropdown\"\r\n                icon={MailOutlined}\r\n                placeholder=\"Institution\"\r\n                options={institutions}\r\n                onChange={this.onDropdownChange}\r\n                id=\"institution\"\r\n                type=\"institution\"\r\n                value={this.state.institution}\r\n                error={errors.institution}\r\n              />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n              label=\"Auditor\"\r\n              name=\"auditor\"\r\n              rules={[\r\n                { required: true, message: \"Please input name of Auditor!\" },\r\n              ]}\r\n            >\r\n              <Input\r\n                placeholder=\"Auditor\"\r\n                onChange={this.onChange}\r\n                value={this.state.auditor}\r\n                error={errors.auditor}\r\n                id=\"auditor\"\r\n                type=\"auditor\"\r\n              />\r\n            </Form.Item>\r\n\r\n            <Form.Item>\r\n              <Button\r\n                type=\"primary\"\r\n                htmlType=\"submit\"\r\n                className=\"login-register-form-button\"\r\n              >\r\n                Create Tenant\r\n              </Button>\r\n            </Form.Item>\r\n          </Form>\r\n        </Content>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n// Props stands for properties and is being used for passing data from one component to another\r\nCreateTenant.propTypes = {\r\n  registerTenant: PropTypes.func.isRequired,\r\n  auth: PropTypes.object.isRequired,\r\n  errors: PropTypes.object.isRequired,\r\n};\r\n\r\n// Get state from Redux and map it to props\r\nconst mapStateToProps = (state) => ({\r\n  auth: state.auth, // allows us to call this.props.auth\r\n  errors: state.errors, // allows us to call this.props.errors\r\n});\r\n\r\nexport default connect(mapStateToProps, { registerTenant, sendEmail })(\r\n  withRouter(CreateTenant)\r\n);\r\n","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\actions\\tenantActions.js",["251"],"import axios from \"axios\";\r\nimport { GET_ERRORS, SET_SELECTED_TENANT, GET_MESSAGE } from \"./types\";\r\n\r\n// Get Tenants\r\nexport const getTenants = (onDataReceived) => (dispatch) => {\r\n  console.log(\"arrived\");\r\n  axios\r\n    .get(\"/api/tenants\")\r\n    .then((response) => {\r\n      // console.log(\"response is:\", response.data);\r\n      onDataReceived(response.data);\r\n    })\r\n    .catch(\r\n      (err) =>\r\n        dispatch({\r\n          type: GET_ERRORS,\r\n          payload: err.response.data,\r\n        })\r\n      // console.log(\"err\")\r\n    );\r\n};\r\n\r\nexport const getTenant = (onDataReceived) => {\r\n  axios\r\n    .get(\"/api/tenants\")\r\n    .then((response) => {\r\n      // console.log(\"response is:\", response.data);\r\n      onDataReceived(response.data);\r\n    })\r\n    .catch(() => {\r\n      alert(\"Error\");\r\n    });\r\n};\r\n\r\nexport const delTenant = (data) => {\r\n  console.log(\"arrived\");\r\n  console.log(data);\r\n  return axios\r\n    .post(\"/api/tenants\", {\r\n      _id: data._id,\r\n    })\r\n    .then((response) => {\r\n      // this.setState({ users: response.data });\r\n      console.log(\"deleteUser response\", response);\r\n    })\r\n    .catch((error) => {\r\n      console.log(error);\r\n    });\r\n};\r\n\r\n// Update tenantInfo in store with the row selected tenantInfo\r\nexport const setSelectedTenant = (data) => {\r\n  return {\r\n    type: SET_SELECTED_TENANT,\r\n    payload: data,\r\n  };\r\n};\r\n","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\reducers\\tenantReducer.js",["252"],"/* eslint-disable import/no-anonymous-default-export */\r\nimport { SET_SELECTED_TENANT } from \"../actions/types\";\r\n\r\nconst initialState = {};\r\n\r\n// anonymous function\r\nexport default function (state = initialState, action) {\r\n  console.log(\"in reducer\");\r\n  switch (action.type) {\r\n    case SET_SELECTED_TENANT:\r\n      return { ...state }, action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\ViewAudit.js",["253","254","255","256"],"import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  Typography,\r\n  Progress,\r\n  Image,\r\n  Input,\r\n  Comment,\r\n  Form,\r\n  Button,\r\n  Row,\r\n  Col,\r\n  Card,\r\n  Modal,\r\n  Divider,\r\n  Layout,\r\n} from \"antd\";\r\nimport dateformat from \"dateformat\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport moment from \"moment\";\r\nimport { updateAudit, updateAuditImage } from \"../actions/auditActions.js\";\r\nconst fileUpload = require(\"fuctbase64\");\r\n\r\nconst { Text } = Typography;\r\nconst { TextArea } = Input;\r\n\r\nclass ViewAudit extends Component {\r\n  state = {\r\n    _id: \"\",\r\n    audit: \"\",\r\n    total_score: \"\",\r\n    tenantID: \"\",\r\n    auditor: \"\",\r\n    // auditorComments: [\"Bla\", \"blabla\"],\r\n    // tenantComments: [\"Response\", \"response\"],\r\n    comment: \"\",\r\n    image: \"\",\r\n    date: \"\",\r\n    rectifyDate: \"\",\r\n    catCounts: \"\",\r\n    type: \"\",\r\n    decodedImage: \"\",\r\n    newComment: \"\",\r\n    tempImageBase64: [],\r\n    tempImageCaption: null,\r\n    imageUpload: [],\r\n    visibleConfirm: false,\r\n    testState: \"\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      _id: this.props.tenantInfo.record._id,\r\n      total_score: this.props.tenantInfo.record.total_score,\r\n      tenantID: this.props.tenantInfo.record.tenantID,\r\n      comment: this.props.tenantInfo.record.comment,\r\n      image: this.props.tenantInfo.record.image,\r\n      date: this.props.tenantInfo.record.date,\r\n      rectifyDate: this.props.tenantInfo.record.rectifyDate,\r\n      auditor: this.props.tenantInfo.record.auditor,\r\n      catCounts: this.props.tenantInfo.record.catCounts,\r\n      type: this.props.tenantInfo.record.type,\r\n    });\r\n    console.log(this.state);\r\n  }\r\n\r\n  fileSelectedHandler = (event) => {\r\n    console.log(event.target.files[0]);\r\n    fileUpload(event).then((data) => {\r\n      console.log(\"base64: \", data.base64);\r\n      this.setState({\r\n        // image: [{ \"base64\": data.base64, \"date\": dateformat(Date().toString(), \"yyyy-mm-dd'T'HH:MM:ss.sssZ\"), \"caption\": \"\" }]\r\n        tempImageBase64: [\r\n          {\r\n            base64: data.base64,\r\n            date: dateformat(Date().toString(), \"yyyy-mm-dd'T'HH:MM:ss.sssZ\"),\r\n          },\r\n        ],\r\n      });\r\n    });\r\n  };\r\n\r\n  onChangeCaption = (caption) => {\r\n    console.log(this.state);\r\n    this.setState({\r\n      tempImageCaption: caption.nativeEvent.explicitOriginalTarget.value,\r\n    });\r\n  };\r\n\r\n  handleUploadOk = (e) => {\r\n    console.log(e);\r\n    console.log(this.state);\r\n    var tempArray = this.state.image;\r\n    console.log(tempArray);\r\n    tempArray.push([\r\n      {\r\n        base64: this.state.tempImageBase64[0].base64,\r\n        date: this.state.tempImageBase64[0].date,\r\n        caption: this.state.tempImageCaption,\r\n      },\r\n    ]);\r\n    console.log(tempArray);\r\n    this.setState({\r\n      image: tempArray,\r\n      visibleConfirm: false,\r\n    });\r\n    this.updateImage();\r\n  };\r\n\r\n  displayComments() {\r\n    var output = [];\r\n    var Comm = [];\r\n    for (\r\n      var i = 0;\r\n      i <\r\n      Math.max(\r\n        this.state.comment.length,\r\n        this.state.image === null ? 0 : this.state.image.length\r\n      );\r\n      i++\r\n    ) {\r\n      if (this.state.comment[i] != null) {\r\n        Comm.push(this.state.comment[i]);\r\n      }\r\n\r\n      if (this.state.image !== null && this.state.image[i] !== null) {\r\n        Comm.push(this.state.image[i]);\r\n      }\r\n    }\r\n    Comm = Comm.sort((a, b) => a.date > b.date);\r\n    console.log(Comm);\r\n\r\n    let cardAlign = \"cardLeft\";\r\n    for (var j = 0; j < Comm.length; j++) {\r\n      if (Comm[j].content) {\r\n        cardAlign = Comm[j].author === \"Tenant(You)\" ? \"cardRight\" : \"cardLeft\";\r\n        output.push(\r\n          <Card size=\"small\" className={cardAlign}>\r\n            <Comment\r\n              author={<a>{Comm[j].author}</a>}\r\n              content={<p>{Comm[j].content}</p>}\r\n            />\r\n          </Card>\r\n        );\r\n      } else {\r\n        cardAlign = Comm[j].author === \"Tenant(You)\" ? \"cardRight\" : \"cardLeft\";\r\n        output.push(\r\n          <Card className={cardAlign} size=\"small\">\r\n            <Comment\r\n              author={<a>{Comm[j].uploader}</a>}\r\n              className=\"caption\"\r\n              content={<p>{Comm[j].caption}</p>}\r\n            ></Comment>\r\n            <Image\r\n              width={100}\r\n              src={`data:image/jpeg;base64,${Comm[j].base64}`}\r\n            />\r\n          </Card>\r\n        );\r\n      }\r\n    }\r\n    return <div>{output}</div>;\r\n  }\r\n\r\n  onChange = (value) => {\r\n    console.log(value.Text);\r\n    console.log(this.state.newComment);\r\n  };\r\n\r\n  handleFormOk = (e) => {\r\n    console.log(e);\r\n    this.setState({\r\n      imageUpload: [\r\n        {\r\n          base64: this.state.tempImageBase64[0].base64,\r\n          date: this.state.tempImageBase64[0].date,\r\n          caption: this.state.tempImageCaption,\r\n          uploader: \"auditor\",\r\n        },\r\n      ],\r\n      // image: tempArray,\r\n      // visibleConfirm: false,\r\n      testState: \"Test Passed\",\r\n    });\r\n    this.showConfirmModal();\r\n  };\r\n\r\n  showConfirmModal = () => {\r\n    this.setState({\r\n      visibleConfirm: true,\r\n    });\r\n  };\r\n\r\n  newComment = (values) => {\r\n    // console.log(values.nativeEvent.explicitOriginalTarget.value);\r\n    this.setState({\r\n      newComment: [\r\n        {\r\n          content: values.nativeEvent.explicitOriginalTarget.value,\r\n          date: dateformat(Date().toString(), \"yyyy-mm-dd'T'HH:MM:ss.sssZ\"),\r\n          author: this.state.auditor,\r\n        },\r\n      ],\r\n    });\r\n    // console.log(this.state.newComment)\r\n  };\r\n\r\n  submitComment = () => {\r\n    var tempArray = this.state.comment;\r\n    console.log(tempArray);\r\n    tempArray.push(this.state.newComment[0]);\r\n    console.log(tempArray);\r\n    this.setState({\r\n      comment: tempArray,\r\n    });\r\n    console.log(this.state.comment);\r\n    this.updateComment();\r\n  };\r\n\r\n  updateComment = () => {\r\n    console.log(this.state);\r\n    updateAudit({\r\n      _id: this.props.tenantInfo.record._id,\r\n      type: this.props.tenantInfo.record.type,\r\n      catCounts: this.props.tenantInfo.record.catCounts,\r\n      total_score: this.props.tenantInfo.record.total_score,\r\n      image: this.props.tenantInfo.record.image,\r\n      date: this.props.tenantInfo.record.date,\r\n      comment: this.state.newComment,\r\n      location: this.props.tenantInfo.record.location,\r\n      tenantID: this.props.tenantInfo.record.tenantID,\r\n    });\r\n  };\r\n\r\n  updateImage = () => {\r\n    console.log(this.state);\r\n    updateAuditImage({\r\n      _id: this.props.tenantInfo.record._id,\r\n      type: this.props.tenantInfo.record.type,\r\n      catCounts: this.props.tenantInfo.record.catCounts,\r\n      total_score: this.props.tenantInfo.record.total_score,\r\n      image: this.state.imageUpload,\r\n      date: this.props.tenantInfo.record.date,\r\n      comment: this.props.tenantInfo.record.comment,\r\n      location: this.props.tenantInfo.record.location,\r\n      tenantID: this.props.tenantInfo.record.tenantID,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Layout>\r\n        <Card>\r\n          <Row>\r\n            <Col span={15} style={{ display: \"block\" }}>\r\n              <div\r\n                style={{ \"text-align\": \"left\", clear: \"both\", width: \"100%\" }}\r\n              >\r\n                Tenant ID:{\" \"}\r\n              </div>\r\n              <div className=\"name\">\r\n                <b>{this.state.tenantID}</b>\r\n              </div>\r\n              <div\r\n                style={{ \"text-align\": \"left\", clear: \"both\", width: \"100%\" }}\r\n              >\r\n                Auditor:\r\n              </div>\r\n              <div className=\"name\">\r\n                <b>{this.state.auditor}</b>\r\n              </div>\r\n              <div\r\n                style={{ \"text-align\": \"left\", clear: \"both\", width: \"100%\" }}\r\n              >\r\n                Rectification Deadline:\r\n              </div>\r\n              <div className=\"name\">\r\n                <b>\r\n                  {moment(\r\n                    this.state.rectifyDate,\r\n                    \"YYYY-MM-DDTHH:mm:ss.SSS\"\r\n                  ).format(\"Do MMMM, YYYY\")}\r\n                </b>\r\n              </div>\r\n            </Col>\r\n            <Col span={9}>\r\n              <Progress\r\n                className=\"score\"\r\n                type=\"circle\"\r\n                percent={this.state.total_score}\r\n                width={\"18vh\"}\r\n                strokeWidth={\"10\"}\r\n              />\r\n            </Col>\r\n          </Row>\r\n        </Card>\r\n        <div>\r\n          <div>{this.displayComments()}</div>\r\n          <Card size=\"small\" style={{ \"background-color\": \"#F0F2F5\" }}>\r\n            <Form\r\n              className=\"addComment\"\r\n              onChange={this.newComment}\r\n              layout=\"vertical\"\r\n              size=\"small\"\r\n              initialValues={{\r\n                remember: false,\r\n              }}\r\n            >\r\n              <Form.Item name=\"addComment\" label={<b>Add Comment</b>}>\r\n                <TextArea\r\n                  className=\"addCommentText\"\r\n                  placeholder=\"Add Comment\"\r\n                  rows={4}\r\n                  allowClear={true}\r\n                />\r\n              </Form.Item>\r\n              <Form.Item>\r\n                <Button\r\n                  className=\"view-audit-buttons\"\r\n                  onClick={this.submitComment}\r\n                >\r\n                  Submit Comment\r\n                </Button>\r\n              </Form.Item>\r\n\r\n              <Divider />\r\n\r\n              <Form.Item label={<b>Add Photo</b>}>\r\n                <Input type=\"file\" onChange={this.fileSelectedHandler} />\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                name=\"caption\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Description\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Input\r\n                  placeholder=\"Caption\"\r\n                  onChange={this.onChangeCaption}\r\n                  value={this.state.caption}\r\n                  id=\"caption\"\r\n                  type=\"caption\"\r\n                />\r\n              </Form.Item>\r\n              <Button\r\n                className=\"view-audit-buttons\"\r\n                onClick={this.handleFormOk}\r\n              >\r\n                Submit Photo\r\n              </Button>\r\n            </Form>\r\n          </Card>\r\n          <Modal\r\n            title=\"Upload Confirm\"\r\n            destroyOnClose={true}\r\n            visible={this.state.visibleConfirm}\r\n            onOk={this.handleUploadOk}\r\n            okButtonProps={{ disabled: false }}\r\n            cancelButtonProps={{ disabled: true, visible: false }}\r\n          >\r\n            <p>Photo Added!</p>\r\n          </Modal>\r\n        </div>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\nViewAudit.propTypes = {\r\n  tenantInfo: PropTypes.object.isRequired,\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  tenantInfo: state.tenantInfo,\r\n});\r\nexport default connect(mapStateToProps)(ViewAudit);\r\n","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\ViewAuditTenant.js",["257","258","259","260"],"import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  Typography,\r\n  Progress,\r\n  Image,\r\n  Input,\r\n  Comment,\r\n  Form,\r\n  Button,\r\n  Row,\r\n  Col,\r\n  Card,\r\n  Modal,\r\n  Divider,\r\n  Layout,\r\n} from \"antd\";\r\nimport dateformat from \"dateformat\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport moment from \"moment\";\r\nimport { updateAudit, updateAuditImage } from \"../actions/auditActions.js\";\r\nconst fileUpload = require(\"fuctbase64\");\r\nconst { Text } = Typography;\r\nconst { TextArea } = Input;\r\n\r\nclass ViewAuditTenant extends Component {\r\n  state = {\r\n    _id: \"\",\r\n    audit: \"\",\r\n    total_score: \"\",\r\n    tenantID: \"\",\r\n    auditor: \"auditor\",\r\n    auditorId: \"\",\r\n    // auditorComments: [\"Bla\", \"blabla\"],\r\n    // tenantComments: [\"Response\", \"response\"],\r\n    comment: \"\",\r\n    image: \"\",\r\n    date: \"\",\r\n    catCounts: \"\",\r\n    type: \"\",\r\n    decodedImage: \"\",\r\n    newComment: \"\",\r\n    tempImageBase64: [],\r\n    tempImageCaption: null,\r\n    imageUpload: [],\r\n    visibleConfirm: false,\r\n    testState: \"\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      _id: this.props.tenantInfo.record._id,\r\n      total_score: this.props.tenantInfo.record.total_score,\r\n      tenantID: this.props.tenantInfo.record.tenantID,\r\n      comment: this.props.tenantInfo.record.comment,\r\n      image: this.props.tenantInfo.record.image,\r\n      date: this.props.tenantInfo.record.date,\r\n      rectifyDate: this.props.tenantInfo.record.rectifyDate,\r\n      auditor: this.props.tenantInfo.record.auditor,\r\n      auditorId: this.props.tenantInfo.record.auditorId,\r\n      catCounts: this.props.tenantInfo.record.catCounts,\r\n      type: this.props.tenantInfo.record.type,\r\n    });\r\n  }\r\n\r\n  fileSelectedHandler = (event) => {\r\n    console.log(event.target.files[0]);\r\n    fileUpload(event).then((data) => {\r\n      console.log(\"base64: \", data.base64);\r\n      this.setState({\r\n        // image: [{ \"base64\": data.base64, \"date\": dateformat(Date().toString(), \"yyyy-mm-dd'T'HH:MM:ss.sssZ\"), \"caption\": \"\" }]\r\n        tempImageBase64: [\r\n          {\r\n            base64: data.base64,\r\n            date: dateformat(Date().toString(), \"yyyy-mm-dd'T'HH:MM:ss.sssZ\"),\r\n          },\r\n        ],\r\n      });\r\n    });\r\n  };\r\n\r\n  onChangeCaption = (caption) => {\r\n    console.log(this.state);\r\n    this.setState({\r\n      tempImageCaption: caption.nativeEvent.explicitOriginalTarget.value,\r\n    });\r\n  };\r\n\r\n  handleUploadOk = (e) => {\r\n    console.log(e);\r\n    console.log(this.state);\r\n    var tempArray = this.state.image;\r\n    console.log(tempArray);\r\n    tempArray.push([\r\n      {\r\n        base64: this.state.tempImageBase64[0].base64,\r\n        date: this.state.tempImageBase64[0].date,\r\n        caption: this.state.tempImageCaption,\r\n      },\r\n    ]);\r\n    console.log(tempArray);\r\n    this.setState({\r\n      image: tempArray,\r\n    });\r\n    this.setState({\r\n      visibleConfirm: false,\r\n    });\r\n    this.updateImage();\r\n  };\r\n\r\n  displayComments() {\r\n    var output = [];\r\n    var Comm = [];\r\n    for (\r\n      var i = 0;\r\n      i <\r\n      Math.max(\r\n        this.state.comment.length,\r\n        this.state.image === null ? 0 : this.state.image.length\r\n      );\r\n      i++\r\n    ) {\r\n      Comm.push(this.state.comment[i]);\r\n      if (this.state.image !== null && this.state.image[i] !== null) {\r\n        Comm.push(this.state.image[i]);\r\n      }\r\n    }\r\n    Comm = Comm.sort((a, b) => a.date > b.date);\r\n    console.log(Comm);\r\n\r\n    let cardAlign = \"cardLeft\";\r\n    for (var j = 0; j < Comm.length; j++) {\r\n      if (Comm[j].content) {\r\n        console.log(\"if: \", Comm[j].content);\r\n        cardAlign = Comm[j].author === \"Tenant(You)\" ? \"cardRight\" : \"cardLeft\";\r\n        output.push(\r\n          <Card size=\"small\" className={cardAlign}>\r\n            <Comment\r\n              author={<a>{Comm[j].author}</a>}\r\n              content={<p>{Comm[j].content}</p>}\r\n            />\r\n          </Card>\r\n        );\r\n      } else {\r\n        cardAlign = Comm[j].author === \"Tenant(You)\" ? \"cardRight\" : \"cardLeft\";\r\n        console.log(\"else: \", typeof Comm[j]);\r\n        output.push(\r\n          <Card className={cardAlign} size=\"small\">\r\n            <p></p>\r\n            <Comment\r\n              author={<a>{Comm[j].uploader}</a>}\r\n              className=\"caption\"\r\n              content={<p>{Comm[j].caption}</p>}\r\n            ></Comment>\r\n            <Image\r\n              width={100}\r\n              src={`data:image/jpeg;base64,${Comm[j].base64}`}\r\n            />\r\n          </Card>\r\n        );\r\n      }\r\n    }\r\n    return <div>{output}</div>;\r\n  }\r\n\r\n  onChange = (value) => {\r\n    console.log(value.Text);\r\n    console.log(this.state.newComment);\r\n  };\r\n\r\n  handleFormOk = (e) => {\r\n    console.log(e);\r\n    this.setState({\r\n      imageUpload: [\r\n        {\r\n          base64: this.state.tempImageBase64[0].base64,\r\n          date: this.state.tempImageBase64[0].date,\r\n          caption: this.state.tempImageCaption,\r\n          uploader: \"tenant\",\r\n        },\r\n      ],\r\n      // image: tempArray,\r\n      // visibleConfirm: false,\r\n      testState: \"Test Passed\",\r\n    });\r\n    this.showConfirmModal();\r\n  };\r\n\r\n  showConfirmModal = () => {\r\n    this.setState({\r\n      visibleConfirm: true,\r\n    });\r\n  };\r\n\r\n  newComment = (values) => {\r\n    // console.log(values.nativeEvent.explicitOriginalTarget.value);\r\n    this.setState({\r\n      newComment: [\r\n        {\r\n          content: values.nativeEvent.explicitOriginalTarget.value,\r\n          date: dateformat(Date().toString(), \"yyyy-mm-dd'T'HH:MM:ss.sssZ\"),\r\n          author: \"Tenant(You)\",\r\n        },\r\n      ],\r\n    });\r\n    // console.log(this.state.newComment)\r\n  };\r\n\r\n  submitComment = () => {\r\n    var tempArray = this.state.comment;\r\n    console.log(tempArray);\r\n    tempArray.push(this.state.newComment[0]);\r\n    console.log(tempArray);\r\n    this.setState({\r\n      comment: tempArray,\r\n    });\r\n    console.log(this.state.comment);\r\n    this.updateComments();\r\n    this.setState({ newComment: \"\" });\r\n  };\r\n\r\n  updateComments = () => {\r\n    console.log(this.state);\r\n    updateAudit({\r\n      _id: this.props.tenantInfo.record._id,\r\n      type: this.props.tenantInfo.record.type,\r\n      catCounts: this.props.tenantInfo.record.catCounts,\r\n      total_score: this.props.tenantInfo.record.total_score,\r\n      image: this.props.tenantInfo.record.image,\r\n      date: this.props.tenantInfo.record.date,\r\n      rectifyDate: this.props.tenantInfo.record.rectifyDate,\r\n      comment: this.state.newComment,\r\n      location: this.props.tenantInfo.record.location,\r\n      tenantID: this.props.tenantInfo.record.tenantID,\r\n      auditorId: this.props.tenantInfo.record.auditorId,\r\n    });\r\n  };\r\n\r\n  updateImage = () => {\r\n    console.log(this.state.imageUpload);\r\n    updateAuditImage({\r\n      _id: this.props.tenantInfo.record._id,\r\n      type: this.props.tenantInfo.record.type,\r\n      catCounts: this.props.tenantInfo.record.catCounts,\r\n      total_score: this.props.tenantInfo.record.total_score,\r\n      image: this.state.imageUpload,\r\n      date: this.props.tenantInfo.record.date,\r\n      comment: this.props.tenantInfo.record.comment,\r\n      location: this.props.tenantInfo.record.location,\r\n      tenantID: this.props.tenantInfo.record.tenantID,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Layout>\r\n        <Card size=\"small\">\r\n          <Row>\r\n            <Col span={15} style={{ display: \"block\" }}>\r\n              <div\r\n                style={{ \"text-align\": \"left\", clear: \"both\", width: \"100%\" }}\r\n              >\r\n                Tenant ID:{\" \"}\r\n              </div>\r\n              <div className=\"name\">\r\n                <b>{this.state.tenantID}</b>\r\n              </div>\r\n              <div\r\n                style={{ \"text-align\": \"left\", clear: \"both\", width: \"100%\" }}\r\n              >\r\n                Auditor:\r\n              </div>\r\n              <div className=\"name\">\r\n                <b>{this.state.auditor}</b>\r\n              </div>\r\n              <div\r\n                style={{ \"text-align\": \"left\", clear: \"both\", width: \"100%\" }}\r\n              >\r\n                Rectification Deadline:\r\n              </div>\r\n              <div className=\"name\">\r\n                <b>\r\n                  {moment(\r\n                    this.state.rectifyDate,\r\n                    \"YYYY-MM-DDTHH:mm:ss.SSS\"\r\n                  ).format(\"Do MMMM, YYYY\")}\r\n                </b>\r\n              </div>\r\n            </Col>\r\n            <Col span={9}>\r\n              <Progress\r\n                className=\"score\"\r\n                type=\"circle\"\r\n                percent={this.state.total_score}\r\n                width={\"18vh\"}\r\n                strokeWidth={\"10\"}\r\n              />\r\n            </Col>\r\n          </Row>\r\n        </Card>\r\n        {this.displayComments()}\r\n        <div />\r\n        <Card size=\"small\" style={{ \"background-color\": \"#F0F2F5\" }}>\r\n          <Form\r\n            className=\"addComment\"\r\n            onChange={this.newComment}\r\n            layout=\"vertical\"\r\n            size=\"small\"\r\n            initialValues={{\r\n              remember: false,\r\n            }}\r\n          >\r\n            <Form.Item name=\"addComment\" label={<b>Add Comment</b>}>\r\n              <TextArea\r\n                className=\"addCommentText\"\r\n                placeholder=\"Add Comment\"\r\n                rows={4}\r\n                allowClear={true}\r\n              />\r\n            </Form.Item>\r\n            <Form.Item>\r\n              <Button\r\n                className=\"view-audit-buttons\"\r\n                onClick={this.submitComment}\r\n              >\r\n                Submit Comment\r\n              </Button>\r\n            </Form.Item>\r\n\r\n            <Divider />\r\n\r\n            <Form.Item label={<b>Add Photo</b>}>\r\n              <Input type=\"file\" onChange={this.fileSelectedHandler} />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n              name=\"caption\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Description\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input\r\n                placeholder=\"Caption\"\r\n                onChange={this.onChangeCaption}\r\n                value={this.state.caption}\r\n                id=\"caption\"\r\n                type=\"caption\"\r\n              />\r\n            </Form.Item>\r\n            <Button className=\"view-audit-buttons\" onClick={this.handleFormOk}>\r\n              Submit Photo\r\n            </Button>\r\n          </Form>\r\n        </Card>\r\n\r\n        <Modal\r\n          title=\"Upload Confirm\"\r\n          destroyOnClose={true}\r\n          visible={this.state.visibleConfirm}\r\n          onOk={this.handleUploadOk}\r\n          okButtonProps={{ disabled: false }}\r\n          cancelButtonProps={{ disabled: true, visible: false }}\r\n        >\r\n          <p>Photo Added!</p>\r\n        </Modal>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\nViewAuditTenant.propTypes = {\r\n  tenantInfo: PropTypes.object.isRequired,\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  tenantInfo: state.tenantInfo,\r\n});\r\nexport default connect(mapStateToProps)(ViewAuditTenant);\r\n","C:\\Users\\tanka\\Desktop\\ESC\\Project\\SingHealthApp\\singhealth2.0\\client\\src\\components\\auth\\ResetPassword.js",["261","262","263","264","265","266","267"],"import React, { Component } from \"react\";\r\nimport { Layout, Form, Input, Button } from \"antd\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport store from \"../../store\";\r\n\r\nimport Recaptcha from \"react-recaptcha\";\r\nimport { resetPassword } from \"../../actions/authActions\";\r\nimport { GET_MESSAGE } from \"../../actions/types\";\r\n\r\nconst { Header, Footer, Sider, Content } = Layout;\r\n\r\n// TEST TEAM: for testing change to false\r\n// DEV TEAM: for dev change to true\r\nconst recaptchaOn = false;\r\n\r\nclass ResetPassword extends Component {\r\n  constructor() {\r\n    super();\r\n    this.verifyCallback = this.verifyCallback.bind(this);\r\n    this.state = {\r\n      isVerified: false,\r\n      email: \"\",\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // If logged in and user navigates to Login page, should redirect them to dashboard\r\n    if (!recaptchaOn) {\r\n      this.setState({\r\n        isVerified: true,\r\n      });\r\n    }\r\n  }\r\n\r\n  recaptchaLoaded() {\r\n    console.log(\"captcha loaded\");\r\n  }\r\n\r\n  verifyCallback(response) {\r\n    if (response) {\r\n      this.setState({ isVerified: true });\r\n    }\r\n  }\r\n\r\n  onChange = (e) => {\r\n    this.setState({ [e.target.id]: e.target.value });\r\n  };\r\n\r\n  onFinish = (values) => {\r\n    console.log(values);\r\n    if (!this.state.isVerified) {\r\n      alert(\"Please verify you are human\");\r\n    } else {\r\n      const userData = {\r\n        email: values.email,\r\n      };\r\n      this.props.resetPassword(userData);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Layout>\r\n        <h2>Welcome to SingHealth Audit</h2>\r\n        <p>\r\n          A new password will be sent to your email address if your email\r\n          address is valid\r\n        </p>\r\n        <Content>\r\n          <Form\r\n            onFinish={this.onFinish}\r\n            name=\"normal_login\"\r\n            className=\"login-register-form\"\r\n          >\r\n            <Form.Item\r\n              name=\"email\"\r\n              rules={[{ required: true, message: \"Please input your Email!\" }]}\r\n            >\r\n              <Input\r\n                placeholder=\"Email\"\r\n                onChange={this.onChange}\r\n                value={this.state.email}\r\n                id=\"email\"\r\n                type=\"email\"\r\n              />\r\n            </Form.Item>\r\n\r\n            <Form.Item>\r\n              <Button\r\n                id=\"reset-button\"\r\n                type=\"primary\"\r\n                htmlType=\"submit\"\r\n                className=\"login-register-form-button\"\r\n              >\r\n                Reset Password\r\n              </Button>\r\n            </Form.Item>\r\n          </Form>\r\n          <Recaptcha\r\n            sitekey=\"6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI\"\r\n            render=\"explicit\"\r\n            onloadCallback={console.log(\"onloadCallback\")}\r\n            verifyCallback={this.verifyCallback}\r\n          />\r\n        </Content>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\nResetPassword.propTypes = {\r\n  resetPassword: PropTypes.func.isRequired,\r\n};\r\nconst mapStateToProps = (state) => ({});\r\nexport default connect(mapStateToProps, { resetPassword })(ResetPassword);\r\n",{"ruleId":"268","replacedBy":"269"},{"ruleId":"270","replacedBy":"271"},{"ruleId":"272","severity":1,"message":"273","line":2,"column":16,"nodeType":"274","messageId":"275","endLine":2,"endColumn":20},{"ruleId":"272","severity":1,"message":"276","line":2,"column":22,"nodeType":"274","messageId":"275","endLine":2,"endColumn":30},{"ruleId":"272","severity":1,"message":"277","line":2,"column":32,"nodeType":"274","messageId":"275","endLine":2,"endColumn":38},{"ruleId":"272","severity":1,"message":"278","line":6,"column":8,"nodeType":"274","messageId":"275","endLine":6,"endColumn":16},{"ruleId":"272","severity":1,"message":"279","line":8,"column":7,"nodeType":"274","messageId":"275","endLine":8,"endColumn":14},{"ruleId":"272","severity":1,"message":"280","line":9,"column":7,"nodeType":"274","messageId":"275","endLine":9,"endColumn":20},{"ruleId":"272","severity":1,"message":"281","line":11,"column":7,"nodeType":"274","messageId":"275","endLine":11,"endColumn":22},{"ruleId":"272","severity":1,"message":"273","line":2,"column":16,"nodeType":"274","messageId":"275","endLine":2,"endColumn":20},{"ruleId":"272","severity":1,"message":"279","line":8,"column":7,"nodeType":"274","messageId":"275","endLine":8,"endColumn":14},{"ruleId":"272","severity":1,"message":"280","line":9,"column":7,"nodeType":"274","messageId":"275","endLine":9,"endColumn":20},{"ruleId":"272","severity":1,"message":"282","line":12,"column":9,"nodeType":"274","messageId":"275","endLine":12,"endColumn":15},{"ruleId":"272","severity":1,"message":"283","line":12,"column":17,"nodeType":"274","messageId":"275","endLine":12,"endColumn":23},{"ruleId":"272","severity":1,"message":"284","line":12,"column":25,"nodeType":"274","messageId":"275","endLine":12,"endColumn":30},{"ruleId":"272","severity":1,"message":"282","line":18,"column":9,"nodeType":"274","messageId":"275","endLine":18,"endColumn":15},{"ruleId":"272","severity":1,"message":"283","line":18,"column":17,"nodeType":"274","messageId":"275","endLine":18,"endColumn":23},{"ruleId":"272","severity":1,"message":"284","line":18,"column":25,"nodeType":"274","messageId":"275","endLine":18,"endColumn":30},{"ruleId":"272","severity":1,"message":"285","line":18,"column":32,"nodeType":"274","messageId":"275","endLine":18,"endColumn":39},{"ruleId":"268","replacedBy":"286"},{"ruleId":"270","replacedBy":"287"},{"ruleId":"272","severity":1,"message":"288","line":4,"column":3,"nodeType":"274","messageId":"275","endLine":4,"endColumn":10},{"ruleId":"272","severity":1,"message":"289","line":17,"column":18,"nodeType":"274","messageId":"275","endLine":17,"endColumn":25},{"ruleId":"272","severity":1,"message":"273","line":2,"column":16,"nodeType":"274","messageId":"275","endLine":2,"endColumn":20},{"ruleId":"272","severity":1,"message":"277","line":2,"column":22,"nodeType":"274","messageId":"275","endLine":2,"endColumn":28},{"ruleId":"272","severity":1,"message":"290","line":6,"column":19,"nodeType":"274","messageId":"275","endLine":6,"endColumn":29},{"ruleId":"272","severity":1,"message":"279","line":8,"column":7,"nodeType":"274","messageId":"275","endLine":8,"endColumn":14},{"ruleId":"272","severity":1,"message":"280","line":9,"column":7,"nodeType":"274","messageId":"275","endLine":9,"endColumn":20},{"ruleId":"291","severity":1,"message":"292","line":26,"column":11,"nodeType":"293","endLine":26,"endColumn":22},{"ruleId":"268","replacedBy":"294"},{"ruleId":"270","replacedBy":"295"},{"ruleId":"268","replacedBy":"296"},{"ruleId":"270","replacedBy":"297"},{"ruleId":"272","severity":1,"message":"288","line":4,"column":3,"nodeType":"274","messageId":"275","endLine":4,"endColumn":10},{"ruleId":"272","severity":1,"message":"298","line":1,"column":10,"nodeType":"274","messageId":"275","endLine":1,"endColumn":33},{"ruleId":"272","severity":1,"message":"299","line":3,"column":10,"nodeType":"274","messageId":"275","endLine":3,"endColumn":21},{"ruleId":"268","replacedBy":"300"},{"ruleId":"270","replacedBy":"301"},{"ruleId":"272","severity":1,"message":"302","line":1,"column":17,"nodeType":"274","messageId":"275","endLine":1,"endColumn":26},{"ruleId":"272","severity":1,"message":"303","line":2,"column":10,"nodeType":"274","messageId":"275","endLine":2,"endColumn":14},{"ruleId":"272","severity":1,"message":"302","line":1,"column":17,"nodeType":"274","messageId":"275","endLine":1,"endColumn":26},{"ruleId":"272","severity":1,"message":"303","line":2,"column":10,"nodeType":"274","messageId":"275","endLine":2,"endColumn":14},{"ruleId":"272","severity":1,"message":"303","line":2,"column":10,"nodeType":"274","messageId":"275","endLine":2,"endColumn":14},{"ruleId":"272","severity":1,"message":"304","line":4,"column":10,"nodeType":"274","messageId":"275","endLine":4,"endColumn":17},{"ruleId":"272","severity":1,"message":"305","line":4,"column":19,"nodeType":"274","messageId":"275","endLine":4,"endColumn":29},{"ruleId":"272","severity":1,"message":"306","line":14,"column":9,"nodeType":"274","messageId":"275","endLine":14,"endColumn":15},{"ruleId":"272","severity":1,"message":"307","line":14,"column":17,"nodeType":"274","messageId":"275","endLine":14,"endColumn":28},{"ruleId":"268","replacedBy":"308"},{"ruleId":"270","replacedBy":"309"},{"ruleId":"272","severity":1,"message":"310","line":2,"column":8,"nodeType":"274","messageId":"275","endLine":2,"endColumn":13},{"ruleId":"272","severity":1,"message":"311","line":15,"column":10,"nodeType":"274","messageId":"275","endLine":15,"endColumn":22},{"ruleId":"312","severity":1,"message":"313","line":177,"column":32,"nodeType":"314","messageId":"315","endLine":177,"endColumn":34},{"ruleId":"272","severity":1,"message":"316","line":1,"column":28,"nodeType":"274","messageId":"275","endLine":1,"endColumn":36},{"ruleId":"272","severity":1,"message":"306","line":15,"column":9,"nodeType":"274","messageId":"275","endLine":15,"endColumn":15},{"ruleId":"272","severity":1,"message":"307","line":15,"column":17,"nodeType":"274","messageId":"275","endLine":15,"endColumn":28},{"ruleId":"291","severity":1,"message":"292","line":26,"column":7,"nodeType":"293","endLine":31,"endColumn":8},{"ruleId":"272","severity":1,"message":"317","line":1,"column":17,"nodeType":"274","messageId":"275","endLine":1,"endColumn":25},{"ruleId":"272","severity":1,"message":"303","line":2,"column":10,"nodeType":"274","messageId":"275","endLine":2,"endColumn":14},{"ruleId":"272","severity":1,"message":"318","line":6,"column":31,"nodeType":"274","messageId":"275","endLine":6,"endColumn":38},{"ruleId":"272","severity":1,"message":"319","line":7,"column":24,"nodeType":"274","messageId":"275","endLine":7,"endColumn":36},{"ruleId":"272","severity":1,"message":"320","line":7,"column":38,"nodeType":"274","messageId":"275","endLine":7,"endColumn":50},{"ruleId":"272","severity":1,"message":"282","line":11,"column":9,"nodeType":"274","messageId":"275","endLine":11,"endColumn":15},{"ruleId":"272","severity":1,"message":"283","line":11,"column":17,"nodeType":"274","messageId":"275","endLine":11,"endColumn":23},{"ruleId":"272","severity":1,"message":"284","line":11,"column":25,"nodeType":"274","messageId":"275","endLine":11,"endColumn":30},{"ruleId":"272","severity":1,"message":"321","line":2,"column":43,"nodeType":"274","messageId":"275","endLine":2,"endColumn":54},{"ruleId":"322","severity":1,"message":"323","line":11,"column":26,"nodeType":"324","messageId":"325","endLine":11,"endColumn":27},{"ruleId":"272","severity":1,"message":"303","line":2,"column":10,"nodeType":"274","messageId":"275","endLine":2,"endColumn":14},{"ruleId":"272","severity":1,"message":"326","line":25,"column":9,"nodeType":"274","messageId":"275","endLine":25,"endColumn":13},{"ruleId":"291","severity":1,"message":"327","line":141,"column":23,"nodeType":"293","endLine":141,"endColumn":26},{"ruleId":"291","severity":1,"message":"327","line":151,"column":23,"nodeType":"293","endLine":151,"endColumn":26},{"ruleId":"272","severity":1,"message":"303","line":2,"column":10,"nodeType":"274","messageId":"275","endLine":2,"endColumn":14},{"ruleId":"272","severity":1,"message":"326","line":24,"column":9,"nodeType":"274","messageId":"275","endLine":24,"endColumn":13},{"ruleId":"291","severity":1,"message":"327","line":140,"column":23,"nodeType":"293","endLine":140,"endColumn":26},{"ruleId":"291","severity":1,"message":"327","line":152,"column":23,"nodeType":"293","endLine":152,"endColumn":26},{"ruleId":"272","severity":1,"message":"303","line":4,"column":10,"nodeType":"274","messageId":"275","endLine":4,"endColumn":14},{"ruleId":"272","severity":1,"message":"290","line":4,"column":16,"nodeType":"274","messageId":"275","endLine":4,"endColumn":26},{"ruleId":"272","severity":1,"message":"328","line":6,"column":8,"nodeType":"274","messageId":"275","endLine":6,"endColumn":13},{"ruleId":"272","severity":1,"message":"321","line":10,"column":10,"nodeType":"274","messageId":"275","endLine":10,"endColumn":21},{"ruleId":"272","severity":1,"message":"282","line":12,"column":9,"nodeType":"274","messageId":"275","endLine":12,"endColumn":15},{"ruleId":"272","severity":1,"message":"283","line":12,"column":17,"nodeType":"274","messageId":"275","endLine":12,"endColumn":23},{"ruleId":"272","severity":1,"message":"284","line":12,"column":25,"nodeType":"274","messageId":"275","endLine":12,"endColumn":30},"no-native-reassign",["329"],"no-negated-in-lhs",["330"],"no-unused-vars","'Icon' is defined but never used.","Identifier","unusedVar","'Dropdown' is defined but never used.","'Button' is defined but never used.","'MenuItem' is defined but never used.","'SubMenu' is assigned a value but never used.","'MenuItemGroup' is assigned a value but never used.","'CreateAuditMenu' is assigned a value but never used.","'Header' is assigned a value but never used.","'Footer' is assigned a value but never used.","'Sider' is assigned a value but never used.","'Content' is assigned a value but never used.",["329"],["330"],"'Divider' is defined but never used.","'display' is defined but never used.","'withRouter' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",["329"],["330"],["329"],["330"],"'getAllByPlaceholderText' is defined but never used.","'uploadPhoto' is defined but never used.",["329"],["330"],"'Component' is defined but never used.","'Link' is defined but never used.","'NavLink' is defined but never used.","'useHistory' is defined but never used.","'Column' is assigned a value but never used.","'ColumnGroup' is assigned a value but never used.",["329"],["330"],"'axios' is defined but never used.","'FormProvider' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'TextArea' is defined but never used.","'ReactDOM' is defined but never used.","'Message' is defined but never used.","'UserOutlined' is defined but never used.","'LockOutlined' is defined but never used.","'GET_MESSAGE' is defined but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","'Text' is assigned a value but never used.","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'store' is defined but never used.","no-global-assign","no-unsafe-negation"]