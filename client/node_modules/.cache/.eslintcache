[{"/home/lanvoine/Documents/ESC/singhealth2.0/client/src/index.js":"1","/home/lanvoine/Documents/ESC/singhealth2.0/client/src/reportWebVitals.js":"2","/home/lanvoine/Documents/ESC/singhealth2.0/client/src/App.js":"3","/home/lanvoine/Documents/ESC/singhealth2.0/client/src/store.js":"4","/home/lanvoine/Documents/ESC/singhealth2.0/client/src/utils/setAuthToken.js":"5","/home/lanvoine/Documents/ESC/singhealth2.0/client/src/components/ChecklistNonFB.js":"6","/home/lanvoine/Documents/ESC/singhealth2.0/client/src/components/Checklist.js":"7","/home/lanvoine/Documents/ESC/singhealth2.0/client/src/actions/authActions.js":"8","/home/lanvoine/Documents/ESC/singhealth2.0/client/src/components/AuditList.js":"9","/home/lanvoine/Documents/ESC/singhealth2.0/client/src/components/private-route/StaffRoute.js":"10","/home/lanvoine/Documents/ESC/singhealth2.0/client/src/components/private-route/TenantRoute.js":"11","/home/lanvoine/Documents/ESC/singhealth2.0/client/src/components/TenantList.js":"12","/home/lanvoine/Documents/ESC/singhealth2.0/client/src/components/layout/Navbar.js":"13","/home/lanvoine/Documents/ESC/singhealth2.0/client/src/components/auth/Login.js":"14","/home/lanvoine/Documents/ESC/singhealth2.0/client/src/components/tenant/TenantHome.js":"15","/home/lanvoine/Documents/ESC/singhealth2.0/client/src/components/auth/Register.js":"16","/home/lanvoine/Documents/ESC/singhealth2.0/client/src/components/tenant/EditAudit.js":"17","/home/lanvoine/Documents/ESC/singhealth2.0/client/src/actions/auditActions.js":"18","/home/lanvoine/Documents/ESC/singhealth2.0/client/src/data/AuditData.ts":"19","/home/lanvoine/Documents/ESC/singhealth2.0/client/src/components/photo/PhotoPop.js":"20","/home/lanvoine/Documents/ESC/singhealth2.0/client/src/actions/types.js":"21","/home/lanvoine/Documents/ESC/singhealth2.0/client/src/data/questionsData.js":"22","/home/lanvoine/Documents/ESC/singhealth2.0/client/src/components/layout/RightMenuLoggedIn.js":"23","/home/lanvoine/Documents/ESC/singhealth2.0/client/src/components/layout/LeftMenu.js":"24","/home/lanvoine/Documents/ESC/singhealth2.0/client/src/components/layout/RightMenu.js":"25","/home/lanvoine/Documents/ESC/singhealth2.0/client/src/actions/photoActions.js":"26","/home/lanvoine/Documents/ESC/singhealth2.0/client/src/reducers/index.js":"27","/home/lanvoine/Documents/ESC/singhealth2.0/client/src/reducers/errorReducer.js":"28","/home/lanvoine/Documents/ESC/singhealth2.0/client/src/reducers/authReducer.js":"29","/home/lanvoine/Documents/ESC/singhealth2.0/client/src/components/ViewAudit.js":"30","/home/lanvoine/Documents/ESC/singhealth2.0/client/src/components/MessageDisplay.js":"31","/home/lanvoine/Documents/ESC/singhealth2.0/client/src/components/auth/CreateTenant.js":"32","/home/lanvoine/Documents/ESC/singhealth2.0/client/src/actions/tenantActions.js":"33","/home/lanvoine/Documents/ESC/singhealth2.0/client/src/actions/errorActions.js":"34","/home/lanvoine/Documents/ESC/singhealth2.0/client/src/reducers/messageReducer.js":"35","/home/lanvoine/Documents/ESC/singhealth2.0/client/src/reducers/tenantReducer.js":"36","/home/lanvoine/Documents/ESC/singhealth2.0/client/src/components/ViewAuditTenant.js":"37"},{"size":500,"mtime":1616146148083,"results":"38","hashOfConfig":"39"},{"size":362,"mtime":1616146148083,"results":"40","hashOfConfig":"39"},{"size":3219,"mtime":1617895831408,"results":"41","hashOfConfig":"39"},{"size":402,"mtime":1617883876619,"results":"42","hashOfConfig":"39"},{"size":333,"mtime":1616146148083,"results":"43","hashOfConfig":"39"},{"size":11488,"mtime":1617897169068,"results":"44","hashOfConfig":"39"},{"size":14917,"mtime":1617896108044,"results":"45","hashOfConfig":"39"},{"size":2707,"mtime":1617883876183,"results":"46","hashOfConfig":"39"},{"size":2779,"mtime":1617883876287,"results":"47","hashOfConfig":"39"},{"size":808,"mtime":1617625254432,"results":"48","hashOfConfig":"39"},{"size":885,"mtime":1617625254432,"results":"49","hashOfConfig":"39"},{"size":6019,"mtime":1617900334828,"results":"50","hashOfConfig":"39"},{"size":1757,"mtime":1617895778771,"results":"51","hashOfConfig":"39"},{"size":5337,"mtime":1617895778759,"results":"52","hashOfConfig":"39"},{"size":3966,"mtime":1617913203621,"results":"53","hashOfConfig":"39"},{"size":7991,"mtime":1617895778759,"results":"54","hashOfConfig":"39"},{"size":256,"mtime":1617625254432,"results":"55","hashOfConfig":"39"},{"size":677,"mtime":1617906143409,"results":"56","hashOfConfig":"39"},{"size":1313,"mtime":1616146161416,"results":"57","hashOfConfig":"39"},{"size":4027,"mtime":1617626306221,"results":"58","hashOfConfig":"59"},{"size":328,"mtime":1617895778723,"results":"60","hashOfConfig":"39"},{"size":9564,"mtime":1617625254432,"results":"61","hashOfConfig":"59"},{"size":1065,"mtime":1617625254432,"results":"62","hashOfConfig":"39"},{"size":2461,"mtime":1617895831404,"results":"63","hashOfConfig":"39"},{"size":979,"mtime":1617625254432,"results":"64","hashOfConfig":"39"},{"size":464,"mtime":1616672920849,"results":"65","hashOfConfig":"59"},{"size":356,"mtime":1617895778995,"results":"66","hashOfConfig":"39"},{"size":370,"mtime":1617883876619,"results":"67","hashOfConfig":"39"},{"size":626,"mtime":1616146148083,"results":"68","hashOfConfig":"39"},{"size":4876,"mtime":1617907248928,"results":"69","hashOfConfig":"39"},{"size":2005,"mtime":1617883876287,"results":"70","hashOfConfig":"39"},{"size":6457,"mtime":1617895778759,"results":"71","hashOfConfig":"39"},{"size":1048,"mtime":1617912214830,"results":"72","hashOfConfig":"39"},{"size":218,"mtime":1617883876183,"results":"73","hashOfConfig":"39"},{"size":421,"mtime":1617883876619,"results":"74","hashOfConfig":"39"},{"size":384,"mtime":1617896617126,"results":"75","hashOfConfig":"39"},{"size":5354,"mtime":1617904704535,"results":"76","hashOfConfig":"39"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},"608doq",{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"79"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"79"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"79"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"79"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"79"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"79"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"79"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"79"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"79"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"79"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"djewvc",{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"79"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"79"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"79"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"79"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"79"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"79"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"79"},"/home/lanvoine/Documents/ESC/singhealth2.0/client/src/index.js",[],["170","171"],"/home/lanvoine/Documents/ESC/singhealth2.0/client/src/reportWebVitals.js",[],"/home/lanvoine/Documents/ESC/singhealth2.0/client/src/App.js",["172"],"import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport \"./App.css\";\nimport jwt_decode from \"jwt-decode\";\nimport setAuthToken from \"./utils/setAuthToken\";\nimport Recaptcha from \"react-recaptcha\";\n\nimport { setCurrentUser, logoutUser } from \"./actions/authActions\";\n\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nimport StaffRoute from \"./components/private-route/StaffRoute\";\nimport TenantRoute from \"./components/private-route/TenantRoute\";\n\nimport Navbar from \"./components/layout/Navbar\";\n// Login Flow\nimport Login from \"./components/auth/Login\";\nimport Register from \"./components/auth/Register\";\n//Staff Flow\nimport AuditList from \"./components/AuditList\";\nimport Directory from \"./components/TenantList\";\nimport Checklist from \"./components/Checklist\";\nimport ChecklistNonFB from \"./components/ChecklistNonFB\";\nimport CreateTenant from \"./components/auth/CreateTenant\";\nimport ViewAuditAuditor from \"./components/ViewAudit\";\n//Tenant Flow\nimport TenantHome from \"./components/tenant/TenantHome\";\nimport TenantEditAudit from \"./components/tenant/EditAudit\";\nimport ViewAuditTenant from \"./components/ViewAuditTenant\";\n//Error warning\nimport MessageDisplay from \"./components/MessageDisplay\";\n\n\n// Check for token to keep user logged in\nif (localStorage.jwtToken) {\n  // Set auth token header auth\n  const token = localStorage.jwtToken;\n  setAuthToken(token);\n  // Decode token and get user info and exp\n  const decoded = jwt_decode(token);\n  // Set user and isAuthenticated\n  store.dispatch(setCurrentUser(decoded));\n\n  // Check for expired token\n  const currentTime = Date.now() / 1000; // to get in milliseconds\n  if (decoded.exp < currentTime) {\n    // Logout user\n    store.dispatch(logoutUser());\n\n    // Redirect to login\n    window.location.href = \"./login\";\n  }\n}\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <MessageDisplay />\n        <Router>\n          <div className=\"App\">\n            <Navbar />\n            <Route exact path=\"/\" component={Login} />\n            <Route exact path=\"/register\" component={Register} />\n            <Route exact path=\"/login\" component={Login} />\n            <Switch>\n              <StaffRoute exact path=\"/auditlist\" component={AuditList} />\n              <StaffRoute exact path=\"/checklistFB\" component={Checklist} />\n              <StaffRoute\n                exact\n                path=\"/checklistNonFB\"\n                component={ChecklistNonFB}\n              />\n              <StaffRoute exact path=\"/directory\" component={Directory} />\n              <StaffRoute exact path=\"/createtenant\" component={CreateTenant} />\n              <StaffRoute exact path=\"/viewaudit\" component={ViewAuditAuditor} />\n\n              <TenantRoute exact path=\"/tenant\" component={TenantHome} />\n              <TenantRoute exact path=\"/viewaudittenant\" component={ViewAuditTenant} />\n              <TenantRoute\n                exact\n                path=\"/tenant/editAudit\"\n                component={TenantEditAudit}\n              />\n            </Switch>\n          </div>\n        </Router>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","/home/lanvoine/Documents/ESC/singhealth2.0/client/src/store.js",[],"/home/lanvoine/Documents/ESC/singhealth2.0/client/src/utils/setAuthToken.js",[],"/home/lanvoine/Documents/ESC/singhealth2.0/client/src/components/ChecklistNonFB.js",["173","174"],"import \"../App.css\";\nimport {\n  Collapse,\n  Divider,\n  DatePicker,\n  Form,\n  List,\n  Input,\n  Checkbox,\n  Button,\n  Modal,\n} from \"antd\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport importJSON from \"../data/questionsDict.json\";\nimport { submit } from \"../actions/auditActions.js\";\nimport store from \"../store\";\nimport dateformat from \"dateformat\";\nconst fileUpload = require(\"fuctbase64\");\nconst nonFb = importJSON.non_fb;\nconst { Panel } = Collapse;\n\nconst layout = {\n  labelCol: {\n    span: 8,\n  },\n  wrapperCol: {\n    span: 16,\n  },\n};\n\n// TODO: Take score from json file => Update the score, replace the json file\n\nclass ChecklistNonFB extends Component {\n\n  // not exactly dynamic\n  state = {\n    tenantInfo: {},\n    type: \"Non-FB\",\n    checked: false,\n    catCounts: [0, 0, 0],\n    // counts[0]: for Professionalism & Staff Hygiene (20%),\n    //counts[1]: for Housekeeping & General Cleanliness (40%)\n    //counts[2]: for Workplace Safety & Health (40%)\n    total_score: 0,\n    image: null,\n    tempImageBase64: [],\n    tempImageCaption: null,\n    date: null,\n    comment: null,\n    location: \"\",\n    visibleForm: false,\n    visibleConfirm: false,\n    visibleAudit: false,\n  };\n\n  submitAudit = () => {\n    console.log(this.state);\n    console.log(typeof this.state.date);\n    console.log(typeof this.props.tenantInfo.record._id);\n    submit({\n      type: \"Non-FB\",\n      catCounts: this.state.catCounts,\n      total_score:\n        this.state.catCounts[0] +\n        this.state.catCounts[1] +\n        this.state.catCounts[2],\n      image: this.state.image,\n      date: this.state.date,\n      comment: this.state.comment,\n      location: this.state.location,\n      tenantID: this.props.tenantInfo.record._id,\n    });\n    this.showAuditModal();\n  };\n\n  onChange = (e) => {\n    this.setState({ [e.target.id]: e.target.value });\n  };\n\n  onChangeComment = (comment) => {\n    this.setState({ comment: [{ \"content\": comment.nativeEvent.explicitOriginalTarget.value, \"date\": dateformat(Date().toString(), \"yyyy-mm-dd'T'HH:MM:ss.sssZ\"), }] });\n  };\n\n  onChangeCaption = (caption) => {\n    console.log(this.state);\n    this.setState({\n      tempImageCaption: caption.nativeEvent.explicitOriginalTarget.value\n    });\n  };\n\n  onChangeDate = (date, dateString) => {\n    this.setState({ date: dateformat(date._d.toString(), \"yyyy-mm-dd'T'HH:MM:ss.sssZ\") });\n  };\n\n  showFormModal = () => {\n    this.setState({\n      visibleForm: true,\n    });\n  };\n\n  showAuditModal = () => {\n    this.setState({\n      visibleAudit: true,\n    });\n  };\n\n  showConfirmModal = () => {\n    this.setState({\n      visibleConfirm: true,\n    });\n  };\n\n  handleFormOk = (e) => {\n    console.log(e);\n    this.showConfirmModal();\n  };\n\n  handleAuditOk = (e) => {\n    console.log(e);\n    this.setState({\n      visibleAudit: false,\n    });\n  };\n\n  handleCancel = (e) => {\n    console.log(e);\n    this.setState({\n      visibleForm: false,\n    });\n  };\n\n  handleUploadOk = (e) => {\n    console.log(e);\n    console.log(this.state);\n    this.setState({\n      image: [{ \"base64\": this.state.tempImageBase64[0].base64, \"date\": this.state.tempImageBase64[0].date, \"caption\": this.state.tempImageCaption }],\n      visibleConfirm: false,\n    });\n  };\n\n  createCheckbox = (label, catIndex) => (\n    <Checkbox\n      label={label}\n      // handleCheckboxChange={this.toggleCheckbox}\n      key={label}\n      onChange={(e) => this.handleCount(e, catIndex)}\n    />\n  );\n\n  fileSelectedHandler = (event) => {\n    console.log(event.target.files[0]);\n    fileUpload(event).then((data) => {\n      console.log(\"base64: \", data.base64);\n      this.setState({\n        // image: [{ \"base64\": data.base64, \"date\": dateformat(Date().toString(), \"yyyy-mm-dd'T'HH:MM:ss.sssZ\"), \"caption\": \"\" }]\n        tempImageBase64: [{ \"base64\": data.base64, \"date\": dateformat(Date().toString(), \"yyyy-mm-dd'T'HH:MM:ss.sssZ\") }]\n      });\n    });\n  };\n\n  handleCount = (e, catIndex) => {\n    const { checked, type } = e.target;\n    switch (catIndex) {\n      case 0:\n        if (type === \"checkbox\" && checked === true) {\n          this.setState((state) => state.catCounts[0]++);\n        } else {\n          this.setState((state) => state.catCounts[0]--);\n        }\n        break;\n      case 1:\n        if (type === \"checkbox\" && checked === true) {\n          this.setState((state) => state.catCounts[1]++);\n        } else {\n          this.setState((state) => state.catCounts[1]--);\n        }\n        break;\n      case 2:\n        if (type === \"checkbox\" && checked === true) {\n          this.setState((state) => state.catCounts[2]++);\n        } else {\n          this.setState((state) => state.catCounts[2]--);\n        }\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"table\">\n        <h3>\n          Non-F&B Audit for Tenant at Address:{\" \"}\n          <b>\n            {this.props.tenantInfo.record._id !== null\n              ? this.props.tenantInfo.record._id\n              : \"\"}\n          </b>\n        </h3>\n\n        <h1>Non-FB Checklist</h1>\n        <Form {...layout}\n          name=\"Non-FB Checklist\"\n          className=\"nonfb_checklist\"\n          onFinish={this.onFinish}\n        >\n          <Form.Item\n            name=\"date\"\n            label=\"Date\"\n            rules={[{ required: true, message: \"Date of Incident\" }]}\n          >\n            <DatePicker className=\"auditDate\"\n              placeholder=\"Date\"\n              onChange={this.onChangeDate}\n            />\n          </Form.Item>\n\n          <Form.Item\n            name=\"Comment\"\n            label=\"Comment\"\n            rules={[\n              {\n                required: false,\n                message: \"Description\",\n              },\n            ]}\n          >\n            <Input className=\"commentBox\"\n              //placeholder=\"Comment\"\n              onChange={this.onChangeComment}\n              value={this.state.comment}\n              id=\"comment\"\n              type=\"comment\"\n            />\n          </Form.Item>\n          <Form.Item label=\"Total Score: \">\n            <span className=\"total_score\">{(this.state.catCounts[0] + this.state.catCounts[1] + this.state.catCounts[2]) / 2}</span>\n          </Form.Item>\n        </Form>\n\n        <div\n          className=\"panels\">\n          {nonFb.map((cat, catIndex) => {\n            // var catScore = cat.score;\n            return (\n              // Category\n              <Collapse defaultActiveKey={[\"1\"]}>\n                <Panel\n                  header={<div catIndex={catIndex}>{cat.name}</div>}\n                  key={catIndex + 1}\n                  className=\"bg-orange\"\n                >\n                  <div catIndex={catIndex}>\n                    {cat.subcategories.map((subCat, subCatIndex) => {\n                      return (\n                        // SubCategory\n                        <Collapse defaultActiveKey={[\"1\"]}>\n                          <Panel\n                            header={\n                              <div subCatIndex={subCatIndex}>{subCat.name}</div>\n                            }\n                            key={subCatIndex + 1}\n                            className=\"bg-orange\"\n                          >\n                            <List\n                              dataSource={subCat.questions} // Questions\n                              renderItem={(item) => (\n                                <List.Item>\n                                  <div className=\"create-audit-row\">{item}</div>\n                                  <div>{this.createCheckbox(item, catIndex)}</div>\n                                </List.Item>\n                              )}\n                            />\n                          </Panel>\n                        </Collapse>\n                      );\n                    })}\n                  </div>\n                  <div>Score: {this.state.catCounts[catIndex] / 2}</div>\n                </Panel>\n              </Collapse>\n            );\n          })}\n\n          <Button type=\"primary\" onClick={this.showFormModal}>\n            Upload Photo\n        </Button>\n          <Modal\n            title=\"Upload Photo\"\n            visible={this.state.visibleForm}\n            onOk={this.handleFormOk}\n            onCancel={this.handleCancel}\n            okButtonProps={{ disabled: false }}\n            cancelButtonProps={{ disabled: false }}\n          >\n            <Form\n              name=\"photo_upload\"\n              className=\"photo-upload\"\n              onFinish={this.onFinish}\n            >\n              <Form.Item>\n                <Input type=\"file\" onChange={this.fileSelectedHandler} />\n              </Form.Item>\n              {/* <Form.Item\n              name=\"date\"\n              rules={[{ required: true, message: \"Date of Incident\" }]}\n            >\n              <DatePicker\n                placeholder=\"Date\"\n                onChange={this.onChangeDate}\n              />\n            </Form.Item> */}\n\n              <Form.Item\n                name=\"caption\"\n                rules={[\n                  {\n                    required: true,\n                    message: \"Description\",\n                  },\n                ]}\n              >\n                <Input\n                  placeholder=\"Caption\"\n                  onChange={this.onChangeCaption}\n                  value={this.state.caption}\n                  id=\"caption\"\n                  type=\"caption\"\n                />\n              </Form.Item>\n\n              {/* <Form.Item\n              name=\"location\"\n              rules={[{ required: true, message: \"Location of Incident\" }]}\n            >\n              <Input\n                placeholder=\"Location\"\n                onChange={this.onChange}\n                value={this.state.location}\n                id=\"location\"\n                type=\"location\"\n              />\n            </Form.Item> */}\n            </Form>\n            {/* <Form>\n            <Button\n              type=\"primary\"\n              htmlType=\"submit\"\n              className=\"upload-photo-button\"\n              onClick={() => { this.upload(this.state); }}\n            >\n              Upload\n                    </Button>\n          </Form> */}\n            <Modal\n              title=\"Upload Confirm\"\n              destroyOnClose={true}\n              visible={this.state.visibleConfirm}\n              onOk={this.handleUploadOk}\n              okButtonProps={{ disabled: false }}\n              cancelButtonProps={{ disabled: true, visible: false }}\n            >\n              <p>Photo Added!</p>\n            </Modal>\n          </Modal>\n          <Button\n            onClick={() => this.submitAudit()}\n            className=\"submit-button\"\n            type=\"primary\"\n            htmlType=\"submit\"\n          >\n            SUBMIT\n        </Button>\n          {/* <Button onClick={() => this.updateItems()} className=\"submit-button\" type=\"primary\" htmlType=\"submit\">\n          TEST\n        </Button> */}\n          <Modal\n            title=\"\"\n            visible={this.state.visibleAudit}\n            onOk={this.handleAuditOk}\n            okButtonProps={{ disabled: false }}\n            cancelButtonProps={{ disabled: true, visible: false }}\n          >\n            <p>Audit Uploaded!</p>\n          </Modal>\n        </div>\n      </div>\n    );\n  }\n}\nChecklistNonFB.propTypes = {\n  tenantInfo: PropTypes.object.isRequired,\n};\nconst mapStateToProps = (state) => ({\n  tenantInfo: state.tenantInfo,\n});\nexport default connect(mapStateToProps)(ChecklistNonFB);\n","/home/lanvoine/Documents/ESC/singhealth2.0/client/src/components/Checklist.js",["175","176","177"],"import \"../App.css\";\nimport {\n  Collapse,\n  Divider,\n  List,\n  Input,\n  Checkbox,\n  Button,\n  Modal,\n  Form,\n  DatePicker,\n} from \"antd\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport importJSON from \"../data/questionsDict.json\";\nimport { submit, display } from \"../actions/auditActions.js\";\nimport dateformat from \"dateformat\";\nconst fileUpload = require(\"fuctbase64\");\nconst Fb = importJSON.fb;\nconst { Panel } = Collapse;\n\nconst layout = {\n  labelCol: {\n    span: 8,\n  },\n  wrapperCol: {\n    span: 16,\n  },\n};\n\n// TODO: Take score from json file => Update the score, replace the json file\n\nclass Checklist extends Component {\n  // componentWillMount = () => {\n  //   this.selectedCheckboxes = new Set();\n  // };\n\n  // toggleCheckbox = (label) => {\n  //   if (this.selectedCheckboxes.has(label)) {\n  //     this.selectedCheckboxes.delete(label);\n  //   } else {\n  //     this.selectedCheckboxes.add(label);\n  //   }\n  // };\n\n  // handleFormSubmit = (formSubmitEvent) => {\n  //   formSubmitEvent.preventDefault();\n\n  //   for (const checkbox of this.selectedCheckboxes) {\n  //     console.log(checkbox, \"is selected.\");\n  //   }\n  // };\n\n  // onFinish = () => {\n  //   var newState = [];\n  //   for (var i = 0; i < this.state.catCounts.length; i++) {\n  //     newState.push(this.state.catCounts[i] / 2);\n  //   }\n  //   const submitData = {\n  //     catCounts: newState,\n  //   };\n\n  //   console.log(submitData);\n  // };\n\n  submitAudit = () => {\n    console.log(this.state);\n    submit({\n      type: \"FB\",\n      catCounts: this.state.catCounts,\n      total_score:\n        this.state.catCounts[0] +\n        this.state.catCounts[1] +\n        this.state.catCounts[2] +\n        this.state.catCounts[3] +\n        this.state.catCounts[4],\n      image: this.state.image,\n      date: this.state.date,\n      comment: this.state.comment,\n      location: this.state.location,\n      tenantID: this.props.tenantInfo.record._id,\n    });\n    this.showAuditModal();\n  };\n\n  onChange = (e) => {\n    this.setState({ [e.target.id]: e.target.value });\n  };\n\n  onChangeComment = (comment) => {\n    this.setState({ comment: [{ \"content\": comment.nativeEvent.explicitOriginalTarget.value, \"date\": dateformat(Date().toString(), \"yyyy-mm-dd'T'HH:MM:ss.sssZ\"), }] });\n  };\n\n  onChangeCaption = (caption) => {\n    console.log(this.state);\n    this.setState({\n      tempImageCaption: caption.nativeEvent.explicitOriginalTarget.value\n    });\n  };\n\n  onChangeDate = (date, dateString) => {\n    this.setState({ date: dateformat(date._d.toString(), \"yyyy-mm-dd'T'HH:MM:ss.sssZ\") });\n  };\n\n  fileSelectedHandler = (event) => {\n    console.log(event.target.files[0]);\n    fileUpload(event).then((data) => {\n      console.log(\"base64: \", data.base64);\n      this.setState({\n        // image: [{ \"base64\": data.base64, \"date\": dateformat(Date().toString(), \"yyyy-mm-dd'T'HH:MM:ss.sssZ\"), \"caption\": \"\" }]\n        tempImageBase64: [{ \"base64\": data.base64, \"date\": dateformat(Date().toString(), \"yyyy-mm-dd'T'HH:MM:ss.sssZ\") }]\n      });\n    });\n  };\n\n  showAuditModal = () => {\n    this.setState({\n      visibleAudit: true,\n    });\n  };\n\n  showFormModal = () => {\n    this.setState({\n      visibleForm: true,\n    });\n  };\n\n  showConfirmModal = () => {\n    this.setState({\n      visibleConfirm: true,\n    });\n  };\n\n  handleAuditOk = (e) => {\n    console.log(e);\n    this.setState({\n      visibleAudit: false,\n    });\n  };\n\n  handleFormOk = (e) => {\n    console.log(e);\n    this.showConfirmModal();\n  };\n\n  handleUploadOk = (e) => {\n    console.log(e);\n    console.log(this.state);\n    this.setState({\n      image: [{ \"base64\": this.state.tempImageBase64[0].base64, \"date\": this.state.tempImageBase64[0].date, \"caption\": this.state.tempImageCaption }],\n      visibleConfirm: false,\n    });\n  };\n\n  handleCancel = (e) => {\n    console.log(e);\n    this.setState({\n      visibleForm: false,\n    });\n  };\n\n  createCheckbox = (label, catIndex) => (\n    <Checkbox\n      label={label}\n      // handleCheckboxChange={this.toggleCheckbox}\n      key={label}\n      onChange={(e) => this.handleCount(e, catIndex)}\n    />\n  );\n  handlegcCheckCount = (e) => {\n    const { checked, type } = e.target;\n    if (type === \"checkbox\" && checked === true) {\n      this.setState((state) => state.gc_count++);\n    } else {\n      this.setState((state) => state.gc_count--);\n    }\n  };\n  //for food hygiene cat\n  createfoodCheckbox = (label) => (\n    <Checkbox\n      label={label}\n      handleCheckboxChange={this.toggleCheckbox}\n      key={label}\n      onChange={(e) => this.handlefoodCheckCount(e)}\n    />\n  );\n  handlefoodCheckCount = (e) => {\n    const { checked, type } = e.target;\n    if (type === \"checkbox\" && checked === true) {\n      this.setState((state) => state.food_count++);\n    } else {\n      this.setState((state) => state.food_count--);\n    }\n  };\n\n  // not exactly dynamic\n  state = {\n    checked: false,\n    catCounts: [0, 0, 0, 0, 0], // counts[0]: for Professionalism & Staff Hygiene (10%), counts[1]: for Housekeeping & General Cleanliness (20%)\n    image: null,\n    tempImageBase64: [],\n    tempImageCaption: null,\n    date: null,\n    comment: null,\n    location: \"\",\n    visibleForm: false,\n    visibleConfirm: false,\n    visibleAudit: false,\n    tenantInfo: {},\n    type: \"FB\",\n  };\n\n  handleCount = (e, catIndex) => {\n    const { checked, type } = e.target;\n    switch (catIndex) {\n      case 0:\n        if (type === \"checkbox\" && checked === true) {\n          this.setState((state) => state.catCounts[0]++);\n        } else {\n          this.setState((state) => state.catCounts[0]--);\n        }\n        break;\n      case 1:\n        if (type === \"checkbox\" && checked === true) {\n          this.setState((state) => state.catCounts[1]++);\n        } else {\n          this.setState((state) => state.catCounts[1]--);\n        }\n        break;\n      case 2:\n        if (type === \"checkbox\" && checked === true) {\n          this.setState((state) => state.catCounts[2]++);\n        } else {\n          this.setState((state) => state.catCounts[2]--);\n        }\n        break;\n      case 3:\n        if (type === \"checkbox\" && checked === true) {\n          this.setState((state) => state.catCounts[3]++);\n        } else {\n          this.setState((state) => state.catCounts[3]--);\n        }\n        break;\n      case 4:\n        if (type === \"checkbox\" && checked === true) {\n          this.setState((state) => state.catCounts[4]++);\n        } else {\n          this.setState((state) => state.catCounts[4]--);\n        }\n        break;\n      default:\n        break;\n    }\n\n  };\n\n\n  render() {\n    return (\n      <div className=\"table\">\n        <h3>\n          F&B Audit for Tenant at Address:{\" \"}\n          <b>\n            {this.props.tenantInfo !== null ? this.props.tenantInfo.record._id !== null\n              ? this.props.tenantInfo.record._id\n              : \"\" : \"\"}\n          </b>\n        </h3>\n\n        {Fb.map((cat, catIndex) => {\n          // var catScore = cat.score;\n          return (\n            // Category\n            <Collapse defaultActiveKey={[\"1\"]}>\n              <Panel\n                header={<div catIndex={catIndex}>{cat.name}</div>}\n                key={catIndex + 1}\n                className=\"bg-orange\"\n              >\n                <div catIndex={catIndex}>\n                  {cat.subcategories.map((subCat, subCatIndex) => {\n                    return (\n                      // SubCategory\n                      <Collapse defaultActiveKey={[\"1\"]}>\n                        <Panel\n                          header={\n                            <div subCatIndex={subCatIndex}>{subCat.name}</div>\n                          }\n                          key={subCatIndex + 1}\n                          className=\"bg-orange\"\n                        >\n                          <List\n                            dataSource={subCat.questions} // Questions\n                            renderItem={(item) => (\n                              <List.Item>\n                                <div className=\"checklist-item\">\n                                  <div className=\"create-audit-row\">{item}</div>\n                                  <div className=\"checklist-checkbox\">\n                                    {this.createCheckbox(item, catIndex)}\n                                  </div>\n                                </div>\n                              </List.Item>\n                            )}\n                          />\n                        </Panel>\n                      </Collapse>\n                    );\n                  })}\n                </div>\n                <div>Score: {this.state.catCounts[catIndex] / 2}</div>\n              </Panel>\n            </Collapse>\n          );\n        })}\n        <Button type=\"primary\" onClick={this.showFormModal}>\n          Upload Photo\n        </Button>\n        <Modal\n          title=\"Upload Photo\"\n          visible={this.state.visibleForm}\n          onOk={this.handleFormOk}\n          onCancel={this.handleCancel}\n          okButtonProps={{ disabled: false }}\n          cancelButtonProps={{ disabled: false }}\n        >\n          <Form.Item\n            name=\"date\"\n            label=\"Date\"\n            rules={[{ required: true, message: \"Date of Incident\" }]}\n          >\n            <DatePicker className=\"auditDate\"\n              placeholder=\"Date\"\n              onChange={this.onChangeDate}\n            />\n          </Form.Item>\n\n          <Form.Item\n            name=\"Comment\"\n            label=\"Comment\"\n            rules={[\n              {\n                required: false,\n                message: \"Description\",\n              },\n            ]}\n          >\n            <Input className=\"commentBox\"\n              //placeholder=\"Comment\"\n              onChange={this.onChangeComment}\n              value={this.state.comment}\n              id=\"comment\"\n              type=\"comment\"\n            />\n          </Form.Item>\n          <Form.Item label=\"Total Score: \">\n            <span className=\"total_score\">{(this.state.catCounts[0] + this.state.catCounts[1] + this.state.catCounts[2] + this.state.catCounts[3] + this.state.catCounts[4]) / 2}</span>\n          </Form.Item>\n        </Modal>\n        <div className=\"panels\">\n          {Fb.map((cat, catIndex) => {\n            // var catScore = cat.score;\n            return (\n              // Category\n              <Collapse defaultActiveKey={[\"1\"]}>\n                <Panel\n                  header={<div catIndex={catIndex}>{cat.name}</div>}\n                  key={catIndex + 1}\n                  className=\"bg-orange\"\n                >\n                  <div catIndex={catIndex}>\n                    {cat.subcategories.map((subCat, subCatIndex) => {\n                      return (\n                        // SubCategory\n                        <Collapse defaultActiveKey={[\"1\"]}>\n                          <Panel\n                            header={\n                              <div subCatIndex={subCatIndex}>{subCat.name}</div>\n                            }\n                            key={subCatIndex + 1}\n                            className=\"bg-orange\"\n                          >\n                            <List\n                              dataSource={subCat.questions} // Questions\n                              renderItem={(item) => (\n                                <List.Item>\n                                  <div className=\"create-audit-row\">{item}</div>\n                                  <div>{this.createCheckbox(item, catIndex)}</div>\n                                </List.Item>\n                              )}\n                            />\n                          </Panel>\n                        </Collapse>\n                      );\n                    })}\n                  </div>\n                  <div>Score: {this.state.catCounts[catIndex] / 2}</div>\n                </Panel>\n              </Collapse>\n            );\n          })}\n          <Button type=\"primary\" onClick={this.showFormModal}>\n            Upload Photo\n        </Button>\n          <Modal\n            title=\"Upload Photo\"\n            visible={this.state.visibleForm}\n            onOk={this.handleFormOk}\n            onCancel={this.handleCancel}\n            okButtonProps={{ disabled: false }}\n            cancelButtonProps={{ disabled: false }}\n          >\n            <Form\n              name=\"photo_upload\"\n              className=\"photo-upload\"\n              onFinish={this.onFinish}\n            >\n              <Form.Item>\n                <Input type=\"file\" onChange={this.fileSelectedHandler} />\n              </Form.Item>\n              {/* <Form.Item\n              name=\"date\"\n              rules={[{ required: true, message: \"Date of Incident\" }]}\n            >\n              <DatePicker\n                placeholder=\"Date\"\n                onChange={this.onChangeDate}\n              />\n            </Form.Item> */}\n\n              <Form.Item\n                name=\"caption\"\n                rules={[\n                  {\n                    required: true,\n                    message: \"Description\",\n                  },\n                ]}\n              >\n                <Input\n                  placeholder=\"Caption\"\n                  onChange={this.onChangeCaption}\n                  value={this.state.caption}\n                  id=\"caption\"\n                  type=\"capyion\"\n                />\n              </Form.Item>\n\n              {/* <Form.Item\n              name=\"location\"\n              rules={[{ required: true, message: \"Location of Incident\" }]}\n            >\n              <Input\n                placeholder=\"Location\"\n                onChange={this.onChange}\n                value={this.state.location}\n                id=\"location\"\n                type=\"location\"\n              />\n            </Form.Item> */}\n            </Form>\n\n            <Modal\n              title=\"Upload Confirm\"\n              destroyOnClose={true}\n              visible={this.state.visibleConfirm}\n              onOk={this.handleUploadOk}\n              okButtonProps={{ disabled: false }}\n              cancelButtonProps={{ disabled: true, visible: false }}\n            >\n              <p>Photo Added!</p>\n            </Modal>\n          </Modal>\n          <Button\n            className=\"submit-button\"\n            type=\"primary\"\n            onClick={() => this.submitAudit()}\n          >\n            SUBMIT\n        </Button>\n\n          <Modal\n            title=\"\"\n            visible={this.state.visibleAudit}\n            onOk={this.handleAuditOk}\n            okButtonProps={{ disabled: false }}\n            cancelButtonProps={{ disabled: true, visible: false }}\n          >\n            <p>Audit Uploaded!</p>\n          </Modal>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nChecklist.propTypes = {\n  tenantInfo: PropTypes.object.isRequired,\n};\nconst mapStateToProps = (state) => ({\n  tenantInfo: state.tenantInfo,\n});\nexport default connect(mapStateToProps)(Checklist);\n","/home/lanvoine/Documents/ESC/singhealth2.0/client/src/actions/authActions.js",[],"/home/lanvoine/Documents/ESC/singhealth2.0/client/src/components/AuditList.js",["178","179","180","181","182","183","184","185"],"import React, { Component, TextArea } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { Table, Tag, Space } from \"antd\";\nimport { getAudits } from \"../data/AuditData.ts\";\nimport { display } from \"../actions/auditActions.js\"; import { submit } from \"../actions/auditActions.js\";\n\nconst { Column, ColumnGroup } = Table;\n\nconst Audit = (props) => (\n  <tr>\n    <td>{props.audit.username}</td>\n    <td>{props.audit.image}</td>\n    <td>{props.audit.notes}</td>\n    <td>{props.audit.tags}</td>\n    <td>{props.audit.date.substring(0, 10)}</td>\n    <td>\n      <Link to={\"/edit/\" + props.audit._id}>edit</Link> |\n      <a\n        href=\"#\"\n        onClick={() => {\n          props.deleteAudit(props.audit._id);\n        }}\n      >\n        delete\n      </a>\n    </td>\n  </tr>\n);\n\nexport default class AuditList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.deleteAudit = this.deleteAudit.bind(this);\n\n    this.state = { audits: [] };\n  }\n\n  componentDidMount() {\n    // axios\n    //   .get(\"http://localhost:5000/api/audits\")\n    //   .then((response) => {\n    //     this.setState({ audits: response.data });\n    //     console.log(response.data);\n    //   })\n    //   .catch((error) => {\n    //     console.log(error);\n    //   });\n    display((data) => {\n      this.setState({ audits: data });\n    });\n  }\n\n  deleteAudit(id) {\n    axios\n      .delete(\"http://localhost:5000/audits/\" + id)\n      .then((res) => console.log(res.data));\n    this.setState({\n      audits: this.state.audits.filter((el) => el._id !== id),\n    });\n  }\n\n  auditList() {\n    return this.state.audits.map((currentaudit) => {\n      return (\n        <Audit\n          audit={currentaudit}\n          deleteAudit={this.deleteAudit}\n          key={currentaudit._id}\n        />\n      );\n    });\n  }\n  render() {\n    // console.log(this.state.audits);\n    return (\n      <div className=\"table\">\n        <Table\n          dataSource={this.state.audits}\n          title={() => <div className=\"table-title\">Audits</div>}\n          scroll={{ x: 400 }}\n        >\n          <Column title=\"Type\" dataIndex=\"type\" key=\"type\" />\n          <Column title=\"Tenant\" dataIndex=\"tenant\" key=\"tenant\" />\n          <Column title=\"Date\" dataIndex=\"date\" key=\"date\" />\n          <Column\n            title=\"Total Score\"\n            dataIndex=\"total_score\"\n            key=\"total_score\"\n          />\n          <Column\n            title=\"View Audit\"\n            dataIndex=\"view_audit\"\n            key=\"view_audit\"\n            render={(text, record) => (\n              <a>\n                <td onClick={() => window.open(text, \"_blank\")}>View Image</td>\n              </a>\n            )}\n          />\n        </Table>\n      </div>\n    );\n  }\n}\n\n// const data = getAudits(\"Pamela\");\n","/home/lanvoine/Documents/ESC/singhealth2.0/client/src/components/private-route/StaffRoute.js",["186","187"],"import React, { Component } from \"react\";\nimport { Link, Route, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nconst StaffRoute = ({ component: Component, auth, ...rest }) => (\n  <Route\n    {...rest}\n    render={(props) =>\n      auth.isAuthenticated === true ? (\n        auth.user.usertype === \"staff\" ? ( // check for staff usertype\n          <Component {...props} />\n        ) : (\n          <div>\n            <h1>Sorry, you are not authorised to view this page</h1>\n          </div>\n        )\n      ) : (\n        <Redirect to=\"/login\" />\n      )\n    }\n  />\n);\n\nStaffRoute.propTypes = {\n  auth: PropTypes.object.isRequired,\n};\nconst mapStateToProps = (state) => ({\n  auth: state.auth,\n});\nexport default connect(mapStateToProps)(StaffRoute);\n","/home/lanvoine/Documents/ESC/singhealth2.0/client/src/components/private-route/TenantRoute.js",["188","189"],"import React, { Component } from \"react\";\nimport { Link, Route, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nconst TenantRoute = ({ component: Component, auth, ...rest }) => (\n  <Route\n    {...rest}\n    render={(props) =>\n      auth.isAuthenticated === true ? (\n        auth.user.usertype === \"tenant\" ? ( // check for tenant usertype, maybe can change such that both tenant and staff can view tenant pages\n          <Component {...props} />\n        ) : (\n          <div>\n            <h1>Sorry, you are not authorised to view this page</h1>\n          </div>\n        )\n      ) : (\n        <Redirect to=\"/login\" />\n      )\n    }\n  />\n);\n\nTenantRoute.propTypes = {\n  auth: PropTypes.object.isRequired,\n};\nconst mapStateToProps = (state) => ({\n  auth: state.auth,\n});\nexport default connect(mapStateToProps)(TenantRoute);\n","/home/lanvoine/Documents/ESC/singhealth2.0/client/src/components/TenantList.js",["190","191"],"import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { Input, Button, Space, Table } from \"antd\";\nimport Highlighter from \"react-highlight-words\";\nimport { SearchOutlined } from \"@ant-design/icons\";\n\nimport { connect } from \"react-redux\";\nimport { getTenants, setSelectedTenant } from \"../actions/tenantActions\";\nimport PropTypes from \"prop-types\";\nimport { FormProvider } from \"antd/lib/form/context\";\n\nclass Directory extends Component {\n  constructor() {\n    super();\n    this.state = {\n      tenantData: [],\n      searchText: \"\",\n      searchedColumn: \"\",\n      tenantInfo: {},\n    };\n  }\n\n  componentDidMount() {\n    console.log(\"data\");\n\n    this.props.getTenants((data) => {\n      this.setState({ tenantData: data });\n      console.log(this.state.tenantData);\n    });\n  }\n\n  getColumnSearchProps = (dataIndex) => ({\n    filterDropdown: ({\n      setSelectedKeys,\n      selectedKeys,\n      confirm,\n      clearFilters,\n    }) => (\n      <div style={{ padding: 8 }}>\n        <Input\n          ref={(node) => {\n            this.searchInput = node;\n          }}\n          placeholder={`Search ${dataIndex}`}\n          value={selectedKeys[0]}\n          onChange={(e) =>\n            setSelectedKeys(e.target.value ? [e.target.value] : [])\n          }\n          onPressEnter={() =>\n            this.handleSearch(selectedKeys, confirm, dataIndex)\n          }\n          style={{ width: 188, marginBottom: 8, display: \"block\" }}\n        />\n        <Space>\n          <Button\n            type=\"primary\"\n            onClick={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n            icon={<SearchOutlined />}\n            size=\"small\"\n            style={{ width: 90 }}\n          >\n            Search\n          </Button>\n          <Button\n            onClick={() => this.handleReset(clearFilters)}\n            size=\"small\"\n            style={{ width: 90 }}\n          >\n            Reset\n          </Button>\n          <Button\n            type=\"link\"\n            size=\"small\"\n            onClick={() => {\n              confirm({ closeDropdown: false });\n              this.setState({\n                searchText: selectedKeys[0],\n                searchedColumn: dataIndex,\n              });\n            }}\n          >\n            Filter\n          </Button>\n        </Space>\n      </div>\n    ),\n    filterIcon: (filtered) => (\n      <SearchOutlined style={{ color: filtered ? \"#1890ff\" : undefined }} />\n    ),\n    onFilter: (value, record) =>\n      record[dataIndex]\n        ? record[dataIndex]\n          .toString()\n          .toLowerCase()\n          .includes(value.toLowerCase())\n        : \"\",\n    onFilterDropdownVisibleChange: (visible) => {\n      if (visible) {\n        setTimeout(() => this.searchInput.select(), 100);\n      }\n    },\n    render: (text) =>\n      this.state.searchedColumn === dataIndex ? (\n        <Highlighter\n          highlightStyle={{ backgroundColor: \"#ffc069\", padding: 0 }}\n          searchWords={[this.state.searchText]}\n          autoEscape\n          textToHighlight={text ? text.toString() : \"\"}\n        />\n      ) : (\n        text\n      ),\n  });\n\n  handleSearch = (selectedKeys, confirm, dataIndex) => {\n    confirm();\n    this.setState({\n      searchText: selectedKeys[0],\n      searchedColumn: dataIndex,\n    });\n  };\n\n  handleReset = (clearFilters) => {\n    clearFilters();\n    this.setState({ searchText: \"\" });\n  };\n\n  onCreateClick = (record) => {\n    //pass to redux\n    this.props.setSelectedTenant({ record });\n    //if FB, go to FB | if non-FB go to non-FB\n    if (record.type === \"F&B\") {\n      this.props.history.push(\"/checklistFB\");\n    } else this.props.history.push(\"/checklistNonFB\");\n    // this.props.tenantInfo = record;\n    console.log({ record });\n  };\n  onEditClick = () => ({\n    //pass props to checklist\n    //if FB, go to FB | if non-FB go to non-FB\n  });\n\n  render() {\n    const columns = [\n      {\n        title: \"Addr.\",\n        dataIndex: \"address\",\n        key: \"address\",\n        fixed: \"left\",\n        width: \"150\",\n        ...this.getColumnSearchProps(\"address\"),\n      },\n      {\n        title: \"Inst.\",\n        dataIndex: \"institution\",\n        key: \"institution\",\n        width: \"150\",\n        ...this.getColumnSearchProps(\"institution\"),\n      },\n      {\n        title: \"Auditor\",\n        dataIndex: \"auditor\",\n        key: \"auditor\",\n        width: \"150\",\n        ...this.getColumnSearchProps(\"auditor\"),\n      },\n      {\n        title: \"ID\",\n        dataIndex: \"userId\",\n        key: \"userId\",\n        width: \"150\",\n        ...this.getColumnSearchProps(\"id\"),\n      },\n      {\n        title: \"FB/NonFB\",\n        dataIndex: \"type\",\n        key: \"type\",\n        width: \"150\",\n        ...this.getColumnSearchProps(\"type\"),\n      },\n      {\n        title: \"Audit Action\",\n        dataIndex: \"\",\n        key: \"x\",\n        fixed: \"right\",\n        width: \"20%\",\n        render: (record) => (\n          <div>\n            <Button\n              className=\"action-buttons\"\n              type=\"primary\"\n              size=\"small\"\n              onClick={() => this.onCreateClick(record)}\n            >\n              Create\n            </Button>\n            <p></p>\n            <Button\n              className=\"action-buttons\"\n              type=\"primary\"\n              size=\"small\"\n              onClick={() => this.onEditClick(record)}\n            >\n              Edit\n            </Button>\n          </div>\n        ),\n      },\n    ];\n    return (\n      <div className=\"table\">\n        <Table\n          columns={columns}\n          dataSource={this.state.tenantData}\n          scroll={{ x: 400, y: 300 }}\n          title={() => <div className=\"table-title\">Tenants</div>}\n        />\n      </div>\n    );\n  }\n}\n\nDirectory.propTypes = {\n  getTenants: PropTypes.func.isRequired,\n  setSelectedTenant: PropTypes.func.isRequired,\n  tenantData: PropTypes.object.isRequired,\n};\nconst mapStateToProps = (state) => ({\n  tenantData: state.tenantData,\n});\nexport default connect(mapStateToProps, { getTenants, setSelectedTenant })(\n  Directory\n);\n","/home/lanvoine/Documents/ESC/singhealth2.0/client/src/components/layout/Navbar.js",[],"/home/lanvoine/Documents/ESC/singhealth2.0/client/src/components/auth/Login.js",["192"],"import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { loginUser } from \"../../actions/authActions\";\nimport classnames from \"classnames\";\nimport Recaptcha from \"react-recaptcha\";\n\nimport { Form, Input, Button, Checkbox, Alert } from \"antd\";\nimport { UserOutlined, LockOutlined } from \"@ant-design/icons\";\n\nclass Login extends Component {\n  constructor() {\n    super();\n    this.verifyCallback = this.verifyCallback.bind(this);\n    this.state = {\n      isVerified: false,\n      email: \"\",\n      password: \"\",\n      usertypebool: false,\n      errors: {},\n    };\n  }\n\n  componentDidMount() {\n    // If logged in and user navigates to Login page, should redirect them to dashboard\n    if (this.props.auth.isAuthenticated) {\n      if (this.props.auth.user.usertype === \"staff\") {\n        this.props.history.push(\"/auditlist\");\n      } else if (this.props.auth.user.usertype === \"tenant\") {\n        this.props.history.push(\"/tenant\");\n      }\n    }\n  }\n  // might be deprecated\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (nextProps.auth.isAuthenticated) {\n      if (this.props.auth.user.usertype === \"staff\") {\n        this.props.history.push(\"/auditlist\"); // push staff to auditlist when they login\n      } else if (this.props.auth.user.usertype === \"tenant\") {\n        this.props.history.push(\"/tenant\");\n      }\n    }\n    if (nextProps.errors) {\n      this.setState({\n        errors: nextProps.errors,\n      });\n    }\n  }\n\n  onChange = (e) => {\n    this.setState({ [e.target.id]: e.target.value });\n  };\n\n  onCheckboxChange = (e) => {\n    this.setState({ usertypebool: !this.state.usertypebool });\n  };\n\n  onFinish = (values) => {\n    // console.log(values);\n    // Process checkbox boolean to usertype string\n    if (!this.state.isVerified) {\n      alert(\"Please verify you are human\");\n    } else {\n      window.recaptcha = null;\n      var { usertype } = \"\";\n      if (this.state.usertypebool) {\n        usertype = \"staff\";\n      } else {\n        usertype = \"tenant\";\n      }\n      const userData = {\n        email: values.email,\n        password: values.password,\n        usertype: usertype,\n      };\n      console.log(values);\n\n      this.props.loginUser(userData, this.props.history); // since we handle the redirect within our component, we don't need to pass in this.props.history as a parameter\n    }\n  };\n\n  recaptchaLoaded() {\n    console.log(\"captcha loaded\");\n  }\n\n  verifyCallback(response) {\n    if (response) {\n      this.setState({ isVerified: true });\n    }\n  }\n  render() {\n    const { errors } = this.state;\n    return (\n      <div>\n        <div>{this.state.isVerified.toString()}</div>\n        <Form\n          onFinish={this.onFinish}\n          name=\"normal_login\"\n          className=\"login-register-form\"\n        >\n          <h2>Welcome to SingHealth Audit</h2>\n          <p>Enter your email and password to log in </p>\n          <Form.Item\n            name=\"email\"\n            rules={[{ required: true, message: \"Please input your Email!\" }]}\n          >\n            <Input\n              prefix={<UserOutlined className=\"site-form-item-icon\" />}\n              placeholder=\"Email\"\n              onChange={this.onChange}\n              value={this.state.email}\n              error={errors.email}\n              id=\"email\"\n              type=\"email\"\n              className={classnames(\"\", {\n                invalid: errors.email || errors.emailnotfound,\n              })}\n            />\n          </Form.Item>\n\n          <Form.Item\n            name=\"password\"\n            rules={[{ required: true, message: \"Please input your Password!\" }]}\n          >\n            <Input\n              prefix={<LockOutlined className=\"site-form-item-icon\" />}\n              placeholder=\"Password\"\n              onChange={this.onChange}\n              value={this.state.password}\n              error={errors.password}\n              id=\"password\"\n              type=\"password\"\n              className={classnames(\"\", {\n                invalid: errors.password || errors.passwordincorrect,\n              })}\n            />\n          </Form.Item>\n\n          <Form.Item name=\"usertypebool\">\n            <Checkbox\n              onChange={this.onCheckboxChange}\n              value={this.state.usertypebool}\n              error={errors.usertypebool}\n              id=\"usertypebool\"\n            >\n              Singhealth Staff Member?\n            </Checkbox>\n          </Form.Item>\n\n          <Form.Item>\n            <Button\n              id=\"login-button\"\n              type=\"primary\"\n              htmlType=\"submit\"\n              className=\"login-register-form-button\"\n            >\n              Log in\n            </Button>\n            New staff member? <Link to=\"/Register\">Register here!</Link>\n          </Form.Item>\n        </Form>\n        <Recaptcha\n          sitekey=\"6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI\"\n          render=\"explicit\"\n          verifyCallback={this.verifyCallback}\n        />\n      </div>\n    );\n  }\n}\nLogin.propTypes = {\n  loginUser: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired,\n  errors: PropTypes.object.isRequired,\n};\nconst mapStateToProps = (state) => ({\n  auth: state.auth,\n  errors: state.errors,\n});\nexport default connect(mapStateToProps, { loginUser })(Login);\n","/home/lanvoine/Documents/ESC/singhealth2.0/client/src/components/tenant/TenantHome.js",["193","194","195","196","197","198","199","200","201"],"/home/lanvoine/Documents/ESC/singhealth2.0/client/src/components/auth/Register.js",["202"],"import React, { Component } from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport Recaptcha from \"react-recaptcha\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { registerUser } from \"../../actions/authActions\";\nimport classnames from \"classnames\";\nimport { getStaffKey } from \"../../actions/authActions\";\nimport { Form, Input, Button, Checkbox, Select } from \"antd\";\nimport {\n  MailOutlined,\n  UserOutlined,\n  LockOutlined,\n  SketchOutlined,\n} from \"@ant-design/icons\";\nimport institutionsData from \"../../data/institutions.json\";\n\nconst institutions = institutionsData;\n\nclass Register extends Component {\n  constructor() {\n    super();\n    this.verifyCallback = this.verifyCallback.bind(this);\n    this.state = {\n      isVerified: false,\n      name: \"\",\n      email: \"\",\n      password: \"\",\n      password2: \"\",\n      institution: \"\",\n      staffkey: \"\",\n      dbstaffkey: \"\",\n      errors: {},\n    };\n  }\n\n  componentDidMount() {\n    // If loggied in and user navigates to Register page, should redirect them to dashboad\n    if (this.props.auth.isAuthenticaed) {\n      this.props.history.push(\"/dashboard\"); // Push new entry into history stack, ie redirecting the user to another route\n    }\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (nextProps.errors) {\n      this.setState({\n        errors: nextProps.errors,\n      });\n    }\n  }\n\n  onChange = (e) => {\n    this.setState({ [e.target.id]: e.target.value });\n  };\n\n  onDropdownChange = (e, { value }) => this.setState({ value });\n\n  onFinish = (values) => {\n    if (!this.state.isVerified) {\n      alert(\"Please verify you are human\");\n    } else {\n      window.recaptcha = null;\n      getStaffKey((data) => {\n        // console.log(\"data is: \", data);\n        this.setState({ ...this.state, dbstaffkey: data });\n        // console.log(\"dbstaffkey is: \", this.state.dbstaffkey);\n        if (this.state.staffkey === this.state.dbstaffkey) {\n          const newUser = {\n            name: values.name,\n            email: values.email,\n            password: values.password,\n            password2: values.password2,\n            institution: values.institution,\n            usertype: \"staff\",\n          };\n          this.props.registerUser(newUser, this.props.history);\n        } else {\n          alert(\"Staff Key is incorrect!\");\n        }\n      });\n    }\n  };\n\n  verifyCallback(response) {\n    if (response) {\n      this.setState({ isVerified: true });\n    }\n  }\n\n  render() {\n    const { errors } = this.state;\n    return (\n      <div>\n        <Form\n          name=\"normal_login\"\n          className=\"login-register-form\"\n          onFinish={this.onFinish}\n        >\n          <Form.Item\n            name=\"name\"\n            rules={[{ required: true, message: \"Please input your Name!\" }]}\n          >\n            <Input\n              prefix={<UserOutlined className=\"site-form-item-icon\" />}\n              placeholder=\"Name\"\n              onChange={this.onChange}\n              value={this.state.name}\n              error={errors.name}\n              id=\"name\"\n              type=\"text\"\n              // className={classnames(\"\", {\n              // invalid: errors.name,\n              // })}\n            />\n          </Form.Item>\n\n          <Form.Item\n            name=\"email\"\n            rules={[\n              {\n                required: true,\n                type: \"email\",\n                message: \"Please input a valid Email!\",\n              },\n            ]}\n          >\n            <Input\n              prefix={<MailOutlined className=\"site-form-item-icon\" />}\n              placeholder=\"Email\"\n              onChange={this.onChange}\n              value={this.state.email}\n              error={errors.email}\n              id=\"email\"\n              type=\"email\"\n              // className={classnames(\"\", {\n              //   invalid: errors.email,\n              // })}\n            />\n          </Form.Item>\n\n          <Form.Item\n            name=\"password\"\n            rules={[{ required: true, message: \"Please input your Password!\" }]}\n          >\n            <Input\n              prefix={<LockOutlined className=\"site-form-item-icon\" />}\n              placeholder=\"Password\"\n              onChange={this.onChange}\n              value={this.state.password}\n              error={errors.password}\n              id=\"password\"\n              type=\"password\"\n              // className={classnames(\"\", {\n              //   invalid: errors.password,\n              // })}\n            />\n          </Form.Item>\n\n          <Form.Item\n            name=\"password2\"\n            dependencies={[\"password\"]}\n            hasFeedback\n            rules={[\n              { required: true, message: \"Passwords do not match!\" },\n              ({ getFieldValue }) => ({\n                validator(_, value) {\n                  if (!value || getFieldValue(\"password\") === value) {\n                    return Promise.resolve();\n                  }\n\n                  return Promise.reject(\n                    new Error(\n                      \"The two passwords that you entered do not match!\"\n                    )\n                  );\n                },\n              }),\n            ]}\n          >\n            <Input\n              prefix={<LockOutlined className=\"site-form-item-icon\" />}\n              placeholder=\"Confirm Password\"\n              onChange={this.onChange}\n              value={this.state.password2}\n              error={errors.password2}\n              id=\"password2\"\n              type=\"password\"\n              // className={classnames(\"\", {\n              // invalid: errors.password2,\n              // })}\n            />\n          </Form.Item>\n\n          <Form.Item\n            name=\"staffkey\"\n            rules={[\n              { required: true, message: \"Please input your staff key!\" },\n            ]}\n          >\n            <Input\n              prefix={<SketchOutlined className=\"site-form-item-icon\" />}\n              placeholder=\"Staff Key\"\n              onChange={this.onChange}\n              value={this.state.staffkey}\n              error={errors.staffkey}\n              id=\"staffkey\"\n              type=\"staffkey\"\n              className={classnames(\"\", {\n                invalid: errors.key || errors.keyincorrect,\n              })}\n            />\n          </Form.Item>\n\n          <Form.Item\n            name=\"institution\"\n            rules={[\n              {\n                required: true,\n                message: \"Please select an institution!\",\n              },\n            ]}\n          >\n            <Select\n              showSearch\n              className=\"dropdown\"\n              icon={MailOutlined}\n              placeholder=\"Institution\"\n              options={institutions}\n              onChange={this.onDropdownChange}\n              id=\"institution\"\n              type=\"institution\"\n              value={this.state.institution}\n              error={errors.institution}\n            />\n          </Form.Item>\n\n          <Form.Item>\n            <Button\n              type=\"primary\"\n              htmlType=\"submit\"\n              className=\"login-register-form-button\"\n            >\n              Register\n            </Button>\n            Or <Link to=\"/Login\">Login here</Link>\n          </Form.Item>\n        </Form>\n        <Recaptcha\n          sitekey=\"6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI\"\n          render=\"explicit\"\n          verifyCallback={this.verifyCallback}\n        />\n      </div>\n    );\n  }\n}\n// Props stands for properties and is being used for passing data from one component to another\nRegister.propTypes = {\n  registerUser: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired,\n  errors: PropTypes.object.isRequired,\n};\n\n// Get state from Redux and map it to props\nconst mapStateToProps = (state) => ({\n  auth: state.auth, // allows us to call this.props.auth\n  errors: state.errors, // allows us to call this.props.errors\n});\n\nexport default connect(mapStateToProps, { registerUser })(withRouter(Register));\n","/home/lanvoine/Documents/ESC/singhealth2.0/client/src/components/tenant/EditAudit.js",[],"/home/lanvoine/Documents/ESC/singhealth2.0/client/src/actions/auditActions.js",["203"],"import { getAllByPlaceholderText } from \"@testing-library/dom\";\nimport axios from \"axios\";\n\nexport const submit = (data) => {\n  console.log(data);\n  axios.post(\"/api/audits/add\", data).catch((error) => {\n    console.log(error);\n  });\n};\n\nexport const display = (onDataReceived) => {\n  axios\n    .get(\"/api/audits\")\n    .then((response) => {\n      const data = response.data;\n      // console.log(data);\n      // console.log(data.length);\n      onDataReceived(data);\n    })\n    .catch(() => {\n      alert(\"Error\");\n    });\n};\n\nexport const updateAudit = (data) => {\n  console.log(data);\n  axios.put(\"/api/audits/update\", data).catch((error) => {\n    console.log(error);\n  });\n};","/home/lanvoine/Documents/ESC/singhealth2.0/client/src/data/AuditData.ts",[],["204","205"],"/home/lanvoine/Documents/ESC/singhealth2.0/client/src/components/photo/PhotoPop.js",["206"],"/home/lanvoine/Documents/ESC/singhealth2.0/client/src/actions/types.js",[],"/home/lanvoine/Documents/ESC/singhealth2.0/client/src/data/questionsData.js",[],"/home/lanvoine/Documents/ESC/singhealth2.0/client/src/components/layout/RightMenuLoggedIn.js",["207","208","209","210","211","212"],"import React, { Component } from \"react\";\nimport { Menu, Icon, Button } from \"antd\";\nimport { logoutUser } from \"../../actions/authActions\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { NavLink, withRouter } from \"react-router-dom\";\n\nconst SubMenu = Menu.SubMenu;\nconst MenuItemGroup = Menu.ItemGroup;\nclass RightMenu extends Component {\n  onLogoutClick = (e) => {\n    e.preventDefault();\n    this.props.logoutUser();\n  };\n  render() {\n    const { user } = this.props.auth;\n\n    return (\n      <Menu mode=\"vertical\">\n        <Menu.Item key=\"mail\">\n          <NavLink onClick={this.onLogoutClick} to=\"/login\">\n            Logout\n          </NavLink>\n        </Menu.Item>\n        <Menu.Item key=\"app\">\n          <a href=\"\">Hello {user.name}</a>\n        </Menu.Item>\n      </Menu>\n    );\n  }\n}\nRightMenu.propTypes = {\n  logoutUser: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired,\n};\nconst mapStateToProps = (state) => ({\n  auth: state.auth,\n});\nexport default connect(mapStateToProps, { logoutUser })(RightMenu);\n","/home/lanvoine/Documents/ESC/singhealth2.0/client/src/components/layout/LeftMenu.js",["213","214","215","216","217","218","219"],"import React, { Component } from \"react\";\nimport { Menu, Icon, Dropdown, Button } from \"antd\";\nimport { NavLink } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport MenuItem from \"antd/lib/menu/MenuItem\";\n\nconst SubMenu = Menu.SubMenu;\nconst MenuItemGroup = Menu.ItemGroup;\n\nconst CreateAuditMenu = (\n  <Menu>\n    <Menu.Item key=\"fbchecklist\">\n      <NavLink to=\"/checklist\">FB Audit List</NavLink>\n    </Menu.Item>\n\n    <Menu.Item key=\"nonfbchecklist\">\n      <NavLink to=\"/ChecklistNonFB\">Non-FB Audit List</NavLink>\n    </Menu.Item>\n  </Menu>\n);\n\nclass StaffLeftMenu extends Component {\n  render() {\n    return (\n      <Menu mode=\"vertical\">\n        <Menu.Item key=\"audits\">\n          <NavLink to=\"/auditlist\">Audits</NavLink>\n        </Menu.Item>\n\n        {/* <SubMenu key=\"sub1\" title={<span>Create Audit</span>}>\n          <Menu.Item key=\"fbchecklist\">\n            <NavLink to=\"/checklistFB\">FB Audit List</NavLink>\n          </Menu.Item>\n          <Menu.Item key=\"nonfbchecklist\">\n            <NavLink to=\"/checklistNonFB\">Non-FB Audit List</NavLink>\n          </Menu.Item>\n        </SubMenu> */}\n\n        <Menu.Item key=\"createtenant\">\n          <NavLink to=\"/createtenant\">Create Tenant</NavLink>\n        </Menu.Item>\n\n        <Menu.Item key=\"directory\">\n          <NavLink to=\"/directory\">Directory</NavLink>\n        </Menu.Item>\n\n        <Menu.Item key=\"viewaudit\">\n          <NavLink to=\"/viewaudit\">View Audit</NavLink>\n        </Menu.Item>\n      </Menu>\n    );\n  }\n}\n\nclass TenantLeftMenu extends Component {\n  render() {\n    return (\n      <Menu mode=\"vertical\">\n        <Menu.Item key=\"tenanthome\">\n          <NavLink to=\"/tenant\">Tenant Home</NavLink>\n        </Menu.Item>\n\n        <Menu.Item key=\"editaudit\">\n          <NavLink to=\"/tenant/editaudit\">Edit Audit</NavLink>\n        </Menu.Item>\n\n        <Menu.Item key=\"viewaudittenant\">\n          <NavLink to=\"/viewaudittenant\">View Audit</NavLink>\n        </Menu.Item>\n      </Menu>\n    );\n  }\n}\n\nclass LeftMenu extends Component {\n  render() {\n    if (this.props.auth.user.usertype === \"staff\") {\n      return <StaffLeftMenu />;\n    } else if (this.props.auth.user.usertype === \"tenant\") {\n      return <TenantLeftMenu />;\n    } else return <div></div>;\n  }\n}\n\nLeftMenu.propTypes = {\n  auth: PropTypes.object.isRequired,\n};\nconst mapStateToProps = (state) => ({\n  auth: state.auth,\n});\nexport default connect(mapStateToProps)(LeftMenu);\n","/home/lanvoine/Documents/ESC/singhealth2.0/client/src/components/layout/RightMenu.js",["220","221","222"],"import React, { Component } from \"react\";\nimport { Menu, Icon } from \"antd\";\nimport { logoutUser } from \"../../actions/authActions\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\n\nconst SubMenu = Menu.SubMenu;\nconst MenuItemGroup = Menu.ItemGroup;\nclass RightMenu extends Component {\n  onLogoutClick = (e) => {\n    e.preventDefault();\n    this.props.logoutUser();\n  };\n  render() {\n    return (\n      <Menu mode=\"vertical\">\n        <Menu.Item key=\"mail\" id=\"rightmenu1\">\n          <Link to=\"/login\">Login</Link>\n        </Menu.Item>\n        <Menu.Item key=\"app\" id=\"rightmenu2\">\n          <Link to=\"/register\">Register</Link>\n        </Menu.Item>\n      </Menu>\n    );\n  }\n}\nRightMenu.propTypes = {\n  logoutUser: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired,\n};\nconst mapStateToProps = (state) => ({\n  auth: state.auth,\n});\nexport default connect(mapStateToProps, { logoutUser })(RightMenu);\n","/home/lanvoine/Documents/ESC/singhealth2.0/client/src/actions/photoActions.js",[],"/home/lanvoine/Documents/ESC/singhealth2.0/client/src/reducers/index.js",[],"/home/lanvoine/Documents/ESC/singhealth2.0/client/src/reducers/errorReducer.js",[],"/home/lanvoine/Documents/ESC/singhealth2.0/client/src/reducers/authReducer.js",[],"/home/lanvoine/Documents/ESC/singhealth2.0/client/src/components/ViewAudit.js",["223","224"],"import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Typography, Progress, Image, Input, Comment, Form, Button } from \"antd\";\nimport dateformat from \"dateformat\";\n\nconst { Text } = Typography;\nconst { TextArea } = Input;\n\nexport default class ViewAuditAuditor extends Component {\n    state = {\n        input: \"85\",\n        tenant: \"tenant1\",\n        auditor: \"auditor\",\n        // auditorComments: [\"Bla\", \"blabla\"],\n        // tenantComments: [\"Response\", \"response\"],\n        comments:\n            [{\n                \"content\": \"blablabla\",\n                \"date\": \"2017-05-29T15:30:17.983Z\",\n                \"author\": \"auditor\"\n            },\n            {\n                \"content\": \"blabla\",\n                \"date\": \"2018-05-29T15:30:17.983Z\",\n                \"author\": \"auditor\"\n            },\n            {\n                \"content\": \"alab\",\n                \"date\": \"2016-05-29T15:30:17.983Z\",\n                \"author\": \"tenant1\",\n            },\n            {\n                \"content\": \"ooga\",\n                \"date\": \"2022-06-29T15:30:17.983Z\",\n                \"author\": \"tenant1\",\n            },],\n        image: [{ \"base64\": \"iVBORw0KGgoAAAANSUhEUgAAAAUAAAAFCAYAAACNbyblAAAAHElEQVQI12P4//8/w38GIAXDIBKE0DHxgljNBAAO9TXL0Y4OHwAAAABJRU5ErkJggg==\", \"date\": \"2018-05-29T15:30:17.983Z\" }],\n        decodedImage: \"\",\n        newComment: \"\",\n    };\n\n\n\n    displayComments() {\n        var output = [];\n        var Comm = [];\n        for (var i = 0; i < Math.max(this.state.comments.length, this.state.image.length); i++) {\n            Comm.push(this.state.comments[i]);\n            if (this.state.image[i] != null) {\n                Comm.push(this.state.image[i])\n            }\n        }\n        Comm = Comm.sort((a, b) => a.date > b.date);\n        console.log(Comm);\n\n        for (var j = 0; j < Comm.length; j++) {\n            if (Comm[j].content) {\n                output.push(<div>\n                    <Comment\n                        author={<a>{Comm[j].author}</a>}\n                        className=\"comment\"\n                        content={\n                            <p>{Comm[j].content}</p>\n                        } />\n                </div>);\n            }\n            else {\n                output.push(<div className=\"image\">\n                    <Image\n                        width={100}\n                        src={`data:image/jpeg;base64,${Comm[j].base64}`}\n                    />\n                </div>);\n            }\n        }\n        return (\n            <div>\n                {output}\n            </div>\n        )\n    }\n\n    onChange = value => {\n        console.log(value.Text);\n        this.setState({\n            newComment: value\n        })\n        console.log(this.state.newComment);\n    };\n\n    newComment = (values) => {\n        // console.log(values.nativeEvent.explicitOriginalTarget.value);\n        this.setState({\n            newComment:\n                [{\n                    \"content\": values.nativeEvent.explicitOriginalTarget.value,\n                    \"date\": dateformat(Date().toString(), \"yyyy-mm-dd'T'HH:MM:ss.sssZ\"),\n                    \"author\": \"auditor\",\n                }]\n        })\n        // console.log(this.state.newComment)\n    }\n\n    submitComment = () => {\n        var tempArray = this.state.comments;\n        console.log(tempArray);\n        tempArray.push(this.state.newComment[0]);\n        console.log(tempArray);\n        this.setState({\n            comments: tempArray,\n        })\n        console.log(this.state.comments);\n    }\n\n    render() {\n        return (\n            <div>\n                <p></p>\n                <Progress className=\"score\"\n                    type=\"circle\"\n                    percent={this.state.input} width={200} />\n                <div>\n                    <Text className=\"name\">\n                        Tenant: {this.state.tenant}\n                    </Text>\n                    <div />\n                    <Text className=\"name\">\n                        Auditor: {this.state.auditor}\n                    </Text>\n                    <div />\n                    {this.displayComments()}\n                    <div />\n                    <Form className=\"addComment\" onChange={this.newComment} initialValues={{\n                        remember: false,\n                    }}>\n                        <Form.Item name=\"addComment\" label=\"Add Comment\">\n                            <TextArea className=\"addCommentText\" placeholder=\"Add Comment\" rows={4} allowClear={true} />\n                        </Form.Item>\n                        <Form.Item>\n                            <Button className=\"submit-comment\" onClick={this.submitComment}>\n                                Submit Comment\n                            </Button>\n                        </Form.Item>\n                    </Form>\n                </div>\n            </div >\n        );\n    }\n}","/home/lanvoine/Documents/ESC/singhealth2.0/client/src/components/MessageDisplay.js",[],"/home/lanvoine/Documents/ESC/singhealth2.0/client/src/components/auth/CreateTenant.js",["225","226","227","228","229","230"],"import React, { ReactDOM, Component } from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { registerTenant } from \"../../actions/authActions\";\nimport { Form, Input, Button, Message, Select, message } from \"antd\";\nimport { MailOutlined, UserOutlined, LockOutlined } from \"@ant-design/icons\";\nimport institutionsData from \"../../data/institutions.json\";\nimport tenantData from \"../../data/tenantTypes.json\";\n\n// TODO: this should be taken from db\nconst institutions = institutionsData;\nconst tenantTypes = tenantData;\n\nclass CreateTenant extends Component {\n  constructor() {\n    super();\n    this.state = {\n      name: \"\",\n      type: \"\",\n      email: \"\",\n      address: \"\",\n      institution: \"\",\n      auditor: \"\",\n      errors: {},\n    };\n  }\n\n  componentDidMount() {\n    // If loggied in and user navigates to Register page, should redirect them to dashboad\n    if (this.props.auth.isAuthenticaed) {\n      this.props.history.push(\"/dashboard\"); // Push new entry into history stack, ie redirecting the user to another route\n    }\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (nextProps.errors) {\n      this.setState({\n        errors: nextProps.errors,\n      });\n    }\n  }\n\n  onChange = (e) => {\n    this.setState({ [e.target.id]: e.target.value });\n  };\n\n  onDropdownChange = (e, { value }) => this.setState({ value });\n\n  // TODO send email to tenant with login details\n\n  onFinish = (values) => {\n    const newUser = {\n      name: values.name,\n      type: values.type,\n      email: values.email,\n      address: values.address,\n      institution: values.institution,\n      auditor: values.auditor,\n    };\n    console.log(newUser);\n    this.props.registerTenant(newUser, this.props.history);\n  };\n\n  render() {\n    const { user } = this.props.auth;\n    const { errors } = this.state;\n    const layout = {\n      labelCol: { span: 3 },\n    };\n    return (\n      <Form\n        {...layout}\n        name=\"normal_login\"\n        className=\"login-register-form\"\n        onFinish={this.onFinish}\n        initialValues={{\n          auditor: user.name,\n        }}\n      >\n        <h1>Create a Tenant Account</h1>\n\n        {/* No name, replace with id for annonymity */}\n\n        <Form.Item\n          label=\"Tenant Name\"\n          name=\"name\"\n          rules={[\n            {\n              required: true,\n              type: \"string\",\n              message: \"Please input a valid Name!\",\n            },\n          ]}\n        >\n          <Input\n            placeholder=\"Tenant Name\"\n            onChange={this.onChange}\n            value={this.state.name}\n            error={errors.name}\n            id=\"name\"\n            type=\"name\"\n            // className={classnames(\"\", {\n            //   invalid: errors.email,\n            // })}\n          />\n        </Form.Item>\n\n        <Form.Item\n          label=\"Type\"\n          name=\"type\"\n          rules={[\n            {\n              required: true,\n              message: \"Please select F&B or non-F&B!\",\n            },\n          ]}\n        >\n          <Select\n            className=\"dropdown\"\n            placeholder=\"F&B or Non-F&B\"\n            options={tenantTypes}\n            onChange={this.onDropdownChange}\n            id=\"type\"\n            type=\"type\"\n            value={this.state.type}\n            error={errors.type}\n          />\n        </Form.Item>\n\n        <Form.Item\n          label=\"Email\"\n          name=\"email\"\n          rules={[\n            {\n              required: true,\n              type: \"email\",\n              message: \"Please input a valid Email!\",\n            },\n          ]}\n        >\n          <Input\n            placeholder=\"Email\"\n            onChange={this.onChange}\n            value={this.state.email}\n            error={errors.email}\n            id=\"email\"\n            type=\"email\"\n            // className={classnames(\"\", {\n            //   invalid: errors.email,\n            // })}\n          />\n        </Form.Item>\n\n        <Form.Item\n          label=\"Address\"\n          name=\"address\"\n          rules={[\n            {\n              required: true,\n              type: \"string\",\n              message: \"Please input a valid Address!\",\n            },\n          ]}\n        >\n          <Input\n            placeholder=\"Address\"\n            onChange={this.onChange}\n            value={this.state.address}\n            error={errors.address}\n            id=\"address\"\n            type=\"address\"\n            // className={classnames(\"\", {\n            //   invalid: errors.email,\n            // })}\n          />\n        </Form.Item>\n\n        <Form.Item\n          label=\"Institution\"\n          name=\"institution\"\n          rules={[\n            {\n              required: true,\n              message: \"Please select an institution!\",\n            },\n          ]}\n        >\n          <Select\n            showSearch\n            className=\"dropdown\"\n            icon={MailOutlined}\n            placeholder=\"Institution\"\n            options={institutions}\n            onChange={this.onDropdownChange}\n            id=\"institution\"\n            type=\"institution\"\n            value={this.state.institution}\n            error={errors.institution}\n          />\n        </Form.Item>\n\n        <Form.Item\n          label=\"Auditor\"\n          name=\"auditor\"\n          rules={[{ required: true, message: \"Please input name of Auditor!\" }]}\n        >\n          <Input\n            placeholder=\"Auditor\"\n            onChange={this.onChange}\n            value={this.state.auditor}\n            error={errors.auditor}\n            id=\"auditor\"\n            type=\"auditor\"\n          />\n        </Form.Item>\n\n        <Form.Item>\n          <Button\n            type=\"primary\"\n            htmlType=\"submit\"\n            className=\"login-register-form-button\"\n          >\n            Create Tenant\n          </Button>\n        </Form.Item>\n      </Form>\n    );\n  }\n}\n// Props stands for properties and is being used for passing data from one component to another\nCreateTenant.propTypes = {\n  registerTenant: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired,\n  errors: PropTypes.object.isRequired,\n};\n\n// Get state from Redux and map it to props\nconst mapStateToProps = (state) => ({\n  auth: state.auth, // allows us to call this.props.auth\n  errors: state.errors, // allows us to call this.props.errors\n});\n\nexport default connect(mapStateToProps, { registerTenant })(\n  withRouter(CreateTenant)\n);\n","/home/lanvoine/Documents/ESC/singhealth2.0/client/src/actions/tenantActions.js",[],"/home/lanvoine/Documents/ESC/singhealth2.0/client/src/actions/errorActions.js",[],"/home/lanvoine/Documents/ESC/singhealth2.0/client/src/reducers/messageReducer.js",[],"/home/lanvoine/Documents/ESC/singhealth2.0/client/src/reducers/tenantReducer.js",["231"],"/* eslint-disable import/no-anonymous-default-export */\nimport { SET_SELECTED_TENANT } from \"../actions/types\";\n\nconst initialState = {};\n\n// anonymous function\nexport default function (state = initialState, action) {\n  console.log(\"in reducer\");\n  switch (action.type) {\n    case SET_SELECTED_TENANT:\n      return { ...state }, action.payload;\n    default:\n      return state;\n  }\n}\n","/home/lanvoine/Documents/ESC/singhealth2.0/client/src/components/ViewAuditTenant.js",["232","233","234"],"import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Typography, Progress, Image, Input, Comment, Form, Button } from \"antd\";\nimport dateformat from \"dateformat\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { display, updateAudit } from \"../actions/auditActions.js\";\n\nconst { Text } = Typography;\nconst { TextArea } = Input;\n\n\nclass ViewAuditTenant extends Component {\n    state = {\n        _id: this.props.tenantInfo.record._id,\n        audit: null,\n        total_score: this.props.tenantInfo.record.total_score,\n        tenantID: this.props.tenantInfo.record.tenantID,\n        auditor: \"auditor\",\n        // auditorComments: [\"Bla\", \"blabla\"],\n        // tenantComments: [\"Response\", \"response\"],\n        comment: this.props.tenantInfo.record.comment,\n        image: this.props.tenantInfo.record.image,\n        date: this.props.tenantInfo.record.date,\n        catCounts: this.props.tenantInfo.record.catCounts,\n        type: this.props.tenantInfo.record.type,\n        decodedImage: \"\",\n        newComment: \"\",\n    };\n\n    displayComments() {\n        var output = [];\n        var Comm = [];\n        for (var i = 0; i < Math.max(this.state.comment.length, this.state.image.length); i++) {\n            Comm.push(this.state.comment[i]);\n            if (this.state.image[i] != null) {\n                Comm.push(this.state.image[i])\n            }\n        }\n        Comm = Comm.sort((a, b) => a.date > b.date);\n        console.log(Comm);\n\n        for (var j = 0; j < Comm.length; j++) {\n            if (Comm[j].content) {\n                output.push(<div>\n                    <Comment\n                        author={<a>{Comm[j].author}</a>}\n                        className=\"comment\"\n                        content={\n                            <p>{Comm[j].content}</p>\n                        } />\n                </div>);\n            }\n            else {\n                output.push(<div className=\"image\">\n                    <Image\n                        width={100}\n                        src={`data:image/jpeg;base64,${Comm[j].base64}`}\n                    />\n                </div>);\n            }\n        }\n        return (\n            <div>\n                {output}\n            </div>\n        )\n    }\n\n    onChange = value => {\n        console.log(value.Text);\n        console.log(this.state.newComment);\n    };\n\n    newComment = (values) => {\n        // console.log(values.nativeEvent.explicitOriginalTarget.value);\n        this.setState({\n            newComment:\n                [{\n                    \"content\": values.nativeEvent.explicitOriginalTarget.value,\n                    \"date\": dateformat(Date().toString(), \"yyyy-mm-dd'T'HH:MM:ss.sssZ\"),\n                    \"author\": \"tenant\",\n                }]\n        })\n        // console.log(this.state.newComment)\n    }\n\n    submitComment = () => {\n        var tempArray = this.state.comment;\n        console.log(tempArray);\n        tempArray.push(this.state.newComment[0]);\n        console.log(tempArray);\n        this.setState({\n            comment: tempArray,\n        })\n        console.log(this.state.comment);\n        this.update();\n\n    }\n\n    update = () => {\n        console.log(this.state);\n        updateAudit({\n            _id: this.props.tenantInfo.record._id,\n            type: this.props.tenantInfo.record.type,\n            catCounts: this.props.tenantInfo.record.catCounts,\n            total_score: this.props.tenantInfo.record.total_score,\n            image: this.props.tenantInfo.record.image,\n            date: this.props.tenantInfo.record.date,\n            comment: this.state.comment,\n            location: this.props.tenantInfo.record.location,\n            tenantID: this.props.tenantInfo.record.tenantID,\n        });\n    };\n\n    render() {\n        return (\n            <div>\n                <p></p>\n                <Progress className=\"score\"\n                    type=\"circle\"\n                    percent={this.state.total_score} width={200} />\n                <div>\n                    <Text className=\"name\">\n                        Tenant: {this.state.tenantID}\n                    </Text>\n                    <div />\n                    <Text className=\"name\">\n                        Auditor: {this.state.auditor}\n                    </Text>\n                    <div />\n                    {this.displayComments()}\n                    <div />\n                    <Form className=\"addComment\" onChange={this.newComment} initialValues={{\n                        remember: false,\n                    }}>\n                        <Form.Item name=\"addComment\" label=\"Add Comment\">\n                            <TextArea className=\"addCommentText\" placeholder=\"Add Comment\" rows={4} allowClear={true} />\n                        </Form.Item>\n                        <Form.Item>\n                            <Button className=\"submit-comment\" onClick={this.submitComment}>\n                                Submit Comment\n                            </Button>\n                        </Form.Item>\n                    </Form>\n                </div>\n            </div >\n        );\n    }\n}\n\nViewAuditTenant.propTypes = {\n    tenantInfo: PropTypes.object.isRequired,\n};\nconst mapStateToProps = (state) => ({\n    tenantInfo: state.tenantInfo,\n});\nexport default connect(mapStateToProps)(ViewAuditTenant);",{"ruleId":"235","replacedBy":"236"},{"ruleId":"237","replacedBy":"238"},{"ruleId":"239","severity":1,"message":"240","line":6,"column":8,"nodeType":"241","messageId":"242","endLine":6,"endColumn":17},{"ruleId":"239","severity":1,"message":"243","line":4,"column":3,"nodeType":"241","messageId":"242","endLine":4,"endColumn":10},{"ruleId":"239","severity":1,"message":"244","line":18,"column":8,"nodeType":"241","messageId":"242","endLine":18,"endColumn":13},{"ruleId":"239","severity":1,"message":"243","line":4,"column":3,"nodeType":"241","messageId":"242","endLine":4,"endColumn":10},{"ruleId":"239","severity":1,"message":"245","line":17,"column":18,"nodeType":"241","messageId":"242","endLine":17,"endColumn":25},{"ruleId":"239","severity":1,"message":"246","line":23,"column":7,"nodeType":"241","messageId":"242","endLine":23,"endColumn":13},{"ruleId":"239","severity":1,"message":"247","line":1,"column":28,"nodeType":"241","messageId":"242","endLine":1,"endColumn":36},{"ruleId":"239","severity":1,"message":"248","line":4,"column":17,"nodeType":"241","messageId":"242","endLine":4,"endColumn":20},{"ruleId":"239","severity":1,"message":"249","line":4,"column":22,"nodeType":"241","messageId":"242","endLine":4,"endColumn":27},{"ruleId":"239","severity":1,"message":"250","line":5,"column":10,"nodeType":"241","messageId":"242","endLine":5,"endColumn":19},{"ruleId":"239","severity":1,"message":"251","line":6,"column":64,"nodeType":"241","messageId":"242","endLine":6,"endColumn":70},{"ruleId":"239","severity":1,"message":"252","line":8,"column":17,"nodeType":"241","messageId":"242","endLine":8,"endColumn":28},{"ruleId":"253","severity":1,"message":"254","line":19,"column":7,"nodeType":"255","endLine":24,"endColumn":8},{"ruleId":"253","severity":1,"message":"256","line":97,"column":15,"nodeType":"255","endLine":97,"endColumn":18},{"ruleId":"239","severity":1,"message":"257","line":1,"column":17,"nodeType":"241","messageId":"242","endLine":1,"endColumn":26},{"ruleId":"239","severity":1,"message":"258","line":2,"column":10,"nodeType":"241","messageId":"242","endLine":2,"endColumn":14},{"ruleId":"239","severity":1,"message":"257","line":1,"column":17,"nodeType":"241","messageId":"242","endLine":1,"endColumn":26},{"ruleId":"239","severity":1,"message":"258","line":2,"column":10,"nodeType":"241","messageId":"242","endLine":2,"endColumn":14},{"ruleId":"239","severity":1,"message":"259","line":2,"column":8,"nodeType":"241","messageId":"242","endLine":2,"endColumn":13},{"ruleId":"239","severity":1,"message":"260","line":10,"column":10,"nodeType":"241","messageId":"242","endLine":10,"endColumn":22},{"ruleId":"239","severity":1,"message":"261","line":9,"column":41,"nodeType":"241","messageId":"242","endLine":9,"endColumn":46},{"ruleId":"239","severity":1,"message":"262","line":4,"column":10,"nodeType":"241","messageId":"242","endLine":4,"endColumn":17},{"ruleId":"239","severity":1,"message":"263","line":4,"column":19,"nodeType":"241","messageId":"242","endLine":4,"endColumn":29},{"ruleId":"239","severity":1,"message":"248","line":5,"column":17,"nodeType":"241","messageId":"242","endLine":5,"endColumn":20},{"ruleId":"239","severity":1,"message":"249","line":5,"column":22,"nodeType":"241","messageId":"242","endLine":5,"endColumn":27},{"ruleId":"239","severity":1,"message":"252","line":11,"column":17,"nodeType":"241","messageId":"242","endLine":11,"endColumn":28},{"ruleId":"253","severity":1,"message":"254","line":22,"column":7,"nodeType":"255","endLine":27,"endColumn":8},{"ruleId":"264","severity":1,"message":"265","line":51,"column":28,"nodeType":"266","messageId":"267","endLine":51,"endColumn":30},{"ruleId":"264","severity":1,"message":"265","line":60,"column":30,"nodeType":"266","messageId":"267","endLine":60,"endColumn":32},{"ruleId":"264","severity":1,"message":"265","line":91,"column":41,"nodeType":"266","messageId":"267","endLine":91,"endColumn":43},{"ruleId":"239","severity":1,"message":"268","line":9,"column":31,"nodeType":"241","messageId":"242","endLine":9,"endColumn":39},{"ruleId":"239","severity":1,"message":"269","line":1,"column":10,"nodeType":"241","messageId":"242","endLine":1,"endColumn":33},{"ruleId":"235","replacedBy":"236"},{"ruleId":"237","replacedBy":"238"},{"ruleId":"239","severity":1,"message":"270","line":3,"column":10,"nodeType":"241","messageId":"242","endLine":3,"endColumn":21},{"ruleId":"239","severity":1,"message":"271","line":2,"column":16,"nodeType":"241","messageId":"242","endLine":2,"endColumn":20},{"ruleId":"239","severity":1,"message":"272","line":2,"column":22,"nodeType":"241","messageId":"242","endLine":2,"endColumn":28},{"ruleId":"239","severity":1,"message":"273","line":6,"column":19,"nodeType":"241","messageId":"242","endLine":6,"endColumn":29},{"ruleId":"239","severity":1,"message":"274","line":8,"column":7,"nodeType":"241","messageId":"242","endLine":8,"endColumn":14},{"ruleId":"239","severity":1,"message":"275","line":9,"column":7,"nodeType":"241","messageId":"242","endLine":9,"endColumn":20},{"ruleId":"253","severity":1,"message":"254","line":26,"column":11,"nodeType":"255","endLine":26,"endColumn":22},{"ruleId":"239","severity":1,"message":"271","line":2,"column":16,"nodeType":"241","messageId":"242","endLine":2,"endColumn":20},{"ruleId":"239","severity":1,"message":"276","line":2,"column":22,"nodeType":"241","messageId":"242","endLine":2,"endColumn":30},{"ruleId":"239","severity":1,"message":"272","line":2,"column":32,"nodeType":"241","messageId":"242","endLine":2,"endColumn":38},{"ruleId":"239","severity":1,"message":"277","line":6,"column":8,"nodeType":"241","messageId":"242","endLine":6,"endColumn":16},{"ruleId":"239","severity":1,"message":"274","line":8,"column":7,"nodeType":"241","messageId":"242","endLine":8,"endColumn":14},{"ruleId":"239","severity":1,"message":"275","line":9,"column":7,"nodeType":"241","messageId":"242","endLine":9,"endColumn":20},{"ruleId":"239","severity":1,"message":"278","line":11,"column":7,"nodeType":"241","messageId":"242","endLine":11,"endColumn":22},{"ruleId":"239","severity":1,"message":"271","line":2,"column":16,"nodeType":"241","messageId":"242","endLine":2,"endColumn":20},{"ruleId":"239","severity":1,"message":"274","line":8,"column":7,"nodeType":"241","messageId":"242","endLine":8,"endColumn":14},{"ruleId":"239","severity":1,"message":"275","line":9,"column":7,"nodeType":"241","messageId":"242","endLine":9,"endColumn":20},{"ruleId":"239","severity":1,"message":"258","line":2,"column":10,"nodeType":"241","messageId":"242","endLine":2,"endColumn":14},{"ruleId":"253","severity":1,"message":"256","line":60,"column":33,"nodeType":"255","endLine":60,"endColumn":36},{"ruleId":"239","severity":1,"message":"279","line":1,"column":17,"nodeType":"241","messageId":"242","endLine":1,"endColumn":25},{"ruleId":"239","severity":1,"message":"258","line":2,"column":10,"nodeType":"241","messageId":"242","endLine":2,"endColumn":14},{"ruleId":"239","severity":1,"message":"280","line":6,"column":31,"nodeType":"241","messageId":"242","endLine":6,"endColumn":38},{"ruleId":"239","severity":1,"message":"281","line":6,"column":48,"nodeType":"241","messageId":"242","endLine":6,"endColumn":55},{"ruleId":"239","severity":1,"message":"282","line":7,"column":24,"nodeType":"241","messageId":"242","endLine":7,"endColumn":36},{"ruleId":"239","severity":1,"message":"283","line":7,"column":38,"nodeType":"241","messageId":"242","endLine":7,"endColumn":50},{"ruleId":"284","severity":1,"message":"285","line":11,"column":26,"nodeType":"286","messageId":"287","endLine":11,"endColumn":27},{"ruleId":"239","severity":1,"message":"258","line":2,"column":10,"nodeType":"241","messageId":"242","endLine":2,"endColumn":14},{"ruleId":"239","severity":1,"message":"245","line":7,"column":10,"nodeType":"241","messageId":"242","endLine":7,"endColumn":17},{"ruleId":"253","severity":1,"message":"256","line":47,"column":33,"nodeType":"255","endLine":47,"endColumn":36},"no-native-reassign",["288"],"no-negated-in-lhs",["289"],"no-unused-vars","'Recaptcha' is defined but never used.","Identifier","unusedVar","'Divider' is defined but never used.","'store' is defined but never used.","'display' is defined but never used.","'layout' is assigned a value but never used.","'TextArea' is defined but never used.","'Tag' is defined but never used.","'Space' is defined but never used.","'getAudits' is defined but never used.","'submit' is defined but never used.","'ColumnGroup' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'Component' is defined but never used.","'Link' is defined but never used.","'axios' is defined but never used.","'FormProvider' is defined but never used.","'Alert' is defined but never used.","'NavLink' is defined but never used.","'useHistory' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Checkbox' is defined but never used.","'getAllByPlaceholderText' is defined but never used.","'uploadPhoto' is defined but never used.","'Icon' is defined but never used.","'Button' is defined but never used.","'withRouter' is defined but never used.","'SubMenu' is assigned a value but never used.","'MenuItemGroup' is assigned a value but never used.","'Dropdown' is defined but never used.","'MenuItem' is defined but never used.","'CreateAuditMenu' is assigned a value but never used.","'ReactDOM' is defined but never used.","'Message' is defined but never used.","'message' is defined but never used.","'UserOutlined' is defined but never used.","'LockOutlined' is defined but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","no-global-assign","no-unsafe-negation"]